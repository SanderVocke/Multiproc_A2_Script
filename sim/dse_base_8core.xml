<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<poosl_specification xmlns="uri:poosl">
    <data_classes>
        <data_class name="Object" native="true">
            <data_method name="deepCopy" native="true">
                <return_type>Object</return_type>
            </data_method>
            <data_method name="error" native="true">
                <return_type>Object</return_type>
                <argument name="s" type="String"/>
            </data_method>
            <data_method name="assert" native="true">
                <return_type>Object</return_type>
                <argument name="b" type="Boolean"/>
                <argument name="s" type="String"/>
            </data_method>
            <data_method name="marshal" native="true">
                <return_type>String</return_type>
            </data_method>
            <data_method name="printString" native="true">
                <return_type>String</return_type>
            </data_method>
            <data_method name="shallowCopy" native="true">
                <return_type>Object</return_type>
            </data_method>
            <data_method name="isOfType" native="true">
                <return_type>Boolean</return_type>
                <argument name="s" type="String"/>
            </data_method>
            <data_method name="!=" native="true">
                <return_type>Boolean</return_type>
                <argument name="o" type="Object"/>
            </data_method>
            <data_method name="!==" native="true">
                <return_type>Boolean</return_type>
                <argument name="o" type="Object"/>
            </data_method>
            <data_method name="=" native="true">
                <return_type>Boolean</return_type>
                <argument name="o" type="Object"/>
            </data_method>
            <data_method name="==" native="true">
                <return_type>Boolean</return_type>
                <argument name="o" type="Object"/>
            </data_method>
        </data_class>
        <data_class name="Array" native="true">
            <super_class>Object</super_class>
            <data_method name="deepCopy" native="true">
                <return_type>Object</return_type>
            </data_method>
            <data_method name="shallowCopy" native="true">
                <return_type>Object</return_type>
            </data_method>
            <data_method name="printString" native="true">
                <return_type>String</return_type>
            </data_method>
            <data_method name="at" native="true">
                <return_type>Object</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="size" native="true">
                <return_type>Integer</return_type>
            </data_method>
            <data_method name="putAt" native="true">
                <return_type>Array</return_type>
                <argument name="i" type="Integer"/>
                <argument name="o" type="Object"/>
            </data_method>
            <data_method name="putAll" native="true">
                <return_type>Array</return_type>
                <argument name="o" type="Object"/>
            </data_method>
            <data_method name="resize" native="true">
                <return_type>Array</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="concat" native="true">
                <return_type>Array</return_type>
                <argument name="a" type="Array"/>
            </data_method>
            <data_method name="find" native="true">
                <return_type>Integer</return_type>
                <argument name="i" type="Integer"/>
                <argument name="o" type="Object"/>
            </data_method>
            <data_method name="subArray" native="true">
                <return_type>Array</return_type>
                <argument name="i" type="Integer"/>
                <argument name="l" type="Integer"/>
            </data_method>
            <data_method name="=" native="true">
                <return_type>Boolean</return_type>
                <argument name="o" type="Object"/>
            </data_method>
            <data_method name="+" native="true">
                <return_type>Array</return_type>
                <argument name="a" type="Array"/>
            </data_method>
        </data_class>
        <data_class name="String" native="true">
            <super_class>Object</super_class>
            <data_method name="deepCopy" native="true">
                <return_type>Object</return_type>
            </data_method>
            <data_method name="shallowCopy" native="true">
                <return_type>Object</return_type>
            </data_method>
            <data_method name="concat" native="true">
                <return_type>String</return_type>
                <argument name="s" type="String"/>
            </data_method>
            <data_method name="cr" native="true">
                <return_type>String</return_type>
            </data_method>
            <data_method name="lf" native="true">
                <return_type>String</return_type>
            </data_method>
            <data_method name="tab" native="true">
                <return_type>String</return_type>
            </data_method>
            <data_method name="find" native="true">
                <return_type>Integer</return_type>
                <argument name="i" type="Integer"/>
                <argument name="s" type="String"/>
            </data_method>
            <data_method name="at" native="true">
                <return_type>Char</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="size" native="true">
                <return_type>Integer</return_type>
            </data_method>
            <data_method name="putAt" native="true">
                <return_type>String</return_type>
                <argument name="i" type="Integer"/>
                <argument name="c" type="Char"/>
            </data_method>
            <data_method name="subString" native="true">
                <return_type>String</return_type>
                <argument name="i" type="Integer"/>
                <argument name="l" type="Integer"/>
            </data_method>
            <data_method name="unmarshal" native="true">
                <return_type>Object</return_type>
            </data_method>
            <data_method name="splitOn" native="true">
                <return_type>Array</return_type>
                <argument name="c" type="Char"/>
            </data_method>
            <data_method name="splitOnWhiteSpace" native="true">
                <return_type>Array</return_type>
            </data_method>
            <data_method name="splitOnString" native="true">
                <return_type>Array</return_type>
                <argument name="s" type="String"/>
            </data_method>
            <data_method name="splitOnAny" native="true">
                <return_type>Array</return_type>
                <argument name="c" type="String"/>
            </data_method>
            <data_method name="trim" native="false">
                <return_type>String</return_type>
            </data_method>
            <data_method name="isBoolean" native="true">
                <return_type>Boolean</return_type>
            </data_method>
            <data_method name="isChar" native="true">
                <return_type>Boolean</return_type>
            </data_method>
            <data_method name="isReal" native="true">
                <return_type>Boolean</return_type>
            </data_method>
            <data_method name="isInteger" native="true">
                <return_type>Boolean</return_type>
            </data_method>
            <data_method name="toBoolean" native="true">
                <return_type>Boolean</return_type>
            </data_method>
            <data_method name="toChar" native="true">
                <return_type>Char</return_type>
            </data_method>
            <data_method name="toReal" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="toInteger" native="true">
                <return_type>Integer</return_type>
            </data_method>
            <data_method name="=" native="true">
                <return_type>Boolean</return_type>
                <argument name="o" type="Object"/>
            </data_method>
            <data_method name="+" native="true">
                <return_type>String</return_type>
                <argument name="s" type="String"/>
            </data_method>
        </data_class>
        <data_class name="Nil" native="true">
            <super_class>Object</super_class>
        </data_class>
        <data_class name="Boolean" native="true">
            <super_class>Object</super_class>
            <data_method name="not" native="true">
                <return_type>Boolean</return_type>
            </data_method>
            <data_method name="xor" native="true">
                <return_type>Boolean</return_type>
                <argument name="b" type="Boolean"/>
            </data_method>
            <data_method name="&amp;" native="true">
                <return_type>Boolean</return_type>
                <argument name="b" type="Boolean"/>
            </data_method>
            <data_method name="|" native="true">
                <return_type>Boolean</return_type>
                <argument name="b" type="Boolean"/>
            </data_method>
            <data_method name="!" native="true">
                <return_type>Boolean</return_type>
            </data_method>
        </data_class>
        <data_class name="Char" native="true">
            <super_class>Object</super_class>
            <data_method name="asciiIndex" native="true">
                <return_type>Integer</return_type>
            </data_method>
            <data_method name="asString" native="true">
                <return_type>String</return_type>
            </data_method>
        </data_class>
        <data_class name="Integer" native="true">
            <super_class>Object</super_class>
            <data_method name="abs" native="true">
                <return_type>Integer</return_type>
            </data_method>
            <data_method name="asAsciiChar" native="true">
                <return_type>Char</return_type>
            </data_method>
            <data_method name="asReal" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="div" native="true">
                <return_type>Integer</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="fac" native="true">
                <return_type>Integer</return_type>
            </data_method>
            <data_method name="modulo" native="true">
                <return_type>Integer</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="monus" native="true">
                <return_type>Integer</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="power" native="true">
                <return_type>Integer</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="sqr" native="true">
                <return_type>Integer</return_type>
            </data_method>
            <data_method name="max" native="true">
                <return_type>Integer</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="min" native="true">
                <return_type>Integer</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="xor" native="true">
                <return_type>Integer</return_type>
            </data_method>
            <data_method name="-" native="true">
                <return_type>Integer</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="*" native="true">
                <return_type>Integer</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="/" native="true">
                <return_type>Integer</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="&amp;" native="true">
                <return_type>Integer</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="+" native="true">
                <return_type>Integer</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="&lt;" native="true">
                <return_type>Boolean</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="&lt;=" native="true">
                <return_type>Boolean</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="&gt;" native="true">
                <return_type>Boolean</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="&gt;=" native="true">
                <return_type>Boolean</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="|" native="true">
                <return_type>Integer</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="-" native="true">
                <return_type>Integer</return_type>
            </data_method>
        </data_class>
        <data_class name="Real" native="true">
            <super_class>Object</super_class>
            <data_method name="abs" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="acos" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="asin" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="asInteger" native="true">
                <return_type>Integer</return_type>
            </data_method>
            <data_method name="atan" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="atan2" native="true">
                <return_type>Real</return_type>
                <argument name="r" type="Real"/>
            </data_method>
            <data_method name="ceiling" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="cos" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="exp" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="floor" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="ln" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="log" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="monus" native="true">
                <return_type>Real</return_type>
                <argument name="r" type="Real"/>
            </data_method>
            <data_method name="power" native="true">
                <return_type>Real</return_type>
                <argument name="r" type="Real"/>
            </data_method>
            <data_method name="round" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="sin" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="sqr" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="sqrt" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="tan" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="max" native="true">
                <return_type>Real</return_type>
                <argument name="r" type="Real"/>
            </data_method>
            <data_method name="min" native="true">
                <return_type>Real</return_type>
                <argument name="r" type="Real"/>
            </data_method>
            <data_method name="-" native="true">
                <return_type>Real</return_type>
                <argument name="r" type="Real"/>
            </data_method>
            <data_method name="*" native="true">
                <return_type>Real</return_type>
                <argument name="r" type="Real"/>
            </data_method>
            <data_method name="/" native="true">
                <return_type>Real</return_type>
                <argument name="r" type="Real"/>
            </data_method>
            <data_method name="+" native="true">
                <return_type>Real</return_type>
                <argument name="r" type="Real"/>
            </data_method>
            <data_method name="&lt;" native="true">
                <return_type>Boolean</return_type>
                <argument name="r" type="Real"/>
            </data_method>
            <data_method name="&lt;=" native="true">
                <return_type>Boolean</return_type>
                <argument name="r" type="Real"/>
            </data_method>
            <data_method name="&gt;" native="true">
                <return_type>Boolean</return_type>
                <argument name="r" type="Real"/>
            </data_method>
            <data_method name="&gt;=" native="true">
                <return_type>Boolean</return_type>
                <argument name="r" type="Real"/>
            </data_method>
            <data_method name="-" native="true">
                <return_type>Real</return_type>
            </data_method>
        </data_class>
        <data_class name="RandomGenerator" native="true">
            <super_class>Object</super_class>
            <data_method name="random" native="true">
                <return_type>Real</return_type>
            </data_method>
            <data_method name="randomInt" native="true">
                <return_type>Integer</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="randomiseSeed" native="true">
                <return_type>RandomGenerator</return_type>
            </data_method>
            <data_method name="seed" native="true">
                <return_type>RandomGenerator</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
        </data_class>
        <data_class name="FileIn" native="true">
            <super_class>Object</super_class>
            <data_method name="source" native="true">
                <return_type>FileIn</return_type>
                <argument name="s" type="String"/>
            </data_method>
            <data_method name="open" native="true">
                <return_type>FileIn</return_type>
            </data_method>
            <data_method name="atEndOfFile" native="true">
                <return_type>Boolean</return_type>
            </data_method>
            <data_method name="close" native="true">
                <return_type>FileIn</return_type>
            </data_method>
            <data_method name="read" native="true">
                <return_type>String</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="readUntil" native="true">
                <return_type>String</return_type>
                <argument name="c" type="Char"/>
            </data_method>
            <data_method name="readWord" native="true">
                <return_type>String</return_type>
            </data_method>
            <data_method name="readLine" native="true">
                <return_type>String</return_type>
            </data_method>
            <data_method name="readString" native="true">
                <return_type>String</return_type>
            </data_method>
        </data_class>
        <data_class name="FileOut" native="true">
            <super_class>Object</super_class>
            <data_method name="destination" native="true">
                <return_type>FileOut</return_type>
                <argument name="s" type="String"/>
            </data_method>
            <data_method name="open" native="true">
                <return_type>FileOut</return_type>
            </data_method>
            <data_method name="append" native="true">
                <return_type>FileOut</return_type>
            </data_method>
            <data_method name="flush" native="true">
                <return_type>FileOut</return_type>
            </data_method>
            <data_method name="close" native="true">
                <return_type>FileOut</return_type>
            </data_method>
            <data_method name="write" native="true">
                <return_type>FileOut</return_type>
                <argument name="s" type="String"/>
            </data_method>
            <data_method name="writeLine" native="true">
                <return_type>FileOut</return_type>
                <argument name="s" type="String"/>
            </data_method>
            <data_method name="writeString" native="true">
                <return_type>FileOut</return_type>
                <argument name="s" type="String"/>
            </data_method>
        </data_class>
        <data_class name="Socket" native="true">
            <super_class>Object</super_class>
            <data_method name="acceptFrom" native="true">
                <return_type>Socket</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="connectTo" native="true">
                <return_type>Socket</return_type>
                <argument name="s" type="String"/>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="isConnected" native="true">
                <return_type>Boolean</return_type>
            </data_method>
            <data_method name="isDisconnected" native="true">
                <return_type>Boolean</return_type>
            </data_method>
            <data_method name="close" native="true">
                <return_type>Socket</return_type>
            </data_method>
            <data_method name="hasCharacters" native="true">
                <return_type>Boolean</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="read" native="true">
                <return_type>String</return_type>
                <argument name="i" type="Integer"/>
            </data_method>
            <data_method name="hasCharacter" native="true">
                <return_type>Boolean</return_type>
                <argument name="c" type="Char"/>
            </data_method>
            <data_method name="readUntil" native="true">
                <return_type>String</return_type>
                <argument name="c" type="Char"/>
            </data_method>
            <data_method name="hasWord" native="true">
                <return_type>Boolean</return_type>
            </data_method>
            <data_method name="readWord" native="true">
                <return_type>String</return_type>
            </data_method>
            <data_method name="hasLine" native="true">
                <return_type>Boolean</return_type>
            </data_method>
            <data_method name="readLine" native="true">
                <return_type>String</return_type>
            </data_method>
            <data_method name="hasString" native="true">
                <return_type>Boolean</return_type>
            </data_method>
            <data_method name="readString" native="true">
                <return_type>String</return_type>
            </data_method>
            <data_method name="write" native="true">
                <return_type>Socket</return_type>
                <argument name="s" type="String"/>
            </data_method>
            <data_method name="writeLine" native="true">
                <return_type>Socket</return_type>
                <argument name="s" type="String"/>
            </data_method>
            <data_method name="writeString" native="true">
                <return_type>Socket</return_type>
                <argument name="s" type="String"/>
            </data_method>
        </data_class>
        <data_class name="Observer" native="true">
            <super_class>Object</super_class>
            <data_method name="identifyWith" native="true">
                <return_type>Observer</return_type>
                <argument name="s" type="String"/>
            </data_method>
            <data_method name="identity" native="true">
                <return_type>String</return_type>
            </data_method>
            <data_method name="result" native="true">
                <return_type>String</return_type>
            </data_method>
            <data_method name="register" native="true">
                <return_type>Observer</return_type>
            </data_method>
            <data_method name="deregister" native="true">
                <return_type>Observer</return_type>
            </data_method>
            <data_method name="complete" native="true">
                <return_type>Observer</return_type>
            </data_method>
            <data_method name="halt" native="true">
                <return_type>Observer</return_type>
            </data_method>
        </data_class>
        <data_class name="PerformanceMonitor" native="false">
            <super_class>Observer</super_class>
            <instance_variable name="BatchSize" type="Integer"/>
            <instance_variable name="Accuracy" type="Real"/>
            <instance_variable name="ConfidenceLevel" type="Real"/>
            <instance_variable name="IntervalEstimation" type="ConfidenceInterval"/>
            <instance_variable name="LogFile" type="FileOut"/>
            <instance_variable name="Complete" type="Boolean"/>
            <data_method name="accurate" native="false">
                <return_type>Boolean</return_type>
                <local_variable name="Accurate" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Accurate">
                            <data_method_call method_name="accurate" super="false">
                                <receiver>
                                    <variable name="IntervalEstimation"/>
                                </receiver>
                                <argument>
                                    <variable name="Accuracy"/>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="Accurate"/>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="not" super="false">
                                            <receiver>
                                                <variable name="Complete"/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="Complete">
                                        <constant type="boolean">true</constant>
                                    </assignment>
                                    <data_method_call method_name="complete" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <variable name="Accurate"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="complete" native="false">
                <return_type>Observer</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="log" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <data_method_call method_name="complete" super="true">
                                <receiver>
                                    <self/>
                                </receiver>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="result" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="printString" super="false">
                            <receiver>
                                <data_method_call method_name="result" super="false">
                                    <receiver>
                                        <variable name="IntervalEstimation"/>
                                    </receiver>
                                </data_method_call>
                            </receiver>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="setDefaultBatchSize" native="false">
                <return_type>PerformanceMonitor</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="BatchSize">
                            <constant type="integer">10000</constant>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="concat" super="false">
                            <receiver>
                                <data_method_call method_name="lf" super="false">
                                    <receiver>
                                        <data_method_call method_name="printHeading" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <data_method_call method_name="printStatistics" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="log" native="false">
                <return_type>PerformanceMonitor</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="LogFile"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Log File not initialised."</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                            <else>
                                <sequence_of_expressions>
                                    <data_method_call method_name="append" super="false">
                                        <receiver>
                                            <variable name="LogFile"/>
                                        </receiver>
                                    </data_method_call>
                                    <data_method_call method_name="write" super="false">
                                        <receiver>
                                            <variable name="LogFile"/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <data_method_call method_name="tab" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="tab" super="false">
                                                                <receiver>
                                                                    <data_method_call method_name="logStatistics" super="false">
                                                                        <receiver>
                                                                            <variable name="IntervalEstimation"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </receiver>
                                                            </data_method_call>
                                                        </receiver>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="cr" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="printString" super="false">
                                                                <receiver>
                                                                    <data_method_call method_name="accurate" super="false">
                                                                        <receiver>
                                                                            <variable name="IntervalEstimation"/>
                                                                        </receiver>
                                                                        <argument>
                                                                            <variable name="Accuracy"/>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </receiver>
                                                            </data_method_call>
                                                        </receiver>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="close" super="false">
                                        <receiver>
                                            <variable name="LogFile"/>
                                        </receiver>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </else>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="getIntervalEstimation" native="false">
                <return_type>ConfidenceInterval</return_type>
                <body_expression>
                    <return>
                        <variable name="IntervalEstimation"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="printStatistics" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="Accuracy"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <data_method_call method_name="printString" super="false">
                                    <receiver>
                                        <variable name="IntervalEstimation"/>
                                    </receiver>
                                </data_method_call>
                            </return>
                        </then>
                        <else>
                            <return>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <data_method_call method_name="concat" super="false">
                                            <receiver>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="printHeading" super="false">
                                                            <receiver>
                                                                <variable name="IntervalEstimation"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"		Accurate:\n"</constant>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <data_method_call method_name="tab" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="printStatistics" super="false">
                                                            <receiver>
                                                                <variable name="IntervalEstimation"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                </data_method_call>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                    <argument>
                                        <data_method_call method_name="printString" super="false">
                                            <receiver>
                                                <data_method_call method_name="accurate" super="false">
                                                    <receiver>
                                                        <variable name="IntervalEstimation"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="Accuracy"/>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                </data_method_call>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="logStatistics" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="concat" super="false">
                            <receiver>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <data_method_call method_name="concat" super="false">
                                            <receiver>
                                                <data_method_call method_name="tab" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="logHeading" super="false">
                                                            <receiver>
                                                                <variable name="IntervalEstimation"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <constant type="string">"Accurate:\n"</constant>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                    <argument>
                                        <data_method_call method_name="tab" super="false">
                                            <receiver>
                                                <data_method_call method_name="logStatistics" super="false">
                                                    <receiver>
                                                        <variable name="IntervalEstimation"/>
                                                    </receiver>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <data_method_call method_name="printString" super="false">
                                    <receiver>
                                        <data_method_call method_name="accurate" super="false">
                                            <receiver>
                                                <variable name="IntervalEstimation"/>
                                            </receiver>
                                            <argument>
                                                <variable name="Accuracy"/>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="LongRunSampleAverage" native="false">
            <super_class>PerformanceMonitor</super_class>
            <instance_variable name="NumberOfCycles" type="Integer"/>
            <instance_variable name="CurrentLength" type="Integer"/>
            <instance_variable name="Constant" type="Real"/>
            <instance_variable name="AverageSquaredLength" type="Real"/>
            <instance_variable name="AverageSumLengthProduct" type="Real"/>
            <instance_variable name="CurrentSum" type="Real"/>
            <instance_variable name="AverageSum" type="Real"/>
            <instance_variable name="AverageLength" type="Real"/>
            <instance_variable name="AverageSquaredSum" type="Real"/>
            <instance_variable name="TransientMode" type="Boolean"/>
            <data_method name="withParameters" native="false">
                <return_type>LongRunSampleAverage</return_type>
                <argument name="A" type="Real"/>
                <argument name="CL" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="A"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Real"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Accuracy parameter for Long Run Sample Average must be a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="CL"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="CL"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Real"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Confidence Level parameter for Long Run Sample Average must be a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">1.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Accuracy parameter for Long Run Sample Average must be within the interval (0.0, 1.0)"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="CL"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;=">
                                                <left_operand>
                                                    <variable name="CL"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">1.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Confidence Level parameter for Long Run Sample Average must be within the interval [0.0, 1.0)"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Accuracy">
                            <variable name="A"/>
                        </assignment>
                        <assignment variable_name="Complete">
                            <constant type="boolean">false</constant>
                        </assignment>
                        <data_method_call method_name="withConfidenceLevel" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="CL"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="register" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="setBatchSize" native="false">
                <return_type>LongRunSampleAverage</return_type>
                <argument name="M" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="M"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="M"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"BatchSize for Long Run Sample Average must be an Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="M"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <assignment variable_name="BatchSize">
                                    <variable name="M"/>
                                </assignment>
                            </then>
                            <else>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"BatchSize parameter for Long Run Sample Average must be larger than 0"</constant>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="logTo" native="false">
                <return_type>LongRunSampleAverage</return_type>
                <argument name="Name" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="identifyWith" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="Name"/>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="LogFile">
                            <data_method_call method_name="open" super="false">
                                <receiver>
                                    <data_method_call method_name="destination" super="false">
                                        <receiver>
                                            <new data_class="FileOut"/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <variable name="Name"/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">".log"</constant>
                                                </argument>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                            <argument>
                                <data_method_call method_name="cr" super="false">
                                    <receiver>
                                        <data_method_call method_name="lf" super="false">
                                            <receiver>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="concat" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="concat" super="false">
                                                                    <receiver>
                                                                        <constant type="string">"Statistics for the Long Run Sample Average "</constant>
                                                                    </receiver>
                                                                    <argument>
                                                                        <variable name="Name"/>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">" with Accuracy "</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="Accuracy"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                            <argument>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <data_method_call method_name="logHeading" super="false">
                                            <receiver>
                                                <variable name="IntervalEstimation"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"\t\tAccurate:\n"</constant>
                                    </argument>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                            <argument>
                                <constant type="string">"-------------------------------------------------------------------------------------------------------------------------\n"</constant>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="close" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="rewardRC" native="false">
                <return_type>LongRunSampleAverage</return_type>
                <argument name="Reward" type="Object"/>
                <argument name="RecurrenceCondition" type="Boolean"/>
                <local_variable name="PointEstimation" type="Real"/>
                <local_variable name="StandardDeviation" type="Real"/>
                <local_variable name="Variance" type="Real"/>
                <local_variable name="Factor" type="Real"/>
                <local_variable name="HalfWidth" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="Reward"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="Reward"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="Reward"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Reward for Long run Sample Average must be an Integer or Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="Reward"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="Reward">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="Reward"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <variable name="RecurrenceCondition"/>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <variable name="TransientMode"/>
                                        </condition>
                                        <then>
                                            <assignment variable_name="TransientMode">
                                                <constant type="boolean">false</constant>
                                            </assignment>
                                        </then>
                                        <else>
                                            <sequence_of_expressions>
                                                <assignment variable_name="NumberOfCycles">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="NumberOfCycles"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <assignment variable_name="Factor">
                                                    <binary_operation operator="/">
                                                        <left_operand>
                                                            <data_method_call method_name="asReal" super="false">
                                                                <receiver>
                                                                    <sequence_of_expressions>
                                                                        <binary_operation operator="-">
                                                                            <left_operand>
                                                                                <variable name="NumberOfCycles"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <constant type="integer">1</constant>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </sequence_of_expressions>
                                                                </receiver>
                                                            </data_method_call>
                                                        </left_operand>
                                                        <right_operand>
                                                            <data_method_call method_name="asReal" super="false">
                                                                <receiver>
                                                                    <variable name="NumberOfCycles"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <assignment variable_name="AverageSum">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="*">
                                                                    <left_operand>
                                                                        <variable name="Factor"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="AverageSum"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </left_operand>
                                                        <right_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="/">
                                                                    <left_operand>
                                                                        <variable name="CurrentSum"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <data_method_call method_name="asReal" super="false">
                                                                            <receiver>
                                                                                <variable name="NumberOfCycles"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <assignment variable_name="AverageLength">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="*">
                                                                    <left_operand>
                                                                        <variable name="Factor"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="AverageLength"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </left_operand>
                                                        <right_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="/">
                                                                    <left_operand>
                                                                        <data_method_call method_name="asReal" super="false">
                                                                            <receiver>
                                                                                <variable name="CurrentLength"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <data_method_call method_name="asReal" super="false">
                                                                            <receiver>
                                                                                <variable name="NumberOfCycles"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <assignment variable_name="AverageSquaredSum">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="*">
                                                                    <left_operand>
                                                                        <variable name="Factor"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="AverageSquaredSum"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </left_operand>
                                                        <right_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="/">
                                                                    <left_operand>
                                                                        <data_method_call method_name="sqr" super="false">
                                                                            <receiver>
                                                                                <variable name="CurrentSum"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <data_method_call method_name="asReal" super="false">
                                                                            <receiver>
                                                                                <variable name="NumberOfCycles"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <assignment variable_name="AverageSquaredLength">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="*">
                                                                    <left_operand>
                                                                        <variable name="Factor"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="AverageSquaredLength"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </left_operand>
                                                        <right_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="/">
                                                                    <left_operand>
                                                                        <data_method_call method_name="asReal" super="false">
                                                                            <receiver>
                                                                                <data_method_call method_name="sqr" super="false">
                                                                                    <receiver>
                                                                                        <variable name="CurrentLength"/>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <data_method_call method_name="asReal" super="false">
                                                                            <receiver>
                                                                                <variable name="NumberOfCycles"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <assignment variable_name="AverageSumLengthProduct">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="*">
                                                                    <left_operand>
                                                                        <variable name="Factor"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="AverageSumLengthProduct"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </left_operand>
                                                        <right_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="/">
                                                                    <left_operand>
                                                                        <sequence_of_expressions>
                                                                            <binary_operation operator="*">
                                                                                <left_operand>
                                                                                    <variable name="CurrentSum"/>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <data_method_call method_name="asReal" super="false">
                                                                                        <receiver>
                                                                                            <variable name="CurrentLength"/>
                                                                                        </receiver>
                                                                                    </data_method_call>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </sequence_of_expressions>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <data_method_call method_name="asReal" super="false">
                                                                            <receiver>
                                                                                <variable name="NumberOfCycles"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <if>
                                                    <condition>
                                                        <binary_operation operator="&gt;">
                                                            <left_operand>
                                                                <variable name="NumberOfCycles"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">1</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </condition>
                                                    <then>
                                                        <sequence_of_expressions>
                                                            <assignment variable_name="PointEstimation">
                                                                <binary_operation operator="/">
                                                                    <left_operand>
                                                                        <variable name="AverageSum"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="AverageLength"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </assignment>
                                                            <assignment variable_name="Variance">
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="*">
                                                                        <left_operand>
                                                                            <sequence_of_expressions>
                                                                                <binary_operation operator="/">
                                                                                    <left_operand>
                                                                                        <constant type="real">1.0</constant>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <variable name="Factor"/>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </sequence_of_expressions>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <sequence_of_expressions>
                                                                                <binary_operation operator="+">
                                                                                    <left_operand>
                                                                                        <binary_operation operator="-">
                                                                                            <left_operand>
                                                                                                <variable name="AverageSquaredSum"/>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <sequence_of_expressions>
                                                                                                    <binary_operation operator="*">
                                                                                                        <left_operand>
                                                                                                            <binary_operation operator="*">
                                                                                                                <left_operand>
                                                                                                                    <constant type="real">2.0</constant>
                                                                                                                </left_operand>
                                                                                                                <right_operand>
                                                                                                                    <variable name="PointEstimation"/>
                                                                                                                </right_operand>
                                                                                                            </binary_operation>
                                                                                                        </left_operand>
                                                                                                        <right_operand>
                                                                                                            <variable name="AverageSumLengthProduct"/>
                                                                                                        </right_operand>
                                                                                                    </binary_operation>
                                                                                                </sequence_of_expressions>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <sequence_of_expressions>
                                                                                            <binary_operation operator="*">
                                                                                                <left_operand>
                                                                                                    <data_method_call method_name="sqr" super="false">
                                                                                                        <receiver>
                                                                                                            <variable name="PointEstimation"/>
                                                                                                        </receiver>
                                                                                                    </data_method_call>
                                                                                                </left_operand>
                                                                                                <right_operand>
                                                                                                    <variable name="AverageSquaredLength"/>
                                                                                                </right_operand>
                                                                                            </binary_operation>
                                                                                        </sequence_of_expressions>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </sequence_of_expressions>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </assignment>
                                                            <if>
                                                                <condition>
                                                                    <binary_operation operator="&gt;">
                                                                        <left_operand>
                                                                            <variable name="Variance"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <constant type="real">0.0</constant>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </condition>
                                                                <then>
                                                                    <assignment variable_name="StandardDeviation">
                                                                        <data_method_call method_name="sqrt" super="false">
                                                                            <receiver>
                                                                                <variable name="Variance"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </assignment>
                                                                </then>
                                                                <else>
                                                                    <assignment variable_name="StandardDeviation">
                                                                        <constant type="real">0.0</constant>
                                                                    </assignment>
                                                                </else>
                                                            </if>
                                                            <assignment variable_name="HalfWidth">
                                                                <binary_operation operator="/">
                                                                    <left_operand>
                                                                        <sequence_of_expressions>
                                                                            <binary_operation operator="*">
                                                                                <left_operand>
                                                                                    <variable name="Constant"/>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <variable name="StandardDeviation"/>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </sequence_of_expressions>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <sequence_of_expressions>
                                                                            <binary_operation operator="*">
                                                                                <left_operand>
                                                                                    <variable name="AverageLength"/>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <sequence_of_expressions>
                                                                                        <data_method_call method_name="sqrt" super="false">
                                                                                            <receiver>
                                                                                                <data_method_call method_name="asReal" super="false">
                                                                                                    <receiver>
                                                                                                        <variable name="NumberOfCycles"/>
                                                                                                    </receiver>
                                                                                                </data_method_call>
                                                                                            </receiver>
                                                                                        </data_method_call>
                                                                                    </sequence_of_expressions>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </sequence_of_expressions>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </assignment>
                                                            <assignment variable_name="IntervalEstimation">
                                                                <data_method_call method_name="withParameters" super="false">
                                                                    <receiver>
                                                                        <new data_class="ConfidenceInterval"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <binary_operation operator="-">
                                                                            <left_operand>
                                                                                <variable name="PointEstimation"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <variable name="HalfWidth"/>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </argument>
                                                                    <argument>
                                                                        <binary_operation operator="+">
                                                                            <left_operand>
                                                                                <variable name="PointEstimation"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <variable name="HalfWidth"/>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </argument>
                                                                    <argument>
                                                                        <variable name="ConfidenceLevel"/>
                                                                    </argument>
                                                                </data_method_call>
                                                            </assignment>
                                                        </sequence_of_expressions>
                                                    </then>
                                                </if>
                                            </sequence_of_expressions>
                                        </else>
                                    </if>
                                    <assignment variable_name="CurrentSum">
                                        <variable name="Reward"/>
                                    </assignment>
                                    <assignment variable_name="CurrentLength">
                                        <constant type="integer">1</constant>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <if>
                                    <condition>
                                        <data_method_call method_name="not" super="false">
                                            <receiver>
                                                <variable name="TransientMode"/>
                                            </receiver>
                                        </data_method_call>
                                    </condition>
                                    <then>
                                        <sequence_of_expressions>
                                            <assignment variable_name="CurrentSum">
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="CurrentSum"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <variable name="Reward"/>
                                                    </right_operand>
                                                </binary_operation>
                                            </assignment>
                                            <assignment variable_name="CurrentLength">
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="CurrentLength"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="integer">1</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </assignment>
                                        </sequence_of_expressions>
                                    </then>
                                </if>
                            </else>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="rewardBM" native="false">
                <return_type>LongRunSampleAverage</return_type>
                <argument name="Reward" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="rewardRC" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="Reward"/>
                            </argument>
                            <argument>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="CurrentLength"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="CurrentLength"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="BatchSize"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="withConfidenceLevel" native="false">
                <return_type>LongRunSampleAverage</return_type>
                <argument name="CL" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="ConfidenceLevel">
                            <variable name="CL"/>
                        </assignment>
                        <assignment variable_name="IntervalEstimation">
                            <data_method_call method_name="withParameters" super="false">
                                <receiver>
                                    <new data_class="ConfidenceInterval"/>
                                </receiver>
                                <argument>
                                    <nil/>
                                </argument>
                                <argument>
                                    <nil/>
                                </argument>
                                <argument>
                                    <variable name="ConfidenceLevel"/>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="Constant">
                            <binary_operation operator="*">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <data_method_call method_name="sqrt" super="false">
                                            <receiver>
                                                <constant type="real">2.0</constant>
                                            </receiver>
                                        </data_method_call>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <sequence_of_expressions>
                                        <data_method_call method_name="calculateInverseErfC" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                            <argument>
                                                <binary_operation operator="-">
                                                    <left_operand>
                                                        <constant type="real">1.0</constant>
                                                    </left_operand>
                                                    <right_operand>
                                                        <variable name="ConfidenceLevel"/>
                                                    </right_operand>
                                                </binary_operation>
                                            </argument>
                                        </data_method_call>
                                    </sequence_of_expressions>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="TransientMode">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <assignment variable_name="NumberOfCycles">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="CurrentLength">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="AverageSum">
                            <constant type="real">0.0</constant>
                        </assignment>
                        <assignment variable_name="AverageLength">
                            <constant type="real">0.0</constant>
                        </assignment>
                        <assignment variable_name="AverageSquaredSum">
                            <constant type="real">0.0</constant>
                        </assignment>
                        <assignment variable_name="AverageSquaredLength">
                            <constant type="real">0.0</constant>
                        </assignment>
                        <assignment variable_name="AverageSumLengthProduct">
                            <constant type="real">0.0</constant>
                        </assignment>
                        <data_method_call method_name="setDefaultBatchSize" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="calculateInverseErfC" native="false">
                <return_type>Real</return_type>
                <argument name="y" type="Real"/>
                <local_variable name="s" type="Real"/>
                <local_variable name="t" type="Real"/>
                <local_variable name="u" type="Real"/>
                <local_variable name="w" type="Real"/>
                <local_variable name="x" type="Real"/>
                <local_variable name="z" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="z">
                            <variable name="y"/>
                        </assignment>
                        <assignment variable_name="w">
                            <binary_operation operator="-">
                                <left_operand>
                                    <constant type="real">0.916461398268964</constant>
                                </left_operand>
                                <right_operand>
                                    <data_method_call method_name="ln" super="false">
                                        <receiver>
                                            <variable name="z"/>
                                        </receiver>
                                    </data_method_call>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="u">
                            <data_method_call method_name="sqrt" super="false">
                                <receiver>
                                    <variable name="w"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="s">
                            <binary_operation operator="/">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <data_method_call method_name="ln" super="false">
                                                    <receiver>
                                                        <variable name="u"/>
                                                    </receiver>
                                                </data_method_call>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="real">0.488826640273108</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <variable name="w"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="t">
                            <binary_operation operator="/">
                                <left_operand>
                                    <constant type="real">1.0</constant>
                                </left_operand>
                                <right_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="u"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="real">0.231729200323405</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="x">
                            <binary_operation operator="-">
                                <left_operand>
                                    <binary_operation operator="*">
                                        <left_operand>
                                            <variable name="u"/>
                                        </left_operand>
                                        <right_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="-">
                                                    <left_operand>
                                                        <constant type="real">1.0</constant>
                                                    </left_operand>
                                                    <right_operand>
                                                        <binary_operation operator="*">
                                                            <left_operand>
                                                                <variable name="s"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="+">
                                                                        <left_operand>
                                                                            <binary_operation operator="*">
                                                                                <left_operand>
                                                                                    <variable name="s"/>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <constant type="real">0.124610454613712</constant>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <constant type="real">0.5</constant>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </right_operand>
                                    </binary_operation>
                                </left_operand>
                                <right_operand>
                                    <binary_operation operator="*">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="*">
                                                            <left_operand>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="+">
                                                                        <left_operand>
                                                                            <binary_operation operator="*">
                                                                                <left_operand>
                                                                                    <sequence_of_expressions>
                                                                                        <binary_operation operator="+">
                                                                                            <left_operand>
                                                                                                <binary_operation operator="*">
                                                                                                    <left_operand>
                                                                                                        <sequence_of_expressions>
                                                                                                            <binary_operation operator="+">
                                                                                                                <left_operand>
                                                                                                                    <binary_operation operator="*">
                                                                                                                        <left_operand>
                                                                                                                            <constant type="real">-0.0728846765585675</constant>
                                                                                                                        </left_operand>
                                                                                                                        <right_operand>
                                                                                                                            <variable name="t"/>
                                                                                                                        </right_operand>
                                                                                                                    </binary_operation>
                                                                                                                </left_operand>
                                                                                                                <right_operand>
                                                                                                                    <constant type="real">0.269999308670029</constant>
                                                                                                                </right_operand>
                                                                                                            </binary_operation>
                                                                                                        </sequence_of_expressions>
                                                                                                    </left_operand>
                                                                                                    <right_operand>
                                                                                                        <variable name="t"/>
                                                                                                    </right_operand>
                                                                                                </binary_operation>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <constant type="real">0.150689047360223</constant>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </sequence_of_expressions>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <variable name="t"/>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <constant type="real">0.116065025341614</constant>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="t"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">0.499999303439796</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="t"/>
                                        </right_operand>
                                    </binary_operation>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="t">
                            <binary_operation operator="/">
                                <left_operand>
                                    <constant type="real">3.97886080735226</constant>
                                </left_operand>
                                <right_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="x"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="real">3.97886080735226</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="u">
                            <binary_operation operator="-">
                                <left_operand>
                                    <variable name="t"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="real">0.5</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="s">
                            <binary_operation operator="+">
                                <left_operand>
                                    <binary_operation operator="*">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="*">
                                                            <left_operand>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="+">
                                                                        <left_operand>
                                                                            <binary_operation operator="*">
                                                                                <left_operand>
                                                                                    <sequence_of_expressions>
                                                                                        <binary_operation operator="-">
                                                                                            <left_operand>
                                                                                                <binary_operation operator="*">
                                                                                                    <left_operand>
                                                                                                        <sequence_of_expressions>
                                                                                                            <binary_operation operator="-">
                                                                                                                <left_operand>
                                                                                                                    <binary_operation operator="*">
                                                                                                                        <left_operand>
                                                                                                                            <sequence_of_expressions>
                                                                                                                                <binary_operation operator="+">
                                                                                                                                    <left_operand>
                                                                                                                                        <binary_operation operator="*">
                                                                                                                                            <left_operand>
                                                                                                                                                <sequence_of_expressions>
                                                                                                                                                    <binary_operation operator="+">
                                                                                                                                                        <left_operand>
                                                                                                                                                            <binary_operation operator="*">
                                                                                                                                                                <left_operand>
                                                                                                                                                                    <sequence_of_expressions>
                                                                                                                                                                        <binary_operation operator="-">
                                                                                                                                                                            <left_operand>
                                                                                                                                                                                <binary_operation operator="*">
                                                                                                                                                                                    <left_operand>
                                                                                                                                                                                        <sequence_of_expressions>
                                                                                                                                                                                            <binary_operation operator="-">
                                                                                                                                                                                                <left_operand>
                                                                                                                                                                                                    <binary_operation operator="*">
                                                                                                                                                                                                        <left_operand>
                                                                                                                                                                                                            <sequence_of_expressions>
                                                                                                                                                                                                                <binary_operation operator="+">
                                                                                                                                                                                                                    <left_operand>
                                                                                                                                                                                                                        <binary_operation operator="*">
                                                                                                                                                                                                                            <left_operand>
                                                                                                                                                                                                                                <constant type="real">0.00112648096188977922</constant>
                                                                                                                                                                                                                            </left_operand>
                                                                                                                                                                                                                            <right_operand>
                                                                                                                                                                                                                                <variable name="u"/>
                                                                                                                                                                                                                            </right_operand>
                                                                                                                                                                                                                        </binary_operation>
                                                                                                                                                                                                                    </left_operand>
                                                                                                                                                                                                                    <right_operand>
                                                                                                                                                                                                                        <constant type="real">0.000105739299623423047</constant>
                                                                                                                                                                                                                    </right_operand>
                                                                                                                                                                                                                </binary_operation>
                                                                                                                                                                                                            </sequence_of_expressions>
                                                                                                                                                                                                        </left_operand>
                                                                                                                                                                                                        <right_operand>
                                                                                                                                                                                                            <variable name="u"/>
                                                                                                                                                                                                        </right_operand>
                                                                                                                                                                                                    </binary_operation>
                                                                                                                                                                                                </left_operand>
                                                                                                                                                                                                <right_operand>
                                                                                                                                                                                                    <constant type="real">0.00351287146129100025</constant>
                                                                                                                                                                                                </right_operand>
                                                                                                                                                                                            </binary_operation>
                                                                                                                                                                                        </sequence_of_expressions>
                                                                                                                                                                                    </left_operand>
                                                                                                                                                                                    <right_operand>
                                                                                                                                                                                        <variable name="u"/>
                                                                                                                                                                                    </right_operand>
                                                                                                                                                                                </binary_operation>
                                                                                                                                                                            </left_operand>
                                                                                                                                                                            <right_operand>
                                                                                                                                                                                <constant type="real">0.000771708358954120939</constant>
                                                                                                                                                                            </right_operand>
                                                                                                                                                                        </binary_operation>
                                                                                                                                                                    </sequence_of_expressions>
                                                                                                                                                                </left_operand>
                                                                                                                                                                <right_operand>
                                                                                                                                                                    <variable name="u"/>
                                                                                                                                                                </right_operand>
                                                                                                                                                            </binary_operation>
                                                                                                                                                        </left_operand>
                                                                                                                                                        <right_operand>
                                                                                                                                                            <constant type="real">0.00685649426074558612</constant>
                                                                                                                                                        </right_operand>
                                                                                                                                                    </binary_operation>
                                                                                                                                                </sequence_of_expressions>
                                                                                                                                            </left_operand>
                                                                                                                                            <right_operand>
                                                                                                                                                <variable name="u"/>
                                                                                                                                            </right_operand>
                                                                                                                                        </binary_operation>
                                                                                                                                    </left_operand>
                                                                                                                                    <right_operand>
                                                                                                                                        <constant type="real">0.00339721910367775861</constant>
                                                                                                                                    </right_operand>
                                                                                                                                </binary_operation>
                                                                                                                            </sequence_of_expressions>
                                                                                                                        </left_operand>
                                                                                                                        <right_operand>
                                                                                                                            <variable name="u"/>
                                                                                                                        </right_operand>
                                                                                                                    </binary_operation>
                                                                                                                </left_operand>
                                                                                                                <right_operand>
                                                                                                                    <constant type="real">0.011274916933250487</constant>
                                                                                                                </right_operand>
                                                                                                            </binary_operation>
                                                                                                        </sequence_of_expressions>
                                                                                                    </left_operand>
                                                                                                    <right_operand>
                                                                                                        <variable name="u"/>
                                                                                                    </right_operand>
                                                                                                </binary_operation>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <constant type="real">0.0118598117047771104</constant>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </sequence_of_expressions>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <variable name="u"/>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <constant type="real">0.0142961988697898018</constant>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="u"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">0.0346494207789099922</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="u"/>
                                        </right_operand>
                                    </binary_operation>
                                </left_operand>
                                <right_operand>
                                    <constant type="real">0.00220995927012179067</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="s">
                            <binary_operation operator="-">
                                <left_operand>
                                    <binary_operation operator="*">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="*">
                                                            <left_operand>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="+">
                                                                        <left_operand>
                                                                            <binary_operation operator="*">
                                                                                <left_operand>
                                                                                    <sequence_of_expressions>
                                                                                        <binary_operation operator="+">
                                                                                            <left_operand>
                                                                                                <binary_operation operator="*">
                                                                                                    <left_operand>
                                                                                                        <sequence_of_expressions>
                                                                                                            <binary_operation operator="+">
                                                                                                                <left_operand>
                                                                                                                    <binary_operation operator="*">
                                                                                                                        <left_operand>
                                                                                                                            <sequence_of_expressions>
                                                                                                                                <binary_operation operator="+">
                                                                                                                                    <left_operand>
                                                                                                                                        <binary_operation operator="*">
                                                                                                                                            <left_operand>
                                                                                                                                                <sequence_of_expressions>
                                                                                                                                                    <binary_operation operator="+">
                                                                                                                                                        <left_operand>
                                                                                                                                                            <binary_operation operator="*">
                                                                                                                                                                <left_operand>
                                                                                                                                                                    <sequence_of_expressions>
                                                                                                                                                                        <binary_operation operator="+">
                                                                                                                                                                            <left_operand>
                                                                                                                                                                                <binary_operation operator="*">
                                                                                                                                                                                    <left_operand>
                                                                                                                                                                                        <sequence_of_expressions>
                                                                                                                                                                                            <binary_operation operator="+">
                                                                                                                                                                                                <left_operand>
                                                                                                                                                                                                    <binary_operation operator="*">
                                                                                                                                                                                                        <left_operand>
                                                                                                                                                                                                            <sequence_of_expressions>
                                                                                                                                                                                                                <binary_operation operator="+">
                                                                                                                                                                                                                    <left_operand>
                                                                                                                                                                                                                        <binary_operation operator="*">
                                                                                                                                                                                                                            <left_operand>
                                                                                                                                                                                                                                <sequence_of_expressions>
                                                                                                                                                                                                                                    <binary_operation operator="+">
                                                                                                                                                                                                                                        <left_operand>
                                                                                                                                                                                                                                            <binary_operation operator="*">
                                                                                                                                                                                                                                                <left_operand>
                                                                                                                                                                                                                                                    <sequence_of_expressions>
                                                                                                                                                                                                                                                        <binary_operation operator="-">
                                                                                                                                                                                                                                                            <left_operand>
                                                                                                                                                                                                                                                                <binary_operation operator="*">
                                                                                                                                                                                                                                                                    <left_operand>
                                                                                                                                                                                                                                                                        <sequence_of_expressions>
                                                                                                                                                                                                                                                                            <binary_operation operator="-">
                                                                                                                                                                                                                                                                                <left_operand>
                                                                                                                                                                                                                                                                                    <binary_operation operator="*">
                                                                                                                                                                                                                                                                                        <left_operand>
                                                                                                                                                                                                                                                                                            <variable name="s"/>
                                                                                                                                                                                                                                                                                        </left_operand>
                                                                                                                                                                                                                                                                                        <right_operand>
                                                                                                                                                                                                                                                                                            <variable name="u"/>
                                                                                                                                                                                                                                                                                        </right_operand>
                                                                                                                                                                                                                                                                                    </binary_operation>
                                                                                                                                                                                                                                                                                </left_operand>
                                                                                                                                                                                                                                                                                <right_operand>
                                                                                                                                                                                                                                                                                    <constant type="real">0.0743424357241784861</constant>
                                                                                                                                                                                                                                                                                </right_operand>
                                                                                                                                                                                                                                                                            </binary_operation>
                                                                                                                                                                                                                                                                        </sequence_of_expressions>
                                                                                                                                                                                                                                                                    </left_operand>
                                                                                                                                                                                                                                                                    <right_operand>
                                                                                                                                                                                                                                                                        <variable name="u"/>
                                                                                                                                                                                                                                                                    </right_operand>
                                                                                                                                                                                                                                                                </binary_operation>
                                                                                                                                                                                                                                                            </left_operand>
                                                                                                                                                                                                                                                            <right_operand>
                                                                                                                                                                                                                                                                <constant type="real">0.105872177941595488</constant>
                                                                                                                                                                                                                                                            </right_operand>
                                                                                                                                                                                                                                                        </binary_operation>
                                                                                                                                                                                                                                                    </sequence_of_expressions>
                                                                                                                                                                                                                                                </left_operand>
                                                                                                                                                                                                                                                <right_operand>
                                                                                                                                                                                                                                                    <variable name="u"/>
                                                                                                                                                                                                                                                </right_operand>
                                                                                                                                                                                                                                            </binary_operation>
                                                                                                                                                                                                                                        </left_operand>
                                                                                                                                                                                                                                        <right_operand>
                                                                                                                                                                                                                                            <constant type="real">0.0147297938331485121</constant>
                                                                                                                                                                                                                                        </right_operand>
                                                                                                                                                                                                                                    </binary_operation>
                                                                                                                                                                                                                                </sequence_of_expressions>
                                                                                                                                                                                                                            </left_operand>
                                                                                                                                                                                                                            <right_operand>
                                                                                                                                                                                                                                <variable name="u"/>
                                                                                                                                                                                                                            </right_operand>
                                                                                                                                                                                                                        </binary_operation>
                                                                                                                                                                                                                    </left_operand>
                                                                                                                                                                                                                    <right_operand>
                                                                                                                                                                                                                        <constant type="real">0.316847638520135944</constant>
                                                                                                                                                                                                                    </right_operand>
                                                                                                                                                                                                                </binary_operation>
                                                                                                                                                                                                            </sequence_of_expressions>
                                                                                                                                                                                                        </left_operand>
                                                                                                                                                                                                        <right_operand>
                                                                                                                                                                                                            <variable name="u"/>
                                                                                                                                                                                                        </right_operand>
                                                                                                                                                                                                    </binary_operation>
                                                                                                                                                                                                </left_operand>
                                                                                                                                                                                                <right_operand>
                                                                                                                                                                                                    <constant type="real">0.713657635868730364</constant>
                                                                                                                                                                                                </right_operand>
                                                                                                                                                                                            </binary_operation>
                                                                                                                                                                                        </sequence_of_expressions>
                                                                                                                                                                                    </left_operand>
                                                                                                                                                                                    <right_operand>
                                                                                                                                                                                        <variable name="u"/>
                                                                                                                                                                                    </right_operand>
                                                                                                                                                                                </binary_operation>
                                                                                                                                                                            </left_operand>
                                                                                                                                                                            <right_operand>
                                                                                                                                                                                <constant type="real">1.05375024970847138</constant>
                                                                                                                                                                            </right_operand>
                                                                                                                                                                        </binary_operation>
                                                                                                                                                                    </sequence_of_expressions>
                                                                                                                                                                </left_operand>
                                                                                                                                                                <right_operand>
                                                                                                                                                                    <variable name="u"/>
                                                                                                                                                                </right_operand>
                                                                                                                                                            </binary_operation>
                                                                                                                                                        </left_operand>
                                                                                                                                                        <right_operand>
                                                                                                                                                            <constant type="real">1.21448730779995237</constant>
                                                                                                                                                        </right_operand>
                                                                                                                                                    </binary_operation>
                                                                                                                                                </sequence_of_expressions>
                                                                                                                                            </left_operand>
                                                                                                                                            <right_operand>
                                                                                                                                                <variable name="u"/>
                                                                                                                                            </right_operand>
                                                                                                                                        </binary_operation>
                                                                                                                                    </left_operand>
                                                                                                                                    <right_operand>
                                                                                                                                        <constant type="real">1.16374581931560831</constant>
                                                                                                                                    </right_operand>
                                                                                                                                </binary_operation>
                                                                                                                            </sequence_of_expressions>
                                                                                                                        </left_operand>
                                                                                                                        <right_operand>
                                                                                                                            <variable name="u"/>
                                                                                                                        </right_operand>
                                                                                                                    </binary_operation>
                                                                                                                </left_operand>
                                                                                                                <right_operand>
                                                                                                                    <constant type="real">0.956464974744799006</constant>
                                                                                                                </right_operand>
                                                                                                            </binary_operation>
                                                                                                        </sequence_of_expressions>
                                                                                                    </left_operand>
                                                                                                    <right_operand>
                                                                                                        <variable name="u"/>
                                                                                                    </right_operand>
                                                                                                </binary_operation>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <constant type="real">0.686265948274097816</constant>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </sequence_of_expressions>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <variable name="u"/>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <constant type="real">0.434397492331430115</constant>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="u"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">0.244044510593190935</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="t"/>
                                        </right_operand>
                                    </binary_operation>
                                </left_operand>
                                <right_operand>
                                    <binary_operation operator="*">
                                        <left_operand>
                                            <variable name="z"/>
                                        </left_operand>
                                        <right_operand>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="power" super="false">
                                                    <receiver>
                                                        <constant type="real">2.718281828459045</constant>
                                                    </receiver>
                                                    <argument>
                                                        <binary_operation operator="-">
                                                            <left_operand>
                                                                <binary_operation operator="*">
                                                                    <left_operand>
                                                                        <variable name="x"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="x"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="real">0.120782237635245222</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </argument>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </right_operand>
                                    </binary_operation>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="x">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="x"/>
                                </left_operand>
                                <right_operand>
                                    <binary_operation operator="*">
                                        <left_operand>
                                            <variable name="s"/>
                                        </left_operand>
                                        <right_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="*">
                                                            <left_operand>
                                                                <variable name="x"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="s"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">1.0</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </right_operand>
                                    </binary_operation>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <return>
                            <variable name="x"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="getCurrentLength" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <return>
                        <variable name="CurrentLength"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="printHeading" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="Accuracy"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <constant type="string">"Statistics for Long Run Sample Average"</constant>
                            </return>
                        </then>
                        <else>
                            <return>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <constant type="string">"Statistics for Long Run Sample Average with Accuracy "</constant>
                                    </receiver>
                                    <argument>
                                        <data_method_call method_name="printString" super="false">
                                            <receiver>
                                                <variable name="Accuracy"/>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                </data_method_call>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="LongRunSampleVariance" native="false">
            <super_class>PerformanceMonitor</super_class>
            <instance_variable name="AverageReward" type="LongRunSampleAverage"/>
            <instance_variable name="AverageSquaredReward" type="LongRunSampleAverage"/>
            <data_method name="withParameters" native="false">
                <return_type>LongRunSampleVariance</return_type>
                <argument name="A" type="Object"/>
                <argument name="CL" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="A"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Real"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Accuracy parameter for Long Run Sample Variance must be a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="CL"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="CL"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Real"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Confidence Level parameter for Long Run Sample Variance must be a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">1.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Accuracy parameter for Long Run Sample Variance must be within the interval (0.0, 1.0)"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="CL"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;=">
                                                <left_operand>
                                                    <variable name="CL"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">1.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"ConfidenceLevel parameter for Long Run Sample Variance must be within the interval [0.0, 1.0)"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Accuracy">
                            <variable name="A"/>
                        </assignment>
                        <assignment variable_name="ConfidenceLevel">
                            <variable name="CL"/>
                        </assignment>
                        <assignment variable_name="AverageReward">
                            <data_method_call method_name="withConfidenceLevel" super="false">
                                <receiver>
                                    <new data_class="LongRunSampleAverage"/>
                                </receiver>
                                <argument>
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="ConfidenceLevel"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">1.0</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="real">2.0</constant>
                                        </right_operand>
                                    </binary_operation>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="AverageSquaredReward">
                            <data_method_call method_name="withConfidenceLevel" super="false">
                                <receiver>
                                    <new data_class="LongRunSampleAverage"/>
                                </receiver>
                                <argument>
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="ConfidenceLevel"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">1.0</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="real">2.0</constant>
                                        </right_operand>
                                    </binary_operation>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="IntervalEstimation">
                            <binary_operation operator="-">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <data_method_call method_name="getIntervalEstimation" super="false">
                                            <receiver>
                                                <variable name="AverageSquaredReward"/>
                                            </receiver>
                                        </data_method_call>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <sequence_of_expressions>
                                        <data_method_call method_name="sqr" super="false">
                                            <receiver>
                                                <sequence_of_expressions>
                                                    <data_method_call method_name="getIntervalEstimation" super="false">
                                                        <receiver>
                                                            <variable name="AverageReward"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </sequence_of_expressions>
                                            </receiver>
                                        </data_method_call>
                                    </sequence_of_expressions>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <data_method_call method_name="setDefaultBatchSize" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <assignment variable_name="Complete">
                            <constant type="boolean">false</constant>
                        </assignment>
                        <data_method_call method_name="register" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="setBatchSize" native="false">
                <return_type>LongRunSampleVariance</return_type>
                <argument name="M" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="M"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="M"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"BatchSize for Long Run Sample Variance must be an Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="M"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="BatchSize">
                                        <variable name="M"/>
                                    </assignment>
                                    <data_method_call method_name="setBatchSize" super="false">
                                        <receiver>
                                            <variable name="AverageReward"/>
                                        </receiver>
                                        <argument>
                                            <variable name="BatchSize"/>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setBatchSize" super="false">
                                        <receiver>
                                            <variable name="AverageSquaredReward"/>
                                        </receiver>
                                        <argument>
                                            <variable name="BatchSize"/>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"BatchSize parameter for Long Run Sample Variance must be larger than 0"</constant>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="logTo" native="false">
                <return_type>LongRunSampleVariance</return_type>
                <argument name="Name" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="identifyWith" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="Name"/>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="LogFile">
                            <data_method_call method_name="open" super="false">
                                <receiver>
                                    <data_method_call method_name="destination" super="false">
                                        <receiver>
                                            <new data_class="FileOut"/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <variable name="Name"/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">".log"</constant>
                                                </argument>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                            <argument>
                                <data_method_call method_name="cr" super="false">
                                    <receiver>
                                        <data_method_call method_name="lf" super="false">
                                            <receiver>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="concat" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="concat" super="false">
                                                                    <receiver>
                                                                        <constant type="string">"Statistics for the Long Run Sample Variance "</constant>
                                                                    </receiver>
                                                                    <argument>
                                                                        <variable name="Name"/>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">" with Accuracy "</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="Accuracy"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                            <argument>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <data_method_call method_name="logHeading" super="false">
                                            <receiver>
                                                <variable name="IntervalEstimation"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"\t\tAccurate:\n"</constant>
                                    </argument>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                            <argument>
                                <constant type="string">"-------------------------------------------------------------------------------------------------------------------------\n"</constant>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="close" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="rewardRC" native="false">
                <return_type>LongRunSampleVariance</return_type>
                <argument name="Reward" type="Object"/>
                <argument name="RecurrenceCondition" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="Reward"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="Reward"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="Reward"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Reward for Long Run Sample Variance must be an Integer or Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="Reward"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="Reward">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="Reward"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <data_method_call method_name="rewardRC" super="false">
                            <receiver>
                                <variable name="AverageReward"/>
                            </receiver>
                            <argument>
                                <variable name="Reward"/>
                            </argument>
                            <argument>
                                <variable name="RecurrenceCondition"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="rewardRC" super="false">
                            <receiver>
                                <variable name="AverageSquaredReward"/>
                            </receiver>
                            <argument>
                                <binary_operation operator="*">
                                    <left_operand>
                                        <variable name="Reward"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Reward"/>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                            <argument>
                                <variable name="RecurrenceCondition"/>
                            </argument>
                        </data_method_call>
                        <if>
                            <condition>
                                <variable name="RecurrenceCondition"/>
                            </condition>
                            <then>
                                <assignment variable_name="IntervalEstimation">
                                    <binary_operation operator="-">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="getIntervalEstimation" super="false">
                                                    <receiver>
                                                        <variable name="AverageSquaredReward"/>
                                                    </receiver>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="sqr" super="false">
                                                    <receiver>
                                                        <sequence_of_expressions>
                                                            <data_method_call method_name="getIntervalEstimation" super="false">
                                                                <receiver>
                                                                    <variable name="AverageReward"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </sequence_of_expressions>
                                                    </receiver>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="rewardBM" native="false">
                <return_type>LongRunSampleVariance</return_type>
                <argument name="Reward" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="rewardRC" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="Reward"/>
                            </argument>
                            <argument>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="getCurrentLength" super="false">
                                                        <receiver>
                                                            <variable name="AverageReward"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="getCurrentLength" super="false">
                                                        <receiver>
                                                            <variable name="AverageReward"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="BatchSize"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printHeading" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="concat" super="false">
                            <receiver>
                                <constant type="string">"Statistics for Long Run Sample Variance with Accuracy "</constant>
                            </receiver>
                            <argument>
                                <data_method_call method_name="printString" super="false">
                                    <receiver>
                                        <variable name="Accuracy"/>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="LongRunTimeAverage" native="false">
            <super_class>PerformanceMonitor</super_class>
            <instance_variable name="AverageRewardTimeProduct" type="LongRunSampleAverage"/>
            <instance_variable name="AverageTime" type="LongRunSampleAverage"/>
            <instance_variable name="PreviousReward" type="Real"/>
            <instance_variable name="LastTime" type="Real"/>
            <data_method name="withParameters" native="false">
                <return_type>LongRunTimeAverage</return_type>
                <argument name="A" type="Real"/>
                <argument name="CL" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="A"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Real"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Accuracy parameter for Long Run Time Average must be a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="CL"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="CL"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Real"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Confidence Level parameter for Long Run Time Average must be a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">1.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Accuracy parameter for Long Run Time Average must be within the interval (0.0, 1.0)"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="CL"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;=">
                                                <left_operand>
                                                    <variable name="CL"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">1.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Confidence Level parameter for Long Run Time Average must be within the interval [0.0, 1.0)"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Accuracy">
                            <variable name="A"/>
                        </assignment>
                        <assignment variable_name="Complete">
                            <constant type="boolean">false</constant>
                        </assignment>
                        <data_method_call method_name="withConfidenceLevel" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="CL"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="register" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="setBatchSize" native="false">
                <return_type>LongRunTimeAverage</return_type>
                <argument name="M" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="M"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="M"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"BatchSize for Long Run Time Average must be an Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="M"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="BatchSize">
                                        <variable name="M"/>
                                    </assignment>
                                    <data_method_call method_name="setBatchSize" super="false">
                                        <receiver>
                                            <variable name="AverageRewardTimeProduct"/>
                                        </receiver>
                                        <argument>
                                            <variable name="BatchSize"/>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setBatchSize" super="false">
                                        <receiver>
                                            <variable name="AverageTime"/>
                                        </receiver>
                                        <argument>
                                            <variable name="BatchSize"/>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"BatchSize parameter for Long Run Time Average must be larger than 0"</constant>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="logTo" native="false">
                <return_type>LongRunTimeAverage</return_type>
                <argument name="Name" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="identifyWith" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="Name"/>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="LogFile">
                            <data_method_call method_name="open" super="false">
                                <receiver>
                                    <data_method_call method_name="destination" super="false">
                                        <receiver>
                                            <new data_class="FileOut"/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <variable name="Name"/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">".log"</constant>
                                                </argument>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                            <argument>
                                <data_method_call method_name="cr" super="false">
                                    <receiver>
                                        <data_method_call method_name="lf" super="false">
                                            <receiver>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="concat" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="concat" super="false">
                                                                    <receiver>
                                                                        <constant type="string">"Statistics for the Long Run Time Average "</constant>
                                                                    </receiver>
                                                                    <argument>
                                                                        <variable name="Name"/>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">" with Accuracy "</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="Accuracy"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                            <argument>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <data_method_call method_name="logHeading" super="false">
                                            <receiver>
                                                <variable name="IntervalEstimation"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"\t\tAccurate:\n"</constant>
                                    </argument>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                            <argument>
                                <constant type="string">"-------------------------------------------------------------------------------------------------------------------------\n"</constant>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="close" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="rewardRC" native="false">
                <return_type>LongRunTimeAverage</return_type>
                <argument name="Reward" type="Object"/>
                <argument name="CurrentTime" type="Real"/>
                <argument name="RecurrenceCondition" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="Reward"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="Reward"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="Reward"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Reward for Long Run Time Average must be an Integer or Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="Reward"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="Reward">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="Reward"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="LastTime"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <data_method_call method_name="rewardRC" super="false">
                                        <receiver>
                                            <variable name="AverageRewardTimeProduct"/>
                                        </receiver>
                                        <argument>
                                            <binary_operation operator="*">
                                                <left_operand>
                                                    <variable name="PreviousReward"/>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="-">
                                                            <left_operand>
                                                                <variable name="CurrentTime"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="LastTime"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                        <argument>
                                            <variable name="RecurrenceCondition"/>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="rewardRC" super="false">
                                        <receiver>
                                            <variable name="AverageTime"/>
                                        </receiver>
                                        <argument>
                                            <binary_operation operator="-">
                                                <left_operand>
                                                    <variable name="CurrentTime"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="LastTime"/>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                        <argument>
                                            <variable name="RecurrenceCondition"/>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <assignment variable_name="PreviousReward">
                            <variable name="Reward"/>
                        </assignment>
                        <assignment variable_name="LastTime">
                            <variable name="CurrentTime"/>
                        </assignment>
                        <if>
                            <condition>
                                <variable name="RecurrenceCondition"/>
                            </condition>
                            <then>
                                <assignment variable_name="IntervalEstimation">
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="getIntervalEstimation" super="false">
                                                    <receiver>
                                                        <variable name="AverageRewardTimeProduct"/>
                                                    </receiver>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="getIntervalEstimation" super="false">
                                                    <receiver>
                                                        <variable name="AverageTime"/>
                                                    </receiver>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="rewardBM" native="false">
                <return_type>LongRunTimeAverage</return_type>
                <argument name="Reward" type="Object"/>
                <argument name="CurrentTime" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="rewardRC" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="Reward"/>
                            </argument>
                            <argument>
                                <variable name="CurrentTime"/>
                            </argument>
                            <argument>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="getCurrentLength" super="false">
                                                        <receiver>
                                                            <variable name="AverageRewardTimeProduct"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="getCurrentLength" super="false">
                                                        <receiver>
                                                            <variable name="AverageRewardTimeProduct"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="BatchSize"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="withConfidenceLevel" native="false">
                <return_type>LongRunTimeAverage</return_type>
                <argument name="CL" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="ConfidenceLevel">
                            <variable name="CL"/>
                        </assignment>
                        <assignment variable_name="AverageRewardTimeProduct">
                            <data_method_call method_name="withConfidenceLevel" super="false">
                                <receiver>
                                    <new data_class="LongRunSampleAverage"/>
                                </receiver>
                                <argument>
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="ConfidenceLevel"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">1.0</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="real">2.0</constant>
                                        </right_operand>
                                    </binary_operation>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="AverageTime">
                            <data_method_call method_name="withConfidenceLevel" super="false">
                                <receiver>
                                    <new data_class="LongRunSampleAverage"/>
                                </receiver>
                                <argument>
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="ConfidenceLevel"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">1.0</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="real">2.0</constant>
                                        </right_operand>
                                    </binary_operation>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="IntervalEstimation">
                            <binary_operation operator="/">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <data_method_call method_name="getIntervalEstimation" super="false">
                                            <receiver>
                                                <variable name="AverageRewardTimeProduct"/>
                                            </receiver>
                                        </data_method_call>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <sequence_of_expressions>
                                        <data_method_call method_name="getIntervalEstimation" super="false">
                                            <receiver>
                                                <variable name="AverageTime"/>
                                            </receiver>
                                        </data_method_call>
                                    </sequence_of_expressions>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <data_method_call method_name="setDefaultBatchSize" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="getCurrentLength" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="getCurrentLength" super="false">
                            <receiver>
                                <variable name="AverageRewardTimeProduct"/>
                            </receiver>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="printHeading" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="Accuracy"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <constant type="string">"Statistics for Long Run Time Average"</constant>
                            </return>
                        </then>
                        <else>
                            <return>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <constant type="string">"Statistics for Long Run Time Average with Accuracy "</constant>
                                    </receiver>
                                    <argument>
                                        <data_method_call method_name="printString" super="false">
                                            <receiver>
                                                <variable name="Accuracy"/>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                </data_method_call>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="LongRunTimeVariance" native="false">
            <super_class>PerformanceMonitor</super_class>
            <instance_variable name="AverageReward" type="LongRunTimeAverage"/>
            <instance_variable name="AverageSquaredReward" type="LongRunTimeAverage"/>
            <data_method name="withParameters" native="false">
                <return_type>LongRunTimeVariance</return_type>
                <argument name="A" type="Real"/>
                <argument name="CL" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="A"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Real"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Accuracy parameter for Long Run Time Variance must be a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="CL"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="CL"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Real"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Confidence Level parameter for Long Run Time Variance must be a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">1.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Accuracy parameter for Long Run Time Variance must within the interval (0.0, 1.0)"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="CL"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;=">
                                                <left_operand>
                                                    <variable name="CL"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">1.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Confidence Level parameter for Long Run Time Variance must be within the interval [0.0, 1.0)"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Accuracy">
                            <variable name="A"/>
                        </assignment>
                        <assignment variable_name="ConfidenceLevel">
                            <variable name="CL"/>
                        </assignment>
                        <assignment variable_name="Complete">
                            <constant type="boolean">false</constant>
                        </assignment>
                        <assignment variable_name="AverageReward">
                            <data_method_call method_name="withConfidenceLevel" super="false">
                                <receiver>
                                    <new data_class="LongRunTimeAverage"/>
                                </receiver>
                                <argument>
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="ConfidenceLevel"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">1.0</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="real">2.0</constant>
                                        </right_operand>
                                    </binary_operation>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="AverageSquaredReward">
                            <data_method_call method_name="withConfidenceLevel" super="false">
                                <receiver>
                                    <new data_class="LongRunTimeAverage"/>
                                </receiver>
                                <argument>
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="ConfidenceLevel"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">1.0</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="real">2.0</constant>
                                        </right_operand>
                                    </binary_operation>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="IntervalEstimation">
                            <binary_operation operator="-">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <data_method_call method_name="getIntervalEstimation" super="false">
                                            <receiver>
                                                <variable name="AverageSquaredReward"/>
                                            </receiver>
                                        </data_method_call>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <sequence_of_expressions>
                                        <data_method_call method_name="sqr" super="false">
                                            <receiver>
                                                <sequence_of_expressions>
                                                    <data_method_call method_name="getIntervalEstimation" super="false">
                                                        <receiver>
                                                            <variable name="AverageReward"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </sequence_of_expressions>
                                            </receiver>
                                        </data_method_call>
                                    </sequence_of_expressions>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <data_method_call method_name="setDefaultBatchSize" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <data_method_call method_name="register" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="setBatchSize" native="false">
                <return_type>LongRunTimeVariance</return_type>
                <argument name="M" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="M"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="M"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"BatchSize parameter for Long Run Time Variance must be an Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="M"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="BatchSize">
                                        <variable name="M"/>
                                    </assignment>
                                    <data_method_call method_name="setBatchSize" super="false">
                                        <receiver>
                                            <variable name="AverageReward"/>
                                        </receiver>
                                        <argument>
                                            <variable name="BatchSize"/>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setBatchSize" super="false">
                                        <receiver>
                                            <variable name="AverageSquaredReward"/>
                                        </receiver>
                                        <argument>
                                            <variable name="BatchSize"/>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"BatchSize parameter for Long Run Time Variance must be larger than 0"</constant>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="logTo" native="false">
                <return_type>LongRunTimeVariance</return_type>
                <argument name="Name" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="identifyWith" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="Name"/>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="LogFile">
                            <data_method_call method_name="open" super="false">
                                <receiver>
                                    <data_method_call method_name="destination" super="false">
                                        <receiver>
                                            <new data_class="FileOut"/>
                                        </receiver>
                                        <argument>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <variable name="Name"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="string">".log"</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                            <argument>
                                <data_method_call method_name="cr" super="false">
                                    <receiver>
                                        <data_method_call method_name="lf" super="false">
                                            <receiver>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="concat" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="concat" super="false">
                                                                    <receiver>
                                                                        <constant type="string">"Statistics for the Long Run Time Variance "</constant>
                                                                    </receiver>
                                                                    <argument>
                                                                        <variable name="Name"/>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">" with Accuracy "</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="Accuracy"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                            <argument>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <data_method_call method_name="logHeading" super="false">
                                            <receiver>
                                                <variable name="IntervalEstimation"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"\t\tAccurate:\n"</constant>
                                    </argument>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                            <argument>
                                <constant type="string">"-------------------------------------------------------------------------------------------------------------------------\n"</constant>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="close" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="rewardRC" native="false">
                <return_type>LongRunTimeVariance</return_type>
                <argument name="Reward" type="Object"/>
                <argument name="CurrentTime" type="Real"/>
                <argument name="RecurrenceCondition" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="Reward"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="Reward"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="Reward"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Reward for Long Run Time Variance must be an Integer or Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="Reward"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="Reward">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="Reward"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <data_method_call method_name="rewardRC" super="false">
                            <receiver>
                                <variable name="AverageReward"/>
                            </receiver>
                            <argument>
                                <variable name="Reward"/>
                            </argument>
                            <argument>
                                <variable name="CurrentTime"/>
                            </argument>
                            <argument>
                                <variable name="RecurrenceCondition"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="rewardRC" super="false">
                            <receiver>
                                <variable name="AverageSquaredReward"/>
                            </receiver>
                            <argument>
                                <binary_operation operator="*">
                                    <left_operand>
                                        <variable name="Reward"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Reward"/>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                            <argument>
                                <variable name="CurrentTime"/>
                            </argument>
                            <argument>
                                <variable name="RecurrenceCondition"/>
                            </argument>
                        </data_method_call>
                        <if>
                            <condition>
                                <variable name="RecurrenceCondition"/>
                            </condition>
                            <then>
                                <assignment variable_name="IntervalEstimation">
                                    <binary_operation operator="-">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="getIntervalEstimation" super="false">
                                                    <receiver>
                                                        <variable name="AverageSquaredReward"/>
                                                    </receiver>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="sqr" super="false">
                                                    <receiver>
                                                        <sequence_of_expressions>
                                                            <data_method_call method_name="getIntervalEstimation" super="false">
                                                                <receiver>
                                                                    <variable name="AverageReward"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </sequence_of_expressions>
                                                    </receiver>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="rewardBM" native="false">
                <return_type>LongRunTimeVariance</return_type>
                <argument name="Reward" type="Object"/>
                <argument name="CurrentTime" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="rewardRC" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="Reward"/>
                            </argument>
                            <argument>
                                <variable name="CurrentTime"/>
                            </argument>
                            <argument>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="getCurrentLength" super="false">
                                                        <receiver>
                                                            <variable name="AverageReward"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="getCurrentLength" super="false">
                                                        <receiver>
                                                            <variable name="AverageReward"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="BatchSize"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printHeading" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="concat" super="false">
                            <receiver>
                                <constant type="string">"Statistics for Long Run Time Variance with Accuracy "</constant>
                            </receiver>
                            <argument>
                                <data_method_call method_name="printString" super="false">
                                    <receiver>
                                        <variable name="Accuracy"/>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="LongRunRateAverage" native="false">
            <super_class>PerformanceMonitor</super_class>
            <instance_variable name="AverageReward" type="LongRunSampleAverage"/>
            <instance_variable name="AverageTime" type="LongRunSampleAverage"/>
            <instance_variable name="LastTime" type="Real"/>
            <data_method name="withParameters" native="false">
                <return_type>LongRunRateAverage</return_type>
                <argument name="A" type="Real"/>
                <argument name="CL" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="A"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Real"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Accuracy parameter for Long Run Rate Average must be a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="CL"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="CL"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Real"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Confidence Level parameter for Long Run Rate Average must be a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">1.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Accuracy parameter for Long Run Rate Average must be within the interval (0.0, 1.0)"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="CL"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;=">
                                                <left_operand>
                                                    <variable name="CL"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">1.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"ConfidenceLevel parameter for Long Run Rate Average must be within the interval [0.0, 1.0)"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Accuracy">
                            <variable name="A"/>
                        </assignment>
                        <assignment variable_name="Complete">
                            <constant type="boolean">false</constant>
                        </assignment>
                        <data_method_call method_name="withConfidenceLevel" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="CL"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="register" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="setBatchSize" native="false">
                <return_type>LongRunRateAverage</return_type>
                <argument name="M" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="M"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="M"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"BatchSize parameter for Long Run Rate Average must be an Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="M"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="BatchSize">
                                        <variable name="M"/>
                                    </assignment>
                                    <data_method_call method_name="setBatchSize" super="false">
                                        <receiver>
                                            <variable name="AverageReward"/>
                                        </receiver>
                                        <argument>
                                            <variable name="BatchSize"/>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setBatchSize" super="false">
                                        <receiver>
                                            <variable name="AverageTime"/>
                                        </receiver>
                                        <argument>
                                            <variable name="BatchSize"/>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"BatchSize parameter for Long Run Rate Average must be larger than 0"</constant>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="logTo" native="false">
                <return_type>LongRunRateAverage</return_type>
                <argument name="Name" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="identifyWith" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="Name"/>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="LogFile">
                            <data_method_call method_name="open" super="false">
                                <receiver>
                                    <data_method_call method_name="destination" super="false">
                                        <receiver>
                                            <new data_class="FileOut"/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <variable name="Name"/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">".log"</constant>
                                                </argument>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                            <argument>
                                <data_method_call method_name="cr" super="false">
                                    <receiver>
                                        <data_method_call method_name="lf" super="false">
                                            <receiver>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="concat" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="concat" super="false">
                                                                    <receiver>
                                                                        <constant type="string">"Statistics for the Long Run Rate Average "</constant>
                                                                    </receiver>
                                                                    <argument>
                                                                        <variable name="Name"/>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">" with Accuracy "</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="Accuracy"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                            <argument>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <data_method_call method_name="logHeading" super="false">
                                            <receiver>
                                                <variable name="IntervalEstimation"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"\t\tAccurate:\n"</constant>
                                    </argument>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                            <argument>
                                <constant type="string">"-------------------------------------------------------------------------------------------------------------------------\n"</constant>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="close" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="rewardRC" native="false">
                <return_type>LongRunRateAverage</return_type>
                <argument name="Reward" type="Object"/>
                <argument name="CurrentTime" type="Real"/>
                <argument name="RecurrenceCondition" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="Reward"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="Reward"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="Reward"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Reward for Long Run Rate Average must be an Integer or Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="Reward"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="Reward">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="Reward"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="LastTime"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <data_method_call method_name="rewardRC" super="false">
                                        <receiver>
                                            <variable name="AverageReward"/>
                                        </receiver>
                                        <argument>
                                            <variable name="Reward"/>
                                        </argument>
                                        <argument>
                                            <variable name="RecurrenceCondition"/>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="rewardRC" super="false">
                                        <receiver>
                                            <variable name="AverageTime"/>
                                        </receiver>
                                        <argument>
                                            <binary_operation operator="-">
                                                <left_operand>
                                                    <variable name="CurrentTime"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="LastTime"/>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                        <argument>
                                            <variable name="RecurrenceCondition"/>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <assignment variable_name="LastTime">
                            <variable name="CurrentTime"/>
                        </assignment>
                        <if>
                            <condition>
                                <variable name="RecurrenceCondition"/>
                            </condition>
                            <then>
                                <assignment variable_name="IntervalEstimation">
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="getIntervalEstimation" super="false">
                                                    <receiver>
                                                        <variable name="AverageReward"/>
                                                    </receiver>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="getIntervalEstimation" super="false">
                                                    <receiver>
                                                        <variable name="AverageTime"/>
                                                    </receiver>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="rewardBM" native="false">
                <return_type>LongRunRateAverage</return_type>
                <argument name="Reward" type="Object"/>
                <argument name="CurrentTime" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="rewardRC" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="Reward"/>
                            </argument>
                            <argument>
                                <variable name="CurrentTime"/>
                            </argument>
                            <argument>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="getCurrentLength" super="false">
                                                        <receiver>
                                                            <variable name="AverageReward"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="getCurrentLength" super="false">
                                                        <receiver>
                                                            <variable name="AverageReward"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="BatchSize"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="withConfidenceLevel" native="false">
                <return_type>LongRunRateAverage</return_type>
                <argument name="CL" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="ConfidenceLevel">
                            <variable name="CL"/>
                        </assignment>
                        <assignment variable_name="AverageReward">
                            <data_method_call method_name="withConfidenceLevel" super="false">
                                <receiver>
                                    <new data_class="LongRunSampleAverage"/>
                                </receiver>
                                <argument>
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="ConfidenceLevel"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">1.0</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="real">2.0</constant>
                                        </right_operand>
                                    </binary_operation>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="AverageTime">
                            <data_method_call method_name="withConfidenceLevel" super="false">
                                <receiver>
                                    <new data_class="LongRunSampleAverage"/>
                                </receiver>
                                <argument>
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="ConfidenceLevel"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">1.0</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="real">2.0</constant>
                                        </right_operand>
                                    </binary_operation>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="IntervalEstimation">
                            <binary_operation operator="/">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <data_method_call method_name="getIntervalEstimation" super="false">
                                            <receiver>
                                                <variable name="AverageReward"/>
                                            </receiver>
                                        </data_method_call>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <sequence_of_expressions>
                                        <data_method_call method_name="getIntervalEstimation" super="false">
                                            <receiver>
                                                <variable name="AverageTime"/>
                                            </receiver>
                                        </data_method_call>
                                    </sequence_of_expressions>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <data_method_call method_name="setDefaultBatchSize" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printHeading" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="concat" super="false">
                            <receiver>
                                <constant type="string">"Statistics for Long Run Rate Average with Accuracy "</constant>
                            </receiver>
                            <argument>
                                <data_method_call method_name="printString" super="false">
                                    <receiver>
                                        <variable name="Accuracy"/>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="ConfidenceInterval" native="false">
            <super_class>Object</super_class>
            <instance_variable name="LowerBound" type="Real"/>
            <instance_variable name="UpperBound" type="Real"/>
            <instance_variable name="ConfidenceLevel" type="Real"/>
            <data_method name="negate" native="false">
                <return_type>ConfidenceInterval</return_type>
                <local_variable name="Lower" type="Real"/>
                <local_variable name="Upper" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Lower">
                            <data_method_call method_name="extendedNegate" super="false">
                                <receiver>
                                    <self/>
                                </receiver>
                                <argument>
                                    <variable name="UpperBound"/>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="Upper">
                            <data_method_call method_name="extendedNegate" super="false">
                                <receiver>
                                    <self/>
                                </receiver>
                                <argument>
                                    <variable name="LowerBound"/>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <return>
                            <data_method_call method_name="withParameters" super="false">
                                <receiver>
                                    <new data_class="ConfidenceInterval"/>
                                </receiver>
                                <argument>
                                    <variable name="Lower"/>
                                </argument>
                                <argument>
                                    <variable name="Upper"/>
                                </argument>
                                <argument>
                                    <variable name="ConfidenceLevel"/>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="reciprocal" native="false">
                <return_type>ConfidenceInterval</return_type>
                <local_variable name="Lower" type="Real"/>
                <local_variable name="Upper" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="extendedLowerLessZero" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="extendedUpperGreaterZero" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="Lower">
                                        <nil/>
                                    </assignment>
                                    <assignment variable_name="Upper">
                                        <nil/>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <sequence_of_expressions>
                                    <assignment variable_name="Lower">
                                        <data_method_call method_name="extendedReciprocal" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                            <argument>
                                                <variable name="UpperBound"/>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                    <assignment variable_name="Upper">
                                        <data_method_call method_name="extendedReciprocal" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                            <argument>
                                                <variable name="LowerBound"/>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </else>
                        </if>
                        <return>
                            <data_method_call method_name="withParameters" super="false">
                                <receiver>
                                    <new data_class="ConfidenceInterval"/>
                                </receiver>
                                <argument>
                                    <variable name="Lower"/>
                                </argument>
                                <argument>
                                    <variable name="Upper"/>
                                </argument>
                                <argument>
                                    <variable name="ConfidenceLevel"/>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="sqr" native="false">
                <return_type>ConfidenceInterval</return_type>
                <local_variable name="Lower" type="Real"/>
                <local_variable name="Upper" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <data_method_call method_name="extendedLowerGreaterEqualZero" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="Lower">
                                        <data_method_call method_name="extendedTimes" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                            <argument>
                                                <variable name="LowerBound"/>
                                            </argument>
                                            <argument>
                                                <variable name="LowerBound"/>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                    <assignment variable_name="Upper">
                                        <data_method_call method_name="extendedTimes" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                            <argument>
                                                <variable name="UpperBound"/>
                                            </argument>
                                            <argument>
                                                <variable name="UpperBound"/>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <if>
                                    <condition>
                                        <data_method_call method_name="extendedUpperLessZero" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                        </data_method_call>
                                    </condition>
                                    <then>
                                        <sequence_of_expressions>
                                            <assignment variable_name="Lower">
                                                <data_method_call method_name="extendedTimes" super="false">
                                                    <receiver>
                                                        <self/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="UpperBound"/>
                                                    </argument>
                                                    <argument>
                                                        <variable name="UpperBound"/>
                                                    </argument>
                                                </data_method_call>
                                            </assignment>
                                            <assignment variable_name="Upper">
                                                <data_method_call method_name="extendedTimes" super="false">
                                                    <receiver>
                                                        <self/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="LowerBound"/>
                                                    </argument>
                                                    <argument>
                                                        <variable name="LowerBound"/>
                                                    </argument>
                                                </data_method_call>
                                            </assignment>
                                        </sequence_of_expressions>
                                    </then>
                                    <else>
                                        <sequence_of_expressions>
                                            <assignment variable_name="Lower">
                                                <constant type="real">0.0</constant>
                                            </assignment>
                                            <assignment variable_name="Upper">
                                                <data_method_call method_name="extendedMax" super="false">
                                                    <receiver>
                                                        <self/>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="extendedTimes" super="false">
                                                            <receiver>
                                                                <self/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="LowerBound"/>
                                                            </argument>
                                                            <argument>
                                                                <variable name="LowerBound"/>
                                                            </argument>
                                                        </data_method_call>
                                                    </argument>
                                                    <argument>
                                                        <data_method_call method_name="extendedTimes" super="false">
                                                            <receiver>
                                                                <self/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="UpperBound"/>
                                                            </argument>
                                                            <argument>
                                                                <variable name="UpperBound"/>
                                                            </argument>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </assignment>
                                        </sequence_of_expressions>
                                    </else>
                                </if>
                            </else>
                        </if>
                        <return>
                            <data_method_call method_name="withParameters" super="false">
                                <receiver>
                                    <new data_class="ConfidenceInterval"/>
                                </receiver>
                                <argument>
                                    <variable name="Lower"/>
                                </argument>
                                <argument>
                                    <variable name="Upper"/>
                                </argument>
                                <argument>
                                    <variable name="ConfidenceLevel"/>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="extendedPlus" native="false">
                <return_type>Real</return_type>
                <argument name="x" type="Real"/>
                <argument name="y" type="Real"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="|">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="x"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="y"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <nil/>
                            </return>
                        </then>
                        <else>
                            <return>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <variable name="x"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="y"/>
                                    </right_operand>
                                </binary_operation>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="extendedNegate" native="false">
                <return_type>Real</return_type>
                <argument name="x" type="Real"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="x"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <nil/>
                            </return>
                        </then>
                        <else>
                            <return>
                                <unary_operation operator="-">
                                    <operand>
                                        <variable name="x"/>
                                    </operand>
                                </unary_operation>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="extendedTimes" native="false">
                <return_type>Real</return_type>
                <argument name="x" type="Real"/>
                <argument name="y" type="Real"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="|">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="x"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="y"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <nil/>
                            </return>
                        </then>
                        <else>
                            <return>
                                <binary_operation operator="*">
                                    <left_operand>
                                        <variable name="x"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="y"/>
                                    </right_operand>
                                </binary_operation>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="extendedReciprocal" native="false">
                <return_type>Real</return_type>
                <argument name="x" type="Real"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="x"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <constant type="real">0.0</constant>
                            </return>
                        </then>
                        <else>
                            <if>
                                <condition>
                                    <binary_operation operator="=">
                                        <left_operand>
                                            <variable name="x"/>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="real">0.0</constant>
                                        </right_operand>
                                    </binary_operation>
                                </condition>
                                <then>
                                    <return>
                                        <nil/>
                                    </return>
                                </then>
                                <else>
                                    <return>
                                        <binary_operation operator="/">
                                            <left_operand>
                                                <constant type="real">1.0</constant>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="x"/>
                                            </right_operand>
                                        </binary_operation>
                                    </return>
                                </else>
                            </if>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="extendedMin" native="false">
                <return_type>Real</return_type>
                <argument name="x" type="Real"/>
                <argument name="y" type="Real"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="|">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="x"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="y"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <nil/>
                            </return>
                        </then>
                        <else>
                            <if>
                                <condition>
                                    <binary_operation operator="&lt;">
                                        <left_operand>
                                            <variable name="x"/>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="y"/>
                                        </right_operand>
                                    </binary_operation>
                                </condition>
                                <then>
                                    <return>
                                        <variable name="x"/>
                                    </return>
                                </then>
                                <else>
                                    <return>
                                        <variable name="y"/>
                                    </return>
                                </else>
                            </if>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="extendedMax" native="false">
                <return_type>Real</return_type>
                <argument name="x" type="Real"/>
                <argument name="y" type="Real"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="|">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="x"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="y"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <nil/>
                            </return>
                        </then>
                        <else>
                            <if>
                                <condition>
                                    <binary_operation operator="&gt;">
                                        <left_operand>
                                            <variable name="x"/>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="y"/>
                                        </right_operand>
                                    </binary_operation>
                                </condition>
                                <then>
                                    <return>
                                        <variable name="x"/>
                                    </return>
                                </then>
                                <else>
                                    <return>
                                        <variable name="y"/>
                                    </return>
                                </else>
                            </if>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="extendedLowerLessZero" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="LowerBound"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <constant type="boolean">true</constant>
                            </return>
                        </then>
                        <else>
                            <return>
                                <binary_operation operator="&lt;">
                                    <left_operand>
                                        <variable name="LowerBound"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="real">0.0</constant>
                                    </right_operand>
                                </binary_operation>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="extendedLowerGreaterEqualZero" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="LowerBound"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <constant type="boolean">false</constant>
                            </return>
                        </then>
                        <else>
                            <return>
                                <binary_operation operator="&gt;=">
                                    <left_operand>
                                        <variable name="LowerBound"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="real">0.0</constant>
                                    </right_operand>
                                </binary_operation>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="extendedUpperLessZero" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="UpperBound"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <constant type="boolean">false</constant>
                            </return>
                        </then>
                        <else>
                            <return>
                                <binary_operation operator="&lt;">
                                    <left_operand>
                                        <variable name="UpperBound"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="real">0.0</constant>
                                    </right_operand>
                                </binary_operation>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="extendedUpperGreaterZero" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="UpperBound"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <constant type="boolean">true</constant>
                            </return>
                        </then>
                        <else>
                            <return>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="UpperBound"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="real">0.0</constant>
                                    </right_operand>
                                </binary_operation>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="withParameters" native="false">
                <return_type>ConfidenceInterval</return_type>
                <argument name="Lower" type="Real"/>
                <argument name="Upper" type="Real"/>
                <argument name="Level" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="LowerBound">
                            <variable name="Lower"/>
                        </assignment>
                        <assignment variable_name="UpperBound">
                            <variable name="Upper"/>
                        </assignment>
                        <assignment variable_name="ConfidenceLevel">
                            <variable name="Level"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="getLowerBound" native="false">
                <return_type>Real</return_type>
                <body_expression>
                    <return>
                        <variable name="LowerBound"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="getUpperBound" native="false">
                <return_type>Real</return_type>
                <body_expression>
                    <return>
                        <variable name="UpperBound"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="getConfidenceLevel" native="false">
                <return_type>Real</return_type>
                <body_expression>
                    <return>
                        <variable name="ConfidenceLevel"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="getRelativeError" native="false">
                <return_type>Real</return_type>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="|">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="LowerBound"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="UpperBound"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <nil/>
                            </return>
                        </then>
                        <else>
                            <if>
                                <condition>
                                    <binary_operation operator="&gt;">
                                        <left_operand>
                                            <variable name="LowerBound"/>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="real">0.0</constant>
                                        </right_operand>
                                    </binary_operation>
                                </condition>
                                <then>
                                    <return>
                                        <binary_operation operator="/">
                                            <left_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="UpperBound"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="LowerBound"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="*">
                                                        <left_operand>
                                                            <constant type="real">2.0</constant>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="LowerBound"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </return>
                                </then>
                                <else>
                                    <if>
                                        <condition>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="UpperBound"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <return>
                                                <binary_operation operator="/">
                                                    <left_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="-">
                                                                <left_operand>
                                                                    <variable name="LowerBound"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <variable name="UpperBound"/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="*">
                                                                <left_operand>
                                                                    <constant type="real">2.0</constant>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <variable name="UpperBound"/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </return>
                                        </then>
                                        <else>
                                            <return>
                                                <nil/>
                                            </return>
                                        </else>
                                    </if>
                                </else>
                            </if>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="accurate" native="false">
                <return_type>Boolean</return_type>
                <argument name="Accuracy" type="Real"/>
                <local_variable name="RelativeError" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="RelativeError">
                            <data_method_call method_name="getRelativeError" super="false">
                                <receiver>
                                    <self/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="RelativeError"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <return>
                                    <constant type="boolean">false</constant>
                                </return>
                            </then>
                            <else>
                                <return>
                                    <binary_operation operator="&lt;=">
                                        <left_operand>
                                            <variable name="RelativeError"/>
                                        </left_operand>
                                        <right_operand>
                                            <binary_operation operator="-">
                                                <left_operand>
                                                    <constant type="real">1.0</constant>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Accuracy"/>
                                                </right_operand>
                                            </binary_operation>
                                        </right_operand>
                                    </binary_operation>
                                </return>
                            </else>
                        </if>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="result" native="false">
                <return_type>Real</return_type>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="&amp;">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="!=">
                                            <left_operand>
                                                <variable name="LowerBound"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="!=">
                                            <left_operand>
                                                <variable name="UpperBound"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <binary_operation operator="*">
                                    <left_operand>
                                        <constant type="real">0.5</constant>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <variable name="LowerBound"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="UpperBound"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </return>
                        </then>
                        <else>
                            <return>
                                <nil/>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="printHeading" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <constant type="string">"Point Estimation:\tConfidence Interval:\t\t\t\t\t\tConfidence Level:\tRelative Error:"</constant>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="printStatistics" native="false">
                <return_type>String</return_type>
                <local_variable name="RelativeError" type="Real"/>
                <local_variable name="PrintOut" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="LowerBound"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="UpperBound"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <assignment variable_name="PrintOut">
                                    <data_method_call method_name="tab" super="false">
                                        <receiver>
                                            <constant type="string">"Not Specified"</constant>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                            <else>
                                <assignment variable_name="PrintOut">
                                    <data_method_call method_name="printString" super="false">
                                        <receiver>
                                            <sequence_of_expressions>
                                                <binary_operation operator="*">
                                                    <left_operand>
                                                        <constant type="real">0.5</constant>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="+">
                                                                <left_operand>
                                                                    <variable name="LowerBound"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <variable name="UpperBound"/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </else>
                        </if>
                        <data_method_call method_name="concat" super="false">
                            <receiver>
                                <data_method_call method_name="tab" super="false">
                                    <receiver>
                                        <variable name="PrintOut"/>
                                    </receiver>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <constant type="string">"["</constant>
                            </argument>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="LowerBound"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <variable name="PrintOut"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"-inf"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                            <else>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <variable name="PrintOut"/>
                                    </receiver>
                                    <argument>
                                        <data_method_call method_name="printString" super="false">
                                            <receiver>
                                                <variable name="LowerBound"/>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <data_method_call method_name="concat" super="false">
                            <receiver>
                                <variable name="PrintOut"/>
                            </receiver>
                            <argument>
                                <constant type="string">", "</constant>
                            </argument>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="UpperBound"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <variable name="PrintOut"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"inf"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                            <else>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <variable name="PrintOut"/>
                                    </receiver>
                                    <argument>
                                        <data_method_call method_name="printString" super="false">
                                            <receiver>
                                                <variable name="UpperBound"/>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <data_method_call method_name="concat" super="false">
                            <receiver>
                                <variable name="PrintOut"/>
                            </receiver>
                            <argument>
                                <constant type="string">"]\t"</constant>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="concat" super="false">
                            <receiver>
                                <variable name="PrintOut"/>
                            </receiver>
                            <argument>
                                <data_method_call method_name="printString" super="false">
                                    <receiver>
                                        <variable name="ConfidenceLevel"/>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="tab" super="false">
                            <receiver>
                                <data_method_call method_name="tab" super="false">
                                    <receiver>
                                        <data_method_call method_name="tab" super="false">
                                            <receiver>
                                                <data_method_call method_name="tab" super="false">
                                                    <receiver>
                                                        <variable name="PrintOut"/>
                                                    </receiver>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </receiver>
                        </data_method_call>
                        <assignment variable_name="RelativeError">
                            <data_method_call method_name="getRelativeError" super="false">
                                <receiver>
                                    <self/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="RelativeError"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <variable name="PrintOut"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"inf\n\n\n\n"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                            <else>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <variable name="PrintOut"/>
                                    </receiver>
                                    <argument>
                                        <data_method_call method_name="printString" super="false">
                                            <receiver>
                                                <variable name="RelativeError"/>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <return>
                            <variable name="PrintOut"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="concat" super="false">
                            <receiver>
                                <data_method_call method_name="lf" super="false">
                                    <receiver>
                                        <data_method_call method_name="printHeading" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <data_method_call method_name="printStatistics" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="logHeading" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <constant type="string">"Point Estimation:\tConfidence Interval:\t\t\tConfidence Level:\tRelative Error:"</constant>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="logStatistics" native="false">
                <return_type>String</return_type>
                <local_variable name="RelativeError" type="Real"/>
                <local_variable name="LogOut" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="LowerBound"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="UpperBound"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <assignment variable_name="LogOut">
                                    <data_method_call method_name="tab" super="false">
                                        <receiver>
                                            <constant type="string">"Not Specified"</constant>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                            <else>
                                <assignment variable_name="LogOut">
                                    <data_method_call method_name="printString" super="false">
                                        <receiver>
                                            <sequence_of_expressions>
                                                <binary_operation operator="*">
                                                    <left_operand>
                                                        <constant type="real">0.5</constant>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="+">
                                                                <left_operand>
                                                                    <variable name="LowerBound"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <variable name="UpperBound"/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </else>
                        </if>
                        <data_method_call method_name="concat" super="false">
                            <receiver>
                                <data_method_call method_name="tab" super="false">
                                    <receiver>
                                        <variable name="LogOut"/>
                                    </receiver>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <constant type="string">"["</constant>
                            </argument>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="LowerBound"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <variable name="LogOut"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"-inf"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                            <else>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <variable name="LogOut"/>
                                    </receiver>
                                    <argument>
                                        <data_method_call method_name="printString" super="false">
                                            <receiver>
                                                <variable name="LowerBound"/>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <data_method_call method_name="concat" super="false">
                            <receiver>
                                <variable name="LogOut"/>
                            </receiver>
                            <argument>
                                <constant type="string">", "</constant>
                            </argument>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="UpperBound"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <variable name="LogOut"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"inf"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                            <else>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <variable name="LogOut"/>
                                    </receiver>
                                    <argument>
                                        <data_method_call method_name="printString" super="false">
                                            <receiver>
                                                <variable name="UpperBound"/>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <data_method_call method_name="tab" super="false">
                            <receiver>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <variable name="LogOut"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"]"</constant>
                                    </argument>
                                </data_method_call>
                            </receiver>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="LowerBound"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="UpperBound"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="tab" super="false">
                                    <receiver>
                                        <data_method_call method_name="tab" super="false">
                                            <receiver>
                                                <data_method_call method_name="tab" super="false">
                                                    <receiver>
                                                        <variable name="LogOut"/>
                                                    </receiver>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <data_method_call method_name="concat" super="false">
                            <receiver>
                                <variable name="LogOut"/>
                            </receiver>
                            <argument>
                                <data_method_call method_name="printString" super="false">
                                    <receiver>
                                        <variable name="ConfidenceLevel"/>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="tab" super="false">
                            <receiver>
                                <data_method_call method_name="tab" super="false">
                                    <receiver>
                                        <data_method_call method_name="tab" super="false">
                                            <receiver>
                                                <variable name="LogOut"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </receiver>
                        </data_method_call>
                        <assignment variable_name="RelativeError">
                            <data_method_call method_name="getRelativeError" super="false">
                                <receiver>
                                    <self/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="==">
                                    <left_operand>
                                        <variable name="RelativeError"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="tab" super="false">
                                    <receiver>
                                        <data_method_call method_name="concat" super="false">
                                            <receiver>
                                                <variable name="LogOut"/>
                                            </receiver>
                                            <argument>
                                                <constant type="string">"inf"</constant>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </then>
                            <else>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <variable name="LogOut"/>
                                    </receiver>
                                    <argument>
                                        <data_method_call method_name="printString" super="false">
                                            <receiver>
                                                <variable name="RelativeError"/>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <return>
                            <variable name="LogOut"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="+" native="false">
                <return_type>ConfidenceInterval</return_type>
                <argument name="CI" type="ConfidenceInterval"/>
                <local_variable name="Lower" type="Real"/>
                <local_variable name="Upper" type="Real"/>
                <local_variable name="Level" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Lower">
                            <data_method_call method_name="extendedPlus" super="false">
                                <receiver>
                                    <self/>
                                </receiver>
                                <argument>
                                    <variable name="LowerBound"/>
                                </argument>
                                <argument>
                                    <data_method_call method_name="getLowerBound" super="false">
                                        <receiver>
                                            <variable name="CI"/>
                                        </receiver>
                                    </data_method_call>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="Upper">
                            <data_method_call method_name="extendedPlus" super="false">
                                <receiver>
                                    <self/>
                                </receiver>
                                <argument>
                                    <variable name="UpperBound"/>
                                </argument>
                                <argument>
                                    <data_method_call method_name="getUpperBound" super="false">
                                        <receiver>
                                            <variable name="CI"/>
                                        </receiver>
                                    </data_method_call>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="Level">
                            <binary_operation operator="-">
                                <left_operand>
                                    <binary_operation operator="+">
                                        <left_operand>
                                            <variable name="ConfidenceLevel"/>
                                        </left_operand>
                                        <right_operand>
                                            <data_method_call method_name="getConfidenceLevel" super="false">
                                                <receiver>
                                                    <variable name="CI"/>
                                                </receiver>
                                            </data_method_call>
                                        </right_operand>
                                    </binary_operation>
                                </left_operand>
                                <right_operand>
                                    <constant type="real">1.0</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <return>
                            <data_method_call method_name="withParameters" super="false">
                                <receiver>
                                    <new data_class="ConfidenceInterval"/>
                                </receiver>
                                <argument>
                                    <variable name="Lower"/>
                                </argument>
                                <argument>
                                    <variable name="Upper"/>
                                </argument>
                                <argument>
                                    <variable name="Level"/>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="-" native="false">
                <return_type>ConfidenceInterval</return_type>
                <argument name="CI" type="ConfidenceInterval"/>
                <body_expression>
                    <return>
                        <binary_operation operator="+">
                            <left_operand>
                                <self/>
                            </left_operand>
                            <right_operand>
                                <data_method_call method_name="negate" super="false">
                                    <receiver>
                                        <variable name="CI"/>
                                    </receiver>
                                </data_method_call>
                            </right_operand>
                        </binary_operation>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="*" native="false">
                <return_type>ConfidenceInterval</return_type>
                <argument name="CI" type="ConfidenceInterval"/>
                <local_variable name="Lower" type="Real"/>
                <local_variable name="Upper" type="Real"/>
                <local_variable name="Level" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <data_method_call method_name="extendedLowerGreaterEqualZero" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <if>
                                    <condition>
                                        <data_method_call method_name="extendedLowerGreaterEqualZero" super="false">
                                            <receiver>
                                                <variable name="CI"/>
                                            </receiver>
                                        </data_method_call>
                                    </condition>
                                    <then>
                                        <sequence_of_expressions>
                                            <assignment variable_name="Lower">
                                                <data_method_call method_name="extendedTimes" super="false">
                                                    <receiver>
                                                        <self/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="LowerBound"/>
                                                    </argument>
                                                    <argument>
                                                        <data_method_call method_name="getLowerBound" super="false">
                                                            <receiver>
                                                                <variable name="CI"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </assignment>
                                            <assignment variable_name="Upper">
                                                <data_method_call method_name="extendedTimes" super="false">
                                                    <receiver>
                                                        <self/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="UpperBound"/>
                                                    </argument>
                                                    <argument>
                                                        <data_method_call method_name="getUpperBound" super="false">
                                                            <receiver>
                                                                <variable name="CI"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </assignment>
                                        </sequence_of_expressions>
                                    </then>
                                    <else>
                                        <if>
                                            <condition>
                                                <data_method_call method_name="extendedUpperLessZero" super="false">
                                                    <receiver>
                                                        <variable name="CI"/>
                                                    </receiver>
                                                </data_method_call>
                                            </condition>
                                            <then>
                                                <sequence_of_expressions>
                                                    <assignment variable_name="Lower">
                                                        <data_method_call method_name="extendedTimes" super="false">
                                                            <receiver>
                                                                <self/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="UpperBound"/>
                                                            </argument>
                                                            <argument>
                                                                <data_method_call method_name="getLowerBound" super="false">
                                                                    <receiver>
                                                                        <variable name="CI"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </argument>
                                                        </data_method_call>
                                                    </assignment>
                                                    <assignment variable_name="Upper">
                                                        <data_method_call method_name="extendedTimes" super="false">
                                                            <receiver>
                                                                <self/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="LowerBound"/>
                                                            </argument>
                                                            <argument>
                                                                <data_method_call method_name="getUpperBound" super="false">
                                                                    <receiver>
                                                                        <variable name="CI"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </argument>
                                                        </data_method_call>
                                                    </assignment>
                                                </sequence_of_expressions>
                                            </then>
                                            <else>
                                                <sequence_of_expressions>
                                                    <assignment variable_name="Lower">
                                                        <data_method_call method_name="extendedTimes" super="false">
                                                            <receiver>
                                                                <self/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="UpperBound"/>
                                                            </argument>
                                                            <argument>
                                                                <data_method_call method_name="getLowerBound" super="false">
                                                                    <receiver>
                                                                        <variable name="CI"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </argument>
                                                        </data_method_call>
                                                    </assignment>
                                                    <assignment variable_name="Upper">
                                                        <data_method_call method_name="extendedTimes" super="false">
                                                            <receiver>
                                                                <self/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="UpperBound"/>
                                                            </argument>
                                                            <argument>
                                                                <data_method_call method_name="getUpperBound" super="false">
                                                                    <receiver>
                                                                        <variable name="CI"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </argument>
                                                        </data_method_call>
                                                    </assignment>
                                                </sequence_of_expressions>
                                            </else>
                                        </if>
                                    </else>
                                </if>
                            </then>
                            <else>
                                <if>
                                    <condition>
                                        <data_method_call method_name="extendedUpperLessZero" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                        </data_method_call>
                                    </condition>
                                    <then>
                                        <if>
                                            <condition>
                                                <data_method_call method_name="extendedLowerGreaterEqualZero" super="false">
                                                    <receiver>
                                                        <variable name="CI"/>
                                                    </receiver>
                                                </data_method_call>
                                            </condition>
                                            <then>
                                                <sequence_of_expressions>
                                                    <assignment variable_name="Lower">
                                                        <data_method_call method_name="extendedTimes" super="false">
                                                            <receiver>
                                                                <self/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="LowerBound"/>
                                                            </argument>
                                                            <argument>
                                                                <data_method_call method_name="getUpperBound" super="false">
                                                                    <receiver>
                                                                        <variable name="CI"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </argument>
                                                        </data_method_call>
                                                    </assignment>
                                                    <assignment variable_name="Upper">
                                                        <data_method_call method_name="extendedTimes" super="false">
                                                            <receiver>
                                                                <self/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="UpperBound"/>
                                                            </argument>
                                                            <argument>
                                                                <data_method_call method_name="getLowerBound" super="false">
                                                                    <receiver>
                                                                        <variable name="CI"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </argument>
                                                        </data_method_call>
                                                    </assignment>
                                                </sequence_of_expressions>
                                            </then>
                                            <else>
                                                <if>
                                                    <condition>
                                                        <data_method_call method_name="extendedUpperLessZero" super="false">
                                                            <receiver>
                                                                <variable name="CI"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </condition>
                                                    <then>
                                                        <sequence_of_expressions>
                                                            <assignment variable_name="Lower">
                                                                <data_method_call method_name="extendedTimes" super="false">
                                                                    <receiver>
                                                                        <self/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <variable name="UpperBound"/>
                                                                    </argument>
                                                                    <argument>
                                                                        <data_method_call method_name="getUpperBound" super="false">
                                                                            <receiver>
                                                                                <variable name="CI"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </argument>
                                                                </data_method_call>
                                                            </assignment>
                                                            <assignment variable_name="Upper">
                                                                <data_method_call method_name="extendedTimes" super="false">
                                                                    <receiver>
                                                                        <self/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <variable name="LowerBound"/>
                                                                    </argument>
                                                                    <argument>
                                                                        <data_method_call method_name="getLowerBound" super="false">
                                                                            <receiver>
                                                                                <variable name="CI"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </argument>
                                                                </data_method_call>
                                                            </assignment>
                                                        </sequence_of_expressions>
                                                    </then>
                                                    <else>
                                                        <sequence_of_expressions>
                                                            <assignment variable_name="Lower">
                                                                <data_method_call method_name="extendedTimes" super="false">
                                                                    <receiver>
                                                                        <self/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <variable name="LowerBound"/>
                                                                    </argument>
                                                                    <argument>
                                                                        <data_method_call method_name="getUpperBound" super="false">
                                                                            <receiver>
                                                                                <variable name="CI"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </argument>
                                                                </data_method_call>
                                                            </assignment>
                                                            <assignment variable_name="Upper">
                                                                <data_method_call method_name="extendedTimes" super="false">
                                                                    <receiver>
                                                                        <self/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <variable name="LowerBound"/>
                                                                    </argument>
                                                                    <argument>
                                                                        <data_method_call method_name="getLowerBound" super="false">
                                                                            <receiver>
                                                                                <variable name="CI"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </argument>
                                                                </data_method_call>
                                                            </assignment>
                                                        </sequence_of_expressions>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                    </then>
                                    <else>
                                        <if>
                                            <condition>
                                                <data_method_call method_name="extendedLowerGreaterEqualZero" super="false">
                                                    <receiver>
                                                        <variable name="CI"/>
                                                    </receiver>
                                                </data_method_call>
                                            </condition>
                                            <then>
                                                <sequence_of_expressions>
                                                    <assignment variable_name="Lower">
                                                        <data_method_call method_name="extendedTimes" super="false">
                                                            <receiver>
                                                                <self/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="LowerBound"/>
                                                            </argument>
                                                            <argument>
                                                                <data_method_call method_name="getUpperBound" super="false">
                                                                    <receiver>
                                                                        <variable name="CI"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </argument>
                                                        </data_method_call>
                                                    </assignment>
                                                    <assignment variable_name="Upper">
                                                        <data_method_call method_name="extendedTimes" super="false">
                                                            <receiver>
                                                                <self/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="UpperBound"/>
                                                            </argument>
                                                            <argument>
                                                                <data_method_call method_name="getUpperBound" super="false">
                                                                    <receiver>
                                                                        <variable name="CI"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </argument>
                                                        </data_method_call>
                                                    </assignment>
                                                </sequence_of_expressions>
                                            </then>
                                            <else>
                                                <if>
                                                    <condition>
                                                        <data_method_call method_name="extendedUpperLessZero" super="false">
                                                            <receiver>
                                                                <variable name="CI"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </condition>
                                                    <then>
                                                        <sequence_of_expressions>
                                                            <assignment variable_name="Lower">
                                                                <data_method_call method_name="extendedTimes" super="false">
                                                                    <receiver>
                                                                        <self/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <variable name="UpperBound"/>
                                                                    </argument>
                                                                    <argument>
                                                                        <data_method_call method_name="getLowerBound" super="false">
                                                                            <receiver>
                                                                                <variable name="CI"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </argument>
                                                                </data_method_call>
                                                            </assignment>
                                                            <assignment variable_name="Upper">
                                                                <data_method_call method_name="extendedTimes" super="false">
                                                                    <receiver>
                                                                        <self/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <variable name="LowerBound"/>
                                                                    </argument>
                                                                    <argument>
                                                                        <data_method_call method_name="getLowerBound" super="false">
                                                                            <receiver>
                                                                                <variable name="CI"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </argument>
                                                                </data_method_call>
                                                            </assignment>
                                                        </sequence_of_expressions>
                                                    </then>
                                                    <else>
                                                        <sequence_of_expressions>
                                                            <assignment variable_name="Lower">
                                                                <data_method_call method_name="extendedMin" super="false">
                                                                    <receiver>
                                                                        <self/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <data_method_call method_name="extendedTimes" super="false">
                                                                            <receiver>
                                                                                <self/>
                                                                            </receiver>
                                                                            <argument>
                                                                                <variable name="LowerBound"/>
                                                                            </argument>
                                                                            <argument>
                                                                                <data_method_call method_name="getUpperBound" super="false">
                                                                                    <receiver>
                                                                                        <variable name="CI"/>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </argument>
                                                                        </data_method_call>
                                                                    </argument>
                                                                    <argument>
                                                                        <data_method_call method_name="extendedTimes" super="false">
                                                                            <receiver>
                                                                                <self/>
                                                                            </receiver>
                                                                            <argument>
                                                                                <variable name="UpperBound"/>
                                                                            </argument>
                                                                            <argument>
                                                                                <data_method_call method_name="getLowerBound" super="false">
                                                                                    <receiver>
                                                                                        <variable name="CI"/>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </argument>
                                                                        </data_method_call>
                                                                    </argument>
                                                                </data_method_call>
                                                            </assignment>
                                                            <assignment variable_name="Upper">
                                                                <data_method_call method_name="extendedMax" super="false">
                                                                    <receiver>
                                                                        <self/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <data_method_call method_name="extendedTimes" super="false">
                                                                            <receiver>
                                                                                <self/>
                                                                            </receiver>
                                                                            <argument>
                                                                                <variable name="LowerBound"/>
                                                                            </argument>
                                                                            <argument>
                                                                                <data_method_call method_name="getLowerBound" super="false">
                                                                                    <receiver>
                                                                                        <variable name="CI"/>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </argument>
                                                                        </data_method_call>
                                                                    </argument>
                                                                    <argument>
                                                                        <data_method_call method_name="extendedTimes" super="false">
                                                                            <receiver>
                                                                                <self/>
                                                                            </receiver>
                                                                            <argument>
                                                                                <variable name="UpperBound"/>
                                                                            </argument>
                                                                            <argument>
                                                                                <data_method_call method_name="getUpperBound" super="false">
                                                                                    <receiver>
                                                                                        <variable name="CI"/>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </argument>
                                                                        </data_method_call>
                                                                    </argument>
                                                                </data_method_call>
                                                            </assignment>
                                                        </sequence_of_expressions>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                    </else>
                                </if>
                            </else>
                        </if>
                        <assignment variable_name="Level">
                            <binary_operation operator="-">
                                <left_operand>
                                    <binary_operation operator="+">
                                        <left_operand>
                                            <variable name="ConfidenceLevel"/>
                                        </left_operand>
                                        <right_operand>
                                            <data_method_call method_name="getConfidenceLevel" super="false">
                                                <receiver>
                                                    <variable name="CI"/>
                                                </receiver>
                                            </data_method_call>
                                        </right_operand>
                                    </binary_operation>
                                </left_operand>
                                <right_operand>
                                    <constant type="real">1.0</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <return>
                            <data_method_call method_name="withParameters" super="false">
                                <receiver>
                                    <new data_class="ConfidenceInterval"/>
                                </receiver>
                                <argument>
                                    <variable name="Lower"/>
                                </argument>
                                <argument>
                                    <variable name="Upper"/>
                                </argument>
                                <argument>
                                    <variable name="Level"/>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="/" native="false">
                <return_type>ConfidenceInterval</return_type>
                <argument name="CI" type="ConfidenceInterval"/>
                <body_expression>
                    <return>
                        <binary_operation operator="*">
                            <left_operand>
                                <self/>
                            </left_operand>
                            <right_operand>
                                <data_method_call method_name="reciprocal" super="false">
                                    <receiver>
                                        <variable name="CI"/>
                                    </receiver>
                                </data_method_call>
                            </right_operand>
                        </binary_operation>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="DataBufferMonitor" native="false">
            <super_class>Object</super_class>
            <instance_variable name="AvailableTokens" type="Integer"/>
            <instance_variable name="BufferSize" type="Integer"/>
            <instance_variable name="MaximumOccupation" type="Integer"/>
            <instance_variable name="Monitor" type="Boolean"/>
            <instance_variable name="Name" type="String"/>
            <instance_variable name="PreviousTime" type="Real"/>
            <instance_variable name="ReservedLocations" type="Integer"/>
            <instance_variable name="TokenSize" type="Integer"/>
            <instance_variable name="Trace" type="Boolean"/>
            <instance_variable name="TraceFile" type="FileOut"/>
            <data_method name="available" native="false">
                <return_type>Boolean</return_type>
                <argument name="NumberOfTokens" type="Integer"/>
                <body_expression>
                    <return>
                        <binary_operation operator="&gt;=">
                            <left_operand>
                                <variable name="AvailableTokens"/>
                            </left_operand>
                            <right_operand>
                                <variable name="NumberOfTokens"/>
                            </right_operand>
                        </binary_operation>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="init" native="false">
                <return_type>DataBufferMonitor</return_type>
                <argument name="N" type="String"/>
                <argument name="BS" type="Integer"/>
                <argument name="IT" type="Integer"/>
                <argument name="TS" type="Integer"/>
                <argument name="M" type="Boolean"/>
                <argument name="T" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Name">
                            <variable name="N"/>
                        </assignment>
                        <assignment variable_name="BufferSize">
                            <variable name="BS"/>
                        </assignment>
                        <assignment variable_name="TokenSize">
                            <variable name="TS"/>
                        </assignment>
                        <assignment variable_name="AvailableTokens">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="ReservedLocations">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="PreviousTime">
                            <constant type="real">0.0</constant>
                        </assignment>
                        <assignment variable_name="Monitor">
                            <variable name="M"/>
                        </assignment>
                        <if>
                            <condition>
                                <variable name="Monitor"/>
                            </condition>
                            <then>
                                <assignment variable_name="MaximumOccupation">
                                    <constant type="integer">0</constant>
                                </assignment>
                            </then>
                        </if>
                        <assignment variable_name="Trace">
                            <variable name="T"/>
                        </assignment>
                        <if>
                            <condition>
                                <variable name="Trace"/>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="TraceFile">
                                        <data_method_call method_name="open" super="false">
                                            <receiver>
                                                <data_method_call method_name="destination" super="false">
                                                    <receiver>
                                                        <new data_class="FileOut"/>
                                                    </receiver>
                                                    <argument>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <binary_operation operator="+">
                                                                    <left_operand>
                                                                        <constant type="string">"Channel_"</constant>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="Name"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="string">".trace"</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <data_method_call method_name="write" super="false">
                                        <receiver>
                                            <variable name="TraceFile"/>
                                        </receiver>
                                        <argument>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <constant type="string">"Traced Buffer Occupancy for Channel: "</constant>
                                                </left_operand>
                                                <right_operand>
                                                    <data_method_call method_name="lf" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="lf" super="false">
                                                                <receiver>
                                                                    <variable name="Name"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </receiver>
                                                    </data_method_call>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <data_method_call method_name="reserve" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="IT"/>
                            </argument>
                            <argument>
                                <constant type="real">0.0</constant>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="IT"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="remove" native="false">
                <return_type>DataBufferMonitor</return_type>
                <argument name="NumberOfTokens" type="Integer"/>
                <argument name="CurrentTime" type="Real"/>
                <local_variable name="Occupation" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Occupation">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="ReservedLocations"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="AvailableTokens"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="Trace"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;">
                                                <left_operand>
                                                    <variable name="CurrentTime"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="PreviousTime"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="write" super="false">
                                    <receiver>
                                        <variable name="TraceFile"/>
                                    </receiver>
                                    <argument>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"At time: "</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="PreviousTime"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">" Occupation: "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="lf" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="*">
                                                                        <left_operand>
                                                                            <variable name="Occupation"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <variable name="TokenSize"/>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="AvailableTokens">
                            <binary_operation operator="-">
                                <left_operand>
                                    <variable name="AvailableTokens"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="NumberOfTokens"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="Occupation">
                            <binary_operation operator="-">
                                <left_operand>
                                    <variable name="Occupation"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="NumberOfTokens"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="PreviousTime">
                            <variable name="CurrentTime"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="reserve" native="false">
                <return_type>DataBufferMonitor</return_type>
                <argument name="NumberOfTokens" type="Integer"/>
                <argument name="CurrentTime" type="Real"/>
                <local_variable name="Occupation" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Occupation">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="ReservedLocations"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="AvailableTokens"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="Trace"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;">
                                                <left_operand>
                                                    <variable name="CurrentTime"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="PreviousTime"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="write" super="false">
                                    <receiver>
                                        <variable name="TraceFile"/>
                                    </receiver>
                                    <argument>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"At time: "</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="PreviousTime"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">" Occupation: "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="lf" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="*">
                                                                        <left_operand>
                                                                            <variable name="Occupation"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <variable name="TokenSize"/>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="ReservedLocations">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="ReservedLocations"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="NumberOfTokens"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="Occupation">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="Occupation"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="NumberOfTokens"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <if>
                            <condition>
                                <variable name="Monitor"/>
                            </condition>
                            <then>
                                <if>
                                    <condition>
                                        <binary_operation operator="&gt;">
                                            <left_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="*">
                                                        <left_operand>
                                                            <variable name="Occupation"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="TokenSize"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="MaximumOccupation"/>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <assignment variable_name="MaximumOccupation">
                                            <binary_operation operator="*">
                                                <left_operand>
                                                    <variable name="Occupation"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="TokenSize"/>
                                                </right_operand>
                                            </binary_operation>
                                        </assignment>
                                    </then>
                                </if>
                            </then>
                        </if>
                        <assignment variable_name="PreviousTime">
                            <variable name="CurrentTime"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="room" native="false">
                <return_type>Boolean</return_type>
                <argument name="NumberOfTokens" type="Integer"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="&gt;">
                                <left_operand>
                                    <variable name="BufferSize"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">0</constant>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="ReservedLocations"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="AvailableTokens"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="NumberOfTokens"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="BufferSize"/>
                                    </right_operand>
                                </binary_operation>
                            </return>
                        </then>
                        <else>
                            <return>
                                <constant type="boolean">true</constant>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="write" native="false">
                <return_type>DataBufferMonitor</return_type>
                <argument name="NumberOfTokens" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="ReservedLocations">
                            <binary_operation operator="-">
                                <left_operand>
                                    <variable name="ReservedLocations"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="NumberOfTokens"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="AvailableTokens">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="AvailableTokens"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="NumberOfTokens"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="ControlBufferMonitor" native="false">
            <super_class>Object</super_class>
            <instance_variable name="AvailableTokens" type="Integer"/>
            <instance_variable name="Buffer" type="Queue"/>
            <instance_variable name="BufferSize" type="Integer"/>
            <instance_variable name="MaximumOccupation" type="Integer"/>
            <instance_variable name="Monitor" type="Boolean"/>
            <instance_variable name="Name" type="String"/>
            <instance_variable name="PreviousTime" type="Real"/>
            <instance_variable name="ReservedLocations" type="Integer"/>
            <instance_variable name="TokenSize" type="Integer"/>
            <instance_variable name="Trace" type="Boolean"/>
            <instance_variable name="TraceFile" type="FileOut"/>
            <data_method name="available" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <return>
                        <binary_operation operator="&gt;=">
                            <left_operand>
                                <variable name="AvailableTokens"/>
                            </left_operand>
                            <right_operand>
                                <constant type="integer">1</constant>
                            </right_operand>
                        </binary_operation>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="init" native="false">
                <return_type>ControlBufferMonitor</return_type>
                <argument name="N" type="String"/>
                <argument name="BS" type="Integer"/>
                <argument name="NIT" type="Queue"/>
                <argument name="CIT" type="Queue"/>
                <argument name="TS" type="Integer"/>
                <argument name="M" type="Boolean"/>
                <argument name="T" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Name">
                            <variable name="N"/>
                        </assignment>
                        <assignment variable_name="BufferSize">
                            <variable name="BS"/>
                        </assignment>
                        <assignment variable_name="TokenSize">
                            <variable name="TS"/>
                        </assignment>
                        <assignment variable_name="AvailableTokens">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="ReservedLocations">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="PreviousTime">
                            <constant type="real">0.0</constant>
                        </assignment>
                        <assignment variable_name="Monitor">
                            <variable name="M"/>
                        </assignment>
                        <if>
                            <condition>
                                <variable name="Monitor"/>
                            </condition>
                            <then>
                                <assignment variable_name="MaximumOccupation">
                                    <constant type="integer">0</constant>
                                </assignment>
                            </then>
                        </if>
                        <assignment variable_name="Trace">
                            <variable name="T"/>
                        </assignment>
                        <if>
                            <condition>
                                <variable name="Trace"/>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="TraceFile">
                                        <data_method_call method_name="open" super="false">
                                            <receiver>
                                                <data_method_call method_name="destination" super="false">
                                                    <receiver>
                                                        <new data_class="FileOut"/>
                                                    </receiver>
                                                    <argument>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <binary_operation operator="+">
                                                                    <left_operand>
                                                                        <constant type="string">"Channel_"</constant>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="Name"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="string">".trace"</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <data_method_call method_name="write" super="false">
                                        <receiver>
                                            <variable name="TraceFile"/>
                                        </receiver>
                                        <argument>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <constant type="string">"Traced Buffer Occupancy for Channel: "</constant>
                                                </left_operand>
                                                <right_operand>
                                                    <data_method_call method_name="lf" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="lf" super="false">
                                                                <receiver>
                                                                    <variable name="Name"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </receiver>
                                                    </data_method_call>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <assignment variable_name="Buffer">
                            <new data_class="Queue"/>
                        </assignment>
                        <while>
                            <condition>
                                <unary_operation operator="!">
                                    <operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="isEmpty" super="false">
                                                <receiver>
                                                    <variable name="NIT"/>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </operand>
                                </unary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="reserve" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="inspect" super="false">
                                                <receiver>
                                                    <variable name="NIT"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                        <argument>
                                            <constant type="real">0.0</constant>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="write" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="inspect" super="false">
                                                <receiver>
                                                    <variable name="NIT"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                        <argument>
                                            <data_method_call method_name="inspect" super="false">
                                                <receiver>
                                                    <variable name="CIT"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                        <argument>
                                            <constant type="integer">0</constant>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="remove" super="false">
                                        <receiver>
                                            <variable name="NIT"/>
                                        </receiver>
                                    </data_method_call>
                                    <data_method_call method_name="remove" super="false">
                                        <receiver>
                                            <variable name="CIT"/>
                                        </receiver>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="inspect" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="inspect" super="false">
                            <receiver>
                                <variable name="Buffer"/>
                            </receiver>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="inspectIteration" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="at" super="false">
                            <receiver>
                                <data_method_call method_name="inspect" super="false">
                                    <receiver>
                                        <variable name="Buffer"/>
                                    </receiver>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <constant type="integer">2</constant>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="inspectScenario" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="at" super="false">
                            <receiver>
                                <data_method_call method_name="inspect" super="false">
                                    <receiver>
                                        <variable name="Buffer"/>
                                    </receiver>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <constant type="integer">1</constant>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="remove" native="false">
                <return_type>Array</return_type>
                <argument name="CurrentTime" type="Real"/>
                <local_variable name="Occupation" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Occupation">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="ReservedLocations"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="AvailableTokens"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="Trace"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;">
                                                <left_operand>
                                                    <variable name="CurrentTime"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="PreviousTime"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="write" super="false">
                                    <receiver>
                                        <variable name="TraceFile"/>
                                    </receiver>
                                    <argument>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"At time: "</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="PreviousTime"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">" Occupation: "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="lf" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="*">
                                                                        <left_operand>
                                                                            <variable name="Occupation"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <variable name="TokenSize"/>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="AvailableTokens">
                            <binary_operation operator="-">
                                <left_operand>
                                    <variable name="AvailableTokens"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="Occupation">
                            <binary_operation operator="-">
                                <left_operand>
                                    <variable name="Occupation"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="PreviousTime">
                            <variable name="CurrentTime"/>
                        </assignment>
                        <return>
                            <data_method_call method_name="remove" super="false">
                                <receiver>
                                    <variable name="Buffer"/>
                                </receiver>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="reserve" native="false">
                <return_type>ControlBufferMonitor</return_type>
                <argument name="NumberOfTokens" type="Integer"/>
                <argument name="CurrentTime" type="Real"/>
                <local_variable name="Occupation" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Occupation">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="ReservedLocations"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="AvailableTokens"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="Trace"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;">
                                                <left_operand>
                                                    <variable name="CurrentTime"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="PreviousTime"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="write" super="false">
                                    <receiver>
                                        <variable name="TraceFile"/>
                                    </receiver>
                                    <argument>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"At time: "</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="PreviousTime"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">" Occupation: "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="lf" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="*">
                                                                        <left_operand>
                                                                            <variable name="Occupation"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <variable name="TokenSize"/>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="ReservedLocations">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="ReservedLocations"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="NumberOfTokens"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="Occupation">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="Occupation"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="NumberOfTokens"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <if>
                            <condition>
                                <variable name="Monitor"/>
                            </condition>
                            <then>
                                <if>
                                    <condition>
                                        <binary_operation operator="&gt;">
                                            <left_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="*">
                                                        <left_operand>
                                                            <variable name="Occupation"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="TokenSize"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="MaximumOccupation"/>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <assignment variable_name="MaximumOccupation">
                                            <binary_operation operator="*">
                                                <left_operand>
                                                    <variable name="Occupation"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="TokenSize"/>
                                                </right_operand>
                                            </binary_operation>
                                        </assignment>
                                    </then>
                                </if>
                            </then>
                        </if>
                        <assignment variable_name="PreviousTime">
                            <variable name="CurrentTime"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="room" native="false">
                <return_type>Boolean</return_type>
                <argument name="NumberOfTokens" type="Integer"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="&gt;">
                                <left_operand>
                                    <variable name="BufferSize"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">0</constant>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="ReservedLocations"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="AvailableTokens"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="NumberOfTokens"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="BufferSize"/>
                                    </right_operand>
                                </binary_operation>
                            </return>
                        </then>
                        <else>
                            <return>
                                <constant type="boolean">true</constant>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="write" native="false">
                <return_type>ControlBufferMonitor</return_type>
                <argument name="NumberOfTokens" type="Integer"/>
                <argument name="Scenario" type="String"/>
                <argument name="Iteration" type="Integer"/>
                <local_variable name="Counter" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="ReservedLocations">
                            <binary_operation operator="-">
                                <left_operand>
                                    <variable name="ReservedLocations"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="NumberOfTokens"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="AvailableTokens">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="AvailableTokens"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="NumberOfTokens"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="Counter">
                            <variable name="NumberOfTokens"/>
                        </assignment>
                        <while>
                            <condition>
                                <sequence_of_expressions>
                                    <binary_operation operator="&gt;">
                                        <left_operand>
                                            <variable name="Counter"/>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="integer">0</constant>
                                        </right_operand>
                                    </binary_operation>
                                </sequence_of_expressions>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="add" super="false">
                                        <receiver>
                                            <variable name="Buffer"/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="putAt" super="false">
                                                <receiver>
                                                    <data_method_call method_name="putAt" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="resize" super="false">
                                                                <receiver>
                                                                    <new data_class="Array"/>
                                                                </receiver>
                                                                <argument>
                                                                    <constant type="integer">2</constant>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="integer">1</constant>
                                                        </argument>
                                                        <argument>
                                                            <variable name="Scenario"/>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <constant type="integer">2</constant>
                                                </argument>
                                                <argument>
                                                    <variable name="Iteration"/>
                                                </argument>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="Counter">
                                        <binary_operation operator="-">
                                            <left_operand>
                                                <variable name="Counter"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="MarkovChain" native="false">
            <super_class>Object</super_class>
            <instance_variable name="CurrentState" type="String"/>
            <instance_variable name="NumberOfStates" type="Integer"/>
            <instance_variable name="Random" type="Uniform"/>
            <instance_variable name="StateSpace" type="Array"/>
            <instance_variable name="Transitions" type="Array"/>
            <data_method name="addState" native="false">
                <return_type>MarkovChain</return_type>
                <argument name="State" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="NumberOfStates">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="NumberOfStates"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <data_method_call method_name="resize" super="false">
                            <receiver>
                                <variable name="StateSpace"/>
                            </receiver>
                            <argument>
                                <variable name="NumberOfStates"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="putAt" super="false">
                            <receiver>
                                <variable name="StateSpace"/>
                            </receiver>
                            <argument>
                                <variable name="NumberOfStates"/>
                            </argument>
                            <argument>
                                <variable name="State"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="resize" super="false">
                            <receiver>
                                <variable name="Transitions"/>
                            </receiver>
                            <argument>
                                <variable name="NumberOfStates"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="putAt" super="false">
                            <receiver>
                                <variable name="Transitions"/>
                            </receiver>
                            <argument>
                                <variable name="NumberOfStates"/>
                            </argument>
                            <argument>
                                <new data_class="Array"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="addTransition" native="false">
                <return_type>MarkovChain</return_type>
                <argument name="State" type="String"/>
                <argument name="NextState" type="String"/>
                <argument name="LowerBound" type="Real"/>
                <argument name="UpperBound" type="Real"/>
                <local_variable name="i" type="Integer"/>
                <local_variable name="StateNumber" type="Integer"/>
                <local_variable name="T" type="Array"/>
                <local_variable name="A" type="Array"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="i">
                            <constant type="integer">1</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <variable name="i"/>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="size" super="false">
                                            <receiver>
                                                <variable name="StateSpace"/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="at" super="false">
                                                        <receiver>
                                                            <variable name="StateSpace"/>
                                                        </receiver>
                                                        <argument>
                                                            <variable name="i"/>
                                                        </argument>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="State"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <assignment variable_name="StateNumber">
                                                <variable name="i"/>
                                            </assignment>
                                        </then>
                                    </if>
                                    <assignment variable_name="i">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="i"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <assignment variable_name="T">
                            <data_method_call method_name="at" super="false">
                                <receiver>
                                    <variable name="Transitions"/>
                                </receiver>
                                <argument>
                                    <variable name="StateNumber"/>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="A">
                            <data_method_call method_name="resize" super="false">
                                <receiver>
                                    <new data_class="Array"/>
                                </receiver>
                                <argument>
                                    <constant type="integer">3</constant>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="putAt" super="false">
                            <receiver>
                                <data_method_call method_name="putAt" super="false">
                                    <receiver>
                                        <data_method_call method_name="putAt" super="false">
                                            <receiver>
                                                <variable name="A"/>
                                            </receiver>
                                            <argument>
                                                <constant type="integer">1</constant>
                                            </argument>
                                            <argument>
                                                <variable name="NextState"/>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                    <argument>
                                        <constant type="integer">2</constant>
                                    </argument>
                                    <argument>
                                        <variable name="LowerBound"/>
                                    </argument>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <constant type="integer">3</constant>
                            </argument>
                            <argument>
                                <variable name="UpperBound"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="resize" super="false">
                            <receiver>
                                <variable name="T"/>
                            </receiver>
                            <argument>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <data_method_call method_name="size" super="false">
                                            <receiver>
                                                <variable name="T"/>
                                            </receiver>
                                        </data_method_call>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">1</constant>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="putAt" super="false">
                            <receiver>
                                <variable name="T"/>
                            </receiver>
                            <argument>
                                <data_method_call method_name="size" super="false">
                                    <receiver>
                                        <variable name="T"/>
                                    </receiver>
                                </data_method_call>
                            </argument>
                            <argument>
                                <variable name="A"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="getNextScenario" native="false">
                <return_type>String</return_type>
                <local_variable name="NextState" type="String"/>
                <local_variable name="i" type="Integer"/>
                <local_variable name="StateNumber" type="Integer"/>
                <local_variable name="T" type="Array"/>
                <local_variable name="Sample" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="i">
                            <constant type="integer">1</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <variable name="i"/>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="size" super="false">
                                            <receiver>
                                                <variable name="StateSpace"/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="at" super="false">
                                                        <receiver>
                                                            <variable name="StateSpace"/>
                                                        </receiver>
                                                        <argument>
                                                            <variable name="i"/>
                                                        </argument>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="CurrentState"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <assignment variable_name="StateNumber">
                                                <variable name="i"/>
                                            </assignment>
                                        </then>
                                    </if>
                                    <assignment variable_name="i">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="i"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <assignment variable_name="T">
                            <data_method_call method_name="at" super="false">
                                <receiver>
                                    <variable name="Transitions"/>
                                </receiver>
                                <argument>
                                    <variable name="StateNumber"/>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="Sample">
                            <data_method_call method_name="sample" super="false">
                                <receiver>
                                    <variable name="Random"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="i">
                            <constant type="integer">1</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <variable name="i"/>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="size" super="false">
                                            <receiver>
                                                <variable name="T"/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <sequence_of_expressions>
                                                <binary_operation operator="&amp;">
                                                    <left_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="&gt;">
                                                                <left_operand>
                                                                    <variable name="Sample"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <data_method_call method_name="at" super="false">
                                                                        <receiver>
                                                                            <data_method_call method_name="at" super="false">
                                                                                <receiver>
                                                                                    <variable name="T"/>
                                                                                </receiver>
                                                                                <argument>
                                                                                    <variable name="i"/>
                                                                                </argument>
                                                                            </data_method_call>
                                                                        </receiver>
                                                                        <argument>
                                                                            <constant type="integer">2</constant>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="&lt;=">
                                                                <left_operand>
                                                                    <variable name="Sample"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <data_method_call method_name="at" super="false">
                                                                        <receiver>
                                                                            <data_method_call method_name="at" super="false">
                                                                                <receiver>
                                                                                    <variable name="T"/>
                                                                                </receiver>
                                                                                <argument>
                                                                                    <variable name="i"/>
                                                                                </argument>
                                                                            </data_method_call>
                                                                        </receiver>
                                                                        <argument>
                                                                            <constant type="integer">3</constant>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </condition>
                                        <then>
                                            <assignment variable_name="NextState">
                                                <data_method_call method_name="at" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="at" super="false">
                                                            <receiver>
                                                                <variable name="T"/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="i"/>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="integer">1</constant>
                                                    </argument>
                                                </data_method_call>
                                            </assignment>
                                        </then>
                                    </if>
                                    <assignment variable_name="i">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="i"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <assignment variable_name="CurrentState">
                            <variable name="NextState"/>
                        </assignment>
                        <return>
                            <variable name="NextState"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="hasState" native="false">
                <return_type>Boolean</return_type>
                <argument name="State" type="String"/>
                <local_variable name="Result" type="Boolean"/>
                <local_variable name="i" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="i">
                            <constant type="integer">1</constant>
                        </assignment>
                        <assignment variable_name="Result">
                            <constant type="boolean">false</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <variable name="i"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="NumberOfStates"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="at" super="false">
                                                        <receiver>
                                                            <variable name="StateSpace"/>
                                                        </receiver>
                                                        <argument>
                                                            <variable name="i"/>
                                                        </argument>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="State"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <assignment variable_name="Result">
                                                <constant type="boolean">true</constant>
                                            </assignment>
                                        </then>
                                    </if>
                                    <assignment variable_name="i">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="i"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="Result"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="init" native="false">
                <return_type>MarkovChain</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="NumberOfStates">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="StateSpace">
                            <new data_class="Array"/>
                        </assignment>
                        <assignment variable_name="Transitions">
                            <new data_class="Array"/>
                        </assignment>
                        <assignment variable_name="Random">
                            <data_method_call method_name="withParameters" super="false">
                                <receiver>
                                    <new data_class="Uniform"/>
                                </receiver>
                                <argument>
                                    <constant type="real">0.0</constant>
                                </argument>
                                <argument>
                                    <constant type="real">1.0</constant>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="setInitialState" native="false">
                <return_type>MarkovChain</return_type>
                <argument name="State" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="CurrentState">
                            <variable name="State"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="ApplicationStatus" native="false">
            <super_class>Object</super_class>
            <instance_variable name="DesiredThroughput" type="Real"/>
            <instance_variable name="NextDeadline" type="Real"/>
            <instance_variable name="NumberOfDeadlineMisses" type="Integer"/>
            <instance_variable name="NumberOfFirings" type="Integer"/>
            <instance_variable name="Throughput" type="LongRunRateAverage"/>
            <instance_variable name="TimeOfLastFiring" type="Real"/>
            <data_method name="accurate" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="accurate" super="false">
                            <receiver>
                                <variable name="Throughput"/>
                            </receiver>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="fired" native="false">
                <return_type>ApplicationStatus</return_type>
                <argument name="CurrentTime" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="NumberOfFirings">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="NumberOfFirings"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <data_method_call method_name="rewardBM" super="false">
                            <receiver>
                                <variable name="Throughput"/>
                            </receiver>
                            <argument>
                                <constant type="real">1.0</constant>
                            </argument>
                            <argument>
                                <variable name="CurrentTime"/>
                            </argument>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="CurrentTime"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="NextDeadline"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <assignment variable_name="NumberOfDeadlineMisses">
                                    <binary_operation operator="+">
                                        <left_operand>
                                            <variable name="NumberOfDeadlineMisses"/>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="integer">1</constant>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                            </then>
                        </if>
                        <assignment variable_name="NextDeadline">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="NextDeadline"/>
                                </left_operand>
                                <right_operand>
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <constant type="real">1.0</constant>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="DesiredThroughput"/>
                                        </right_operand>
                                    </binary_operation>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="TimeOfLastFiring">
                            <variable name="CurrentTime"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="complete" native="false">
                <return_type>ApplicationStatus</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="complete" super="false">
                            <receiver>
                                <variable name="Throughput"/>
                            </receiver>
                        </data_method_call>
                        <data_method_call method_name="log" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="halt" native="false">
                <return_type>ApplicationStatus</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="halt" super="false">
                            <receiver>
                                <variable name="Throughput"/>
                            </receiver>
                        </data_method_call>
                        <data_method_call method_name="log" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="init" native="false">
                <return_type>ApplicationStatus</return_type>
                <argument name="DL" type="Real"/>
                <argument name="DT" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="NumberOfFirings">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="NumberOfDeadlineMisses">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="NextDeadline">
                            <variable name="DL"/>
                        </assignment>
                        <assignment variable_name="DesiredThroughput">
                            <variable name="DT"/>
                        </assignment>
                        <assignment variable_name="TimeOfLastFiring">
                            <constant type="real">0.0</constant>
                        </assignment>
                        <assignment variable_name="Throughput">
                            <data_method_call method_name="logTo" super="false">
                                <receiver>
                                    <data_method_call method_name="setBatchSize" super="false">
                                        <receiver>
                                            <data_method_call method_name="withParameters" super="false">
                                                <receiver>
                                                    <new data_class="LongRunRateAverage"/>
                                                </receiver>
                                                <argument>
                                                    <constant type="real">0.95</constant>
                                                </argument>
                                                <argument>
                                                    <constant type="real">0.95</constant>
                                                </argument>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <constant type="integer">1000</constant>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                                <argument>
                                    <constant type="string">"Application"</constant>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="log" native="false">
                <return_type>ApplicationStatus</return_type>
                <local_variable name="LogFile" type="FileOut"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="LogFile">
                            <data_method_call method_name="open" super="false">
                                <receiver>
                                    <data_method_call method_name="destination" super="false">
                                        <receiver>
                                            <new data_class="FileOut"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"Application.log"</constant>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="NumberOfFirings"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="write" super="false">
                                    <receiver>
                                        <variable name="LogFile"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"The output actor never fired!"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                            <else>
                                <if>
                                    <condition>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="NumberOfFirings"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <data_method_call method_name="write" super="false">
                                            <receiver>
                                                <variable name="LogFile"/>
                                            </receiver>
                                            <argument>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <binary_operation operator="+">
                                                                    <left_operand>
                                                                        <binary_operation operator="+">
                                                                            <left_operand>
                                                                                <binary_operation operator="+">
                                                                                    <left_operand>
                                                                                        <data_method_call method_name="lf" super="false">
                                                                                            <receiver>
                                                                                                <constant type="string">"Throughput Results: "</constant>
                                                                                            </receiver>
                                                                                        </data_method_call>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <data_method_call method_name="lf" super="false">
                                                                                            <receiver>
                                                                                                <data_method_call method_name="lf" super="false">
                                                                                                    <receiver>
                                                                                                        <data_method_call method_name="logStatistics" super="false">
                                                                                                            <receiver>
                                                                                                                <variable name="Throughput"/>
                                                                                                            </receiver>
                                                                                                        </data_method_call>
                                                                                                    </receiver>
                                                                                                </data_method_call>
                                                                                            </receiver>
                                                                                        </data_method_call>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <data_method_call method_name="printString" super="false">
                                                                                    <receiver>
                                                                                        <sequence_of_expressions>
                                                                                            <binary_operation operator="*">
                                                                                                <left_operand>
                                                                                                    <constant type="integer">100</constant>
                                                                                                </left_operand>
                                                                                                <right_operand>
                                                                                                    <sequence_of_expressions>
                                                                                                        <binary_operation operator="/">
                                                                                                            <left_operand>
                                                                                                                <variable name="NumberOfDeadlineMisses"/>
                                                                                                            </left_operand>
                                                                                                            <right_operand>
                                                                                                                <variable name="NumberOfFirings"/>
                                                                                                            </right_operand>
                                                                                                        </binary_operation>
                                                                                                    </sequence_of_expressions>
                                                                                                </right_operand>
                                                                                            </binary_operation>
                                                                                        </sequence_of_expressions>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <data_method_call method_name="lf" super="false">
                                                                            <receiver>
                                                                                <data_method_call method_name="lf" super="false">
                                                                                    <receiver>
                                                                                        <constant type="string">"% Deadline Misses"</constant>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="string">"Latency: "</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="TimeOfLastFiring"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </right_operand>
                                                </binary_operation>
                                            </argument>
                                        </data_method_call>
                                    </then>
                                    <else>
                                        <data_method_call method_name="write" super="false">
                                            <receiver>
                                                <variable name="LogFile"/>
                                            </receiver>
                                            <argument>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <binary_operation operator="+">
                                                                    <left_operand>
                                                                        <data_method_call method_name="lf" super="false">
                                                                            <receiver>
                                                                                <constant type="string">"Throughput Results: "</constant>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <data_method_call method_name="lf" super="false">
                                                                            <receiver>
                                                                                <data_method_call method_name="lf" super="false">
                                                                                    <receiver>
                                                                                        <data_method_call method_name="logStatistics" super="false">
                                                                                            <receiver>
                                                                                                <variable name="Throughput"/>
                                                                                            </receiver>
                                                                                        </data_method_call>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <sequence_of_expressions>
                                                                            <binary_operation operator="*">
                                                                                <left_operand>
                                                                                    <constant type="integer">100</constant>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <sequence_of_expressions>
                                                                                        <binary_operation operator="/">
                                                                                            <left_operand>
                                                                                                <variable name="NumberOfDeadlineMisses"/>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <variable name="NumberOfFirings"/>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </sequence_of_expressions>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </sequence_of_expressions>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">"% Deadline Misses"</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </argument>
                                        </data_method_call>
                                    </else>
                                </if>
                            </else>
                        </if>
                        <data_method_call method_name="close" super="false">
                            <receiver>
                                <variable name="LogFile"/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="&gt;">
                                <left_operand>
                                    <variable name="NumberOfFirings"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">0</constant>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <if>
                                <condition>
                                    <binary_operation operator="=">
                                        <left_operand>
                                            <variable name="NumberOfFirings"/>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="integer">1</constant>
                                        </right_operand>
                                    </binary_operation>
                                </condition>
                                <then>
                                    <return>
                                        <sequence_of_expressions>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <binary_operation operator="+">
                                                                <left_operand>
                                                                    <binary_operation operator="+">
                                                                        <left_operand>
                                                                            <binary_operation operator="+">
                                                                                <left_operand>
                                                                                    <data_method_call method_name="lf" super="false">
                                                                                        <receiver>
                                                                                            <constant type="string">"Throughput Results: "</constant>
                                                                                        </receiver>
                                                                                    </data_method_call>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <data_method_call method_name="lf" super="false">
                                                                                        <receiver>
                                                                                            <data_method_call method_name="lf" super="false">
                                                                                                <receiver>
                                                                                                    <data_method_call method_name="logStatistics" super="false">
                                                                                                        <receiver>
                                                                                                            <variable name="Throughput"/>
                                                                                                        </receiver>
                                                                                                    </data_method_call>
                                                                                                </receiver>
                                                                                            </data_method_call>
                                                                                        </receiver>
                                                                                    </data_method_call>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <data_method_call method_name="printString" super="false">
                                                                                <receiver>
                                                                                    <sequence_of_expressions>
                                                                                        <binary_operation operator="*">
                                                                                            <left_operand>
                                                                                                <constant type="integer">100</constant>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <sequence_of_expressions>
                                                                                                    <binary_operation operator="/">
                                                                                                        <left_operand>
                                                                                                            <variable name="NumberOfDeadlineMisses"/>
                                                                                                        </left_operand>
                                                                                                        <right_operand>
                                                                                                            <variable name="NumberOfFirings"/>
                                                                                                        </right_operand>
                                                                                                    </binary_operation>
                                                                                                </sequence_of_expressions>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </sequence_of_expressions>
                                                                                </receiver>
                                                                            </data_method_call>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <data_method_call method_name="lf" super="false">
                                                                        <receiver>
                                                                            <data_method_call method_name="lf" super="false">
                                                                                <receiver>
                                                                                    <constant type="string">"% Deadline Misses"</constant>
                                                                                </receiver>
                                                                            </data_method_call>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="string">"Latency: "</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </left_operand>
                                                <right_operand>
                                                    <data_method_call method_name="printString" super="false">
                                                        <receiver>
                                                            <variable name="TimeOfLastFiring"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </return>
                                </then>
                                <else>
                                    <return>
                                        <sequence_of_expressions>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <binary_operation operator="+">
                                                                <left_operand>
                                                                    <data_method_call method_name="lf" super="false">
                                                                        <receiver>
                                                                            <constant type="string">"Throughput Results: "</constant>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <data_method_call method_name="lf" super="false">
                                                                        <receiver>
                                                                            <data_method_call method_name="lf" super="false">
                                                                                <receiver>
                                                                                    <data_method_call method_name="printString" super="false">
                                                                                        <receiver>
                                                                                            <variable name="Throughput"/>
                                                                                        </receiver>
                                                                                    </data_method_call>
                                                                                </receiver>
                                                                            </data_method_call>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </left_operand>
                                                        <right_operand>
                                                            <data_method_call method_name="printString" super="false">
                                                                <receiver>
                                                                    <sequence_of_expressions>
                                                                        <binary_operation operator="*">
                                                                            <left_operand>
                                                                                <constant type="integer">100</constant>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <sequence_of_expressions>
                                                                                    <binary_operation operator="/">
                                                                                        <left_operand>
                                                                                            <variable name="NumberOfDeadlineMisses"/>
                                                                                        </left_operand>
                                                                                        <right_operand>
                                                                                            <variable name="NumberOfFirings"/>
                                                                                        </right_operand>
                                                                                    </binary_operation>
                                                                                </sequence_of_expressions>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </sequence_of_expressions>
                                                                </receiver>
                                                            </data_method_call>
                                                        </right_operand>
                                                    </binary_operation>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="string">"% Deadline Misses"</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </return>
                                </else>
                            </if>
                        </then>
                        <else>
                            <return>
                                <sequence_of_expressions>
                                    <constant type="string">"Waiting for first frame"</constant>
                                </sequence_of_expressions>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="BatteryStatus" native="false">
            <super_class>LongRunTimeAverage</super_class>
            <instance_variable name="NumberOfSamples" type="Integer"/>
            <instance_variable name="ObservedAveragePower" type="Real"/>
            <instance_variable name="ObservedAverageTime" type="Real"/>
            <instance_variable name="PeakPower" type="Real"/>
            <instance_variable name="Power" type="Real"/>
            <instance_variable name="PreviousUpdateTime" type="Real"/>
            <data_method name="init" native="false">
                <return_type>BatteryStatus</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="logTo" super="false">
                            <receiver>
                                <data_method_call method_name="withParameters" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="real">0.95</constant>
                                    </argument>
                                    <argument>
                                        <constant type="real">0.95</constant>
                                    </argument>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <constant type="string">"Battery"</constant>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="Power">
                            <constant type="real">0.0</constant>
                        </assignment>
                        <assignment variable_name="PeakPower">
                            <constant type="real">0.0</constant>
                        </assignment>
                        <assignment variable_name="NumberOfSamples">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="ObservedAveragePower">
                            <constant type="real">0.0</constant>
                        </assignment>
                        <assignment variable_name="ObservedAverageTime">
                            <constant type="real">0.0</constant>
                        </assignment>
                        <assignment variable_name="PreviousUpdateTime">
                            <constant type="real">0.0</constant>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="log" native="false">
                <return_type>BatteryStatus</return_type>
                <local_variable name="BatteryLogFile" type="FileOut"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="BatteryLogFile">
                            <data_method_call method_name="open" super="false">
                                <receiver>
                                    <data_method_call method_name="destination" super="false">
                                        <receiver>
                                            <new data_class="FileOut"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"Battery.log"</constant>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="BatteryLogFile"/>
                            </receiver>
                            <argument>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <constant type="string">"Peak Power Consumption: "</constant>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <variable name="PeakPower"/>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">" Watts\n\n"</constant>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                        </data_method_call>
                        <if>
                            <condition>
                                <sequence_of_expressions>
                                    <binary_operation operator="&lt;">
                                        <left_operand>
                                            <variable name="NumberOfSamples"/>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="integer">20000</constant>
                                        </right_operand>
                                    </binary_operation>
                                </sequence_of_expressions>
                            </condition>
                            <then>
                                <data_method_call method_name="write" super="false">
                                    <receiver>
                                        <variable name="BatteryLogFile"/>
                                    </receiver>
                                    <argument>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <constant type="string">"Observed Average Power: "</constant>
                                                    </left_operand>
                                                    <right_operand>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="/">
                                                                        <left_operand>
                                                                            <variable name="ObservedAveragePower"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <variable name="ObservedAverageTime"/>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </receiver>
                                                        </data_method_call>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="string">" Watts"</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </argument>
                                </data_method_call>
                            </then>
                            <else>
                                <data_method_call method_name="write" super="false">
                                    <receiver>
                                        <variable name="BatteryLogFile"/>
                                    </receiver>
                                    <argument>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <constant type="string">"Statistics for Average Power Consumption:\n"</constant>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="logStatistics" super="false">
                                                    <receiver>
                                                        <self/>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <data_method_call method_name="close" super="false">
                            <receiver>
                                <variable name="BatteryLogFile"/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <local_variable name="PrintString" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="PrintString">
                            <binary_operation operator="+">
                                <left_operand>
                                    <binary_operation operator="+">
                                        <left_operand>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <constant type="string">"Current Power Consumption: "</constant>
                                                        </left_operand>
                                                        <right_operand>
                                                            <data_method_call method_name="printString" super="false">
                                                                <receiver>
                                                                    <variable name="Power"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </right_operand>
                                                    </binary_operation>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="string">" Watts\n\nPeak Power Consumption: "</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </left_operand>
                                        <right_operand>
                                            <data_method_call method_name="printString" super="false">
                                                <receiver>
                                                    <variable name="PeakPower"/>
                                                </receiver>
                                            </data_method_call>
                                        </right_operand>
                                    </binary_operation>
                                </left_operand>
                                <right_operand>
                                    <constant type="string">" Watts\n\n"</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <if>
                            <condition>
                                <sequence_of_expressions>
                                    <binary_operation operator="&lt;">
                                        <left_operand>
                                            <variable name="NumberOfSamples"/>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="integer">20000</constant>
                                        </right_operand>
                                    </binary_operation>
                                </sequence_of_expressions>
                            </condition>
                            <then>
                                <assignment variable_name="PrintString">
                                    <binary_operation operator="+">
                                        <left_operand>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="PrintString"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="string">"Observed Average Power: "</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </left_operand>
                                                <right_operand>
                                                    <data_method_call method_name="printString" super="false">
                                                        <receiver>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="/">
                                                                    <left_operand>
                                                                        <variable name="ObservedAveragePower"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="ObservedAverageTime"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </receiver>
                                                    </data_method_call>
                                                </right_operand>
                                            </binary_operation>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="string">" Watts"</constant>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                            </then>
                            <else>
                                <assignment variable_name="PrintString">
                                    <binary_operation operator="+">
                                        <left_operand>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <variable name="PrintString"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="string">"Statistics for Average Power Consumption:\n"</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </left_operand>
                                        <right_operand>
                                            <data_method_call method_name="printStatistics" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                            </data_method_call>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                            </else>
                        </if>
                        <return>
                            <variable name="PrintString"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="startConsumption" native="false">
                <return_type>BatteryStatus</return_type>
                <argument name="P" type="Real"/>
                <argument name="CurrentTime" type="Real"/>
                <local_variable name="Factor" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="NumberOfSamples">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="NumberOfSamples"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="Factor">
                            <binary_operation operator="/">
                                <left_operand>
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <sequence_of_expressions>
                                                <binary_operation operator="-">
                                                    <left_operand>
                                                        <variable name="NumberOfSamples"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="integer">1</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </receiver>
                                    </data_method_call>
                                </left_operand>
                                <right_operand>
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="NumberOfSamples"/>
                                        </receiver>
                                    </data_method_call>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="ObservedAveragePower">
                            <binary_operation operator="+">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="*">
                                            <left_operand>
                                                <variable name="Factor"/>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="ObservedAveragePower"/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="*">
                                                    <left_operand>
                                                        <variable name="Power"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="-">
                                                                <left_operand>
                                                                    <variable name="CurrentTime"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <variable name="PreviousUpdateTime"/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <data_method_call method_name="asReal" super="false">
                                                <receiver>
                                                    <variable name="NumberOfSamples"/>
                                                </receiver>
                                            </data_method_call>
                                        </right_operand>
                                    </binary_operation>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="ObservedAverageTime">
                            <binary_operation operator="+">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="*">
                                            <left_operand>
                                                <variable name="Factor"/>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="ObservedAverageTime"/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="-">
                                                    <left_operand>
                                                        <variable name="CurrentTime"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <variable name="PreviousUpdateTime"/>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <data_method_call method_name="asReal" super="false">
                                                <receiver>
                                                    <variable name="NumberOfSamples"/>
                                                </receiver>
                                            </data_method_call>
                                        </right_operand>
                                    </binary_operation>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="PreviousUpdateTime">
                            <variable name="CurrentTime"/>
                        </assignment>
                        <assignment variable_name="Power">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="Power"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="P"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="Power"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="PeakPower"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <assignment variable_name="PeakPower">
                                    <variable name="Power"/>
                                </assignment>
                            </then>
                        </if>
                        <data_method_call method_name="rewardBM" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="Power"/>
                            </argument>
                            <argument>
                                <variable name="CurrentTime"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="stopConsumption" native="false">
                <return_type>BatteryStatus</return_type>
                <argument name="P" type="Real"/>
                <argument name="CurrentTime" type="Real"/>
                <local_variable name="Factor" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="NumberOfSamples">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="NumberOfSamples"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="Factor">
                            <binary_operation operator="/">
                                <left_operand>
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <sequence_of_expressions>
                                                <binary_operation operator="-">
                                                    <left_operand>
                                                        <variable name="NumberOfSamples"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="integer">1</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </receiver>
                                    </data_method_call>
                                </left_operand>
                                <right_operand>
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="NumberOfSamples"/>
                                        </receiver>
                                    </data_method_call>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="ObservedAveragePower">
                            <binary_operation operator="+">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="*">
                                            <left_operand>
                                                <variable name="Factor"/>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="ObservedAveragePower"/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="*">
                                                    <left_operand>
                                                        <variable name="Power"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="-">
                                                                <left_operand>
                                                                    <variable name="CurrentTime"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <variable name="PreviousUpdateTime"/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <data_method_call method_name="asReal" super="false">
                                                <receiver>
                                                    <variable name="NumberOfSamples"/>
                                                </receiver>
                                            </data_method_call>
                                        </right_operand>
                                    </binary_operation>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="ObservedAverageTime">
                            <binary_operation operator="+">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="*">
                                            <left_operand>
                                                <variable name="Factor"/>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="ObservedAverageTime"/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="-">
                                                    <left_operand>
                                                        <variable name="CurrentTime"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <variable name="PreviousUpdateTime"/>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </left_operand>
                                        <right_operand>
                                            <data_method_call method_name="asReal" super="false">
                                                <receiver>
                                                    <variable name="NumberOfSamples"/>
                                                </receiver>
                                            </data_method_call>
                                        </right_operand>
                                    </binary_operation>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="PreviousUpdateTime">
                            <variable name="CurrentTime"/>
                        </assignment>
                        <assignment variable_name="Power">
                            <binary_operation operator="-">
                                <left_operand>
                                    <variable name="Power"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="P"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <data_method_call method_name="rewardBM" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="Power"/>
                            </argument>
                            <argument>
                                <variable name="CurrentTime"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Array2D" native="false">
            <super_class>Object</super_class>
            <instance_variable name="RowArray" type="Array"/>
            <instance_variable name="Rows" type="Integer"/>
            <instance_variable name="Columns" type="Integer"/>
            <data_method name="size" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="RowArray"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="resize" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="integer">0</constant>
                                    </argument>
                                    <argument>
                                        <constant type="integer">0</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <binary_operation operator="*">
                                <left_operand>
                                    <variable name="Rows"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="Columns"/>
                                </right_operand>
                            </binary_operation>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="rows" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="RowArray"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="resize" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="integer">0</constant>
                                    </argument>
                                    <argument>
                                        <constant type="integer">0</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <variable name="Rows"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="columns" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="RowArray"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="resize" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="integer">0</constant>
                                    </argument>
                                    <argument>
                                        <constant type="integer">0</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <variable name="Columns"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="resize" native="false">
                <return_type>Array2D</return_type>
                <argument name="R" type="Integer"/>
                <argument name="C" type="Integer"/>
                <local_variable name="I" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <binary_operation operator="|">
                                            <left_operand>
                                                <binary_operation operator="|">
                                                    <left_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="=">
                                                                <left_operand>
                                                                    <variable name="R"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <nil/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <data_method_call method_name="not" super="false">
                                                                <receiver>
                                                                    <data_method_call method_name="isOfType" super="false">
                                                                        <receiver>
                                                                            <variable name="R"/>
                                                                        </receiver>
                                                                        <argument>
                                                                            <constant type="string">"Integer"</constant>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </receiver>
                                                            </data_method_call>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="C"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <nil/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="C"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameters for method \"resize\" of Array2D must be Integers"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="C"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameters for method \"resize\" of Array2D must not be negative"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="RowArray"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="RowArray">
                                        <new data_class="Array"/>
                                    </assignment>
                                    <assignment variable_name="Rows">
                                        <constant type="integer">0</constant>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <assignment variable_name="Columns">
                            <variable name="C"/>
                        </assignment>
                        <data_method_call method_name="resize" super="false">
                            <receiver>
                                <variable name="RowArray"/>
                            </receiver>
                            <argument>
                                <variable name="R"/>
                            </argument>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="Rows"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="R"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <assignment variable_name="Rows">
                                    <variable name="R"/>
                                </assignment>
                            </then>
                        </if>
                        <assignment variable_name="I">
                            <constant type="integer">0</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&lt;">
                                    <left_operand>
                                        <variable name="I"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Rows"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <assignment variable_name="I">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="I"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <data_method_call method_name="resize" super="false">
                                        <receiver>
                                            <data_method_call method_name="at" super="false">
                                                <receiver>
                                                    <variable name="RowArray"/>
                                                </receiver>
                                                <argument>
                                                    <variable name="I"/>
                                                </argument>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <variable name="Columns"/>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <while>
                            <condition>
                                <binary_operation operator="&lt;">
                                    <left_operand>
                                        <variable name="Rows"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="R"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <assignment variable_name="Rows">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="Rows"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <data_method_call method_name="putAt" super="false">
                                        <receiver>
                                            <variable name="RowArray"/>
                                        </receiver>
                                        <argument>
                                            <variable name="Rows"/>
                                        </argument>
                                        <argument>
                                            <data_method_call method_name="resize" super="false">
                                                <receiver>
                                                    <new data_class="Array"/>
                                                </receiver>
                                                <argument>
                                                    <variable name="Columns"/>
                                                </argument>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="at" native="false">
                <return_type>Object</return_type>
                <argument name="R" type="Integer"/>
                <argument name="C" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="RowArray"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="resize" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="integer">0</constant>
                                    </argument>
                                    <argument>
                                        <constant type="integer">0</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <binary_operation operator="|">
                                            <left_operand>
                                                <binary_operation operator="|">
                                                    <left_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="=">
                                                                <left_operand>
                                                                    <variable name="R"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <nil/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <data_method_call method_name="not" super="false">
                                                                <receiver>
                                                                    <data_method_call method_name="isOfType" super="false">
                                                                        <receiver>
                                                                            <variable name="R"/>
                                                                        </receiver>
                                                                        <argument>
                                                                            <constant type="string">"Integer"</constant>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </receiver>
                                                            </data_method_call>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="C"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <nil/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="C"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameters for method \"at\" of Array2D must be Integers"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <binary_operation operator="|">
                                            <left_operand>
                                                <binary_operation operator="|">
                                                    <left_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="&lt;">
                                                                <left_operand>
                                                                    <variable name="R"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <constant type="integer">1</constant>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="&lt;">
                                                                <left_operand>
                                                                    <variable name="C"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <constant type="integer">1</constant>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="&gt;">
                                                        <left_operand>
                                                            <variable name="R"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="Rows"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;">
                                                <left_operand>
                                                    <variable name="C"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Columns"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Index out of bounds for method \"at\" of Array2D"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <data_method_call method_name="at" super="false">
                                <receiver>
                                    <data_method_call method_name="at" super="false">
                                        <receiver>
                                            <variable name="RowArray"/>
                                        </receiver>
                                        <argument>
                                            <variable name="R"/>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                                <argument>
                                    <variable name="C"/>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="putAt" native="false">
                <return_type>Array2D</return_type>
                <argument name="R" type="Integer"/>
                <argument name="C" type="Integer"/>
                <argument name="anObject" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="RowArray"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="resize" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="integer">0</constant>
                                    </argument>
                                    <argument>
                                        <constant type="integer">0</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <binary_operation operator="|">
                                            <left_operand>
                                                <binary_operation operator="|">
                                                    <left_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="=">
                                                                <left_operand>
                                                                    <variable name="R"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <nil/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <data_method_call method_name="not" super="false">
                                                                <receiver>
                                                                    <data_method_call method_name="isOfType" super="false">
                                                                        <receiver>
                                                                            <variable name="R"/>
                                                                        </receiver>
                                                                        <argument>
                                                                            <constant type="string">"Integer"</constant>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </receiver>
                                                            </data_method_call>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="C"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <nil/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="C"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Firt and second parameters for method \"putAt\" of Array2D must be Integers"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <binary_operation operator="|">
                                            <left_operand>
                                                <binary_operation operator="|">
                                                    <left_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="&lt;">
                                                                <left_operand>
                                                                    <variable name="R"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <constant type="integer">1</constant>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="&lt;">
                                                                <left_operand>
                                                                    <variable name="C"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <constant type="integer">1</constant>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="&gt;">
                                                        <left_operand>
                                                            <variable name="R"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="Rows"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;">
                                                <left_operand>
                                                    <variable name="C"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Columns"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Index out of bounds for method \"putAt\" of Array2D"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <data_method_call method_name="putAt" super="false">
                            <receiver>
                                <data_method_call method_name="at" super="false">
                                    <receiver>
                                        <variable name="RowArray"/>
                                    </receiver>
                                    <argument>
                                        <variable name="R"/>
                                    </argument>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <variable name="C"/>
                            </argument>
                            <argument>
                                <variable name="anObject"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="putAll" native="false">
                <return_type>Array2D</return_type>
                <argument name="O" type="Object"/>
                <local_variable name="I" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="RowArray"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="resize" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="integer">0</constant>
                                    </argument>
                                    <argument>
                                        <constant type="integer">0</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="I">
                            <constant type="integer">1</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <variable name="I"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Rows"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="putAll" super="false">
                                        <receiver>
                                            <data_method_call method_name="at" super="false">
                                                <receiver>
                                                    <variable name="RowArray"/>
                                                </receiver>
                                                <argument>
                                                    <variable name="I"/>
                                                </argument>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <variable name="O"/>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="I">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="I"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <local_variable name="Out" type="String"/>
                <local_variable name="I" type="Integer"/>
                <local_variable name="J" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="RowArray"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="resize" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="integer">0</constant>
                                    </argument>
                                    <argument>
                                        <constant type="integer">0</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="Rows"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="Columns"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="Out">
                                        <data_method_call method_name="concat" super="false">
                                            <receiver>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="concat" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="concat" super="false">
                                                                    <receiver>
                                                                        <constant type="string">"Array2D["</constant>
                                                                    </receiver>
                                                                    <argument>
                                                                        <data_method_call method_name="printString" super="false">
                                                                            <receiver>
                                                                                <variable name="Rows"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">","</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="Columns"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <constant type="string">"]:\n"</constant>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                    <assignment variable_name="I">
                                        <constant type="integer">0</constant>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="I"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Rows"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="I">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="I"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <assignment variable_name="J">
                                                    <constant type="integer">0</constant>
                                                </assignment>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <variable name="Out"/>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"["</constant>
                                                    </argument>
                                                </data_method_call>
                                                <while>
                                                    <condition>
                                                        <binary_operation operator="&lt;">
                                                            <left_operand>
                                                                <variable name="J"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Columns"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </condition>
                                                    <body>
                                                        <sequence_of_expressions>
                                                            <assignment variable_name="J">
                                                                <binary_operation operator="+">
                                                                    <left_operand>
                                                                        <variable name="J"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <constant type="integer">1</constant>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </assignment>
                                                            <data_method_call method_name="concat" super="false">
                                                                <receiver>
                                                                    <variable name="Out"/>
                                                                </receiver>
                                                                <argument>
                                                                    <data_method_call method_name="printString" super="false">
                                                                        <receiver>
                                                                            <data_method_call method_name="at" super="false">
                                                                                <receiver>
                                                                                    <data_method_call method_name="at" super="false">
                                                                                        <receiver>
                                                                                            <variable name="RowArray"/>
                                                                                        </receiver>
                                                                                        <argument>
                                                                                            <variable name="I"/>
                                                                                        </argument>
                                                                                    </data_method_call>
                                                                                </receiver>
                                                                                <argument>
                                                                                    <variable name="J"/>
                                                                                </argument>
                                                                            </data_method_call>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </argument>
                                                            </data_method_call>
                                                            <if>
                                                                <condition>
                                                                    <binary_operation operator="&lt;">
                                                                        <left_operand>
                                                                            <variable name="J"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <variable name="Columns"/>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </condition>
                                                                <then>
                                                                    <data_method_call method_name="concat" super="false">
                                                                        <receiver>
                                                                            <variable name="Out"/>
                                                                        </receiver>
                                                                        <argument>
                                                                            <constant type="string">", "</constant>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </then>
                                                            </if>
                                                        </sequence_of_expressions>
                                                    </body>
                                                </while>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <variable name="Out"/>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"]\n"</constant>
                                                    </argument>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <assignment variable_name="Out">
                                    <constant type="string">"Array2D[0,0]"</constant>
                                </assignment>
                            </else>
                        </if>
                        <return>
                            <variable name="Out"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Queue" native="false">
            <super_class>Object</super_class>
            <instance_variable name="Occupation" type="Integer"/>
            <instance_variable name="Size" type="Integer"/>
            <instance_variable name="Root" type="StructureElement"/>
            <data_method name="clear" native="false">
                <return_type>Queue</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Root">
                            <new data_class="StructureElement"/>
                        </assignment>
                        <data_method_call method_name="setPrevious" super="false">
                            <receiver>
                                <data_method_call method_name="setNext" super="false">
                                    <receiver>
                                        <variable name="Root"/>
                                    </receiver>
                                    <argument>
                                        <variable name="Root"/>
                                    </argument>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <variable name="Root"/>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="Occupation">
                            <constant type="integer">0</constant>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="resize" native="false">
                <return_type>Queue</return_type>
                <argument name="S" type="Integer"/>
                <local_variable name="R" type="StructureElement"/>
                <local_variable name="C" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <data_method_call method_name="not" super="false">
                                    <receiver>
                                        <data_method_call method_name="isOfType" super="false">
                                            <receiver>
                                                <variable name="S"/>
                                            </receiver>
                                            <argument>
                                                <constant type="string">"Integer"</constant>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for method \"resize\" of Queue must be an Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="S"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">1</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"Parameter for method \"resize\" of Queue must be positive"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <if>
                                        <condition>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Occupation"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <assignment variable_name="Occupation">
                                                    <variable name="S"/>
                                                </assignment>
                                                <assignment variable_name="C">
                                                    <variable name="S"/>
                                                </assignment>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="Root"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                                <assignment variable_name="C">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="C"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <while>
                                                    <condition>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="C"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">0</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </condition>
                                                    <body>
                                                        <sequence_of_expressions>
                                                            <assignment variable_name="R">
                                                                <data_method_call method_name="next" super="false">
                                                                    <receiver>
                                                                        <variable name="R"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </assignment>
                                                            <assignment variable_name="C">
                                                                <binary_operation operator="-">
                                                                    <left_operand>
                                                                        <variable name="C"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <constant type="integer">1</constant>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </assignment>
                                                        </sequence_of_expressions>
                                                    </body>
                                                </while>
                                                <data_method_call method_name="setNext" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="Root"/>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setPrevious" super="false">
                                                    <receiver>
                                                        <variable name="Root"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="R"/>
                                                    </argument>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <assignment variable_name="Size">
                            <variable name="S"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="size" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <variable name="Size"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="occupation" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <variable name="Occupation"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="isEmpty" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="Occupation"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">0</constant>
                                </right_operand>
                            </binary_operation>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="isFull" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <if>
                                <condition>
                                    <binary_operation operator="=">
                                        <left_operand>
                                            <variable name="Size"/>
                                        </left_operand>
                                        <right_operand>
                                            <nil/>
                                        </right_operand>
                                    </binary_operation>
                                </condition>
                                <then>
                                    <constant type="boolean">false</constant>
                                </then>
                                <else>
                                    <binary_operation operator="=">
                                        <left_operand>
                                            <variable name="Occupation"/>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="Size"/>
                                        </right_operand>
                                    </binary_operation>
                                </else>
                            </if>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="excludes" native="false">
                <return_type>Boolean</return_type>
                <argument name="O" type="Object"/>
                <body_expression>
                    <return>
                        <data_method_call method_name="not" super="false">
                            <receiver>
                                <data_method_call method_name="includes" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <variable name="O"/>
                                    </argument>
                                </data_method_call>
                            </receiver>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="includes" native="false">
                <return_type>Boolean</return_type>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="StructureElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="NF">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="NF"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="element" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="O"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <assignment variable_name="NF">
                                                <constant type="boolean">false</constant>
                                            </assignment>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <data_method_call method_name="not" super="false">
                                <receiver>
                                    <variable name="NF"/>
                                </receiver>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="count" native="false">
                <return_type>Integer</return_type>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="StructureElement"/>
                <local_variable name="C" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="C">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="element" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="O"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <assignment variable_name="C">
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="C"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="integer">1</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </assignment>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="C"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="add" native="false">
                <return_type>Queue</return_type>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="StructureElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <if>
                                    <condition>
                                        <binary_operation operator="&lt;">
                                            <left_operand>
                                                <variable name="Occupation"/>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="Size"/>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <sequence_of_expressions>
                                            <assignment variable_name="R">
                                                <data_method_call method_name="setElement" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="setPrevious" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="setNext" super="false">
                                                                    <receiver>
                                                                        <new data_class="StructureElement"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <variable name="Root"/>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                            <argument>
                                                                <data_method_call method_name="previous" super="false">
                                                                    <receiver>
                                                                        <variable name="Root"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="O"/>
                                                    </argument>
                                                </data_method_call>
                                            </assignment>
                                            <data_method_call method_name="setNext" super="false">
                                                <receiver>
                                                    <data_method_call method_name="previous" super="false">
                                                        <receiver>
                                                            <variable name="Root"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <variable name="R"/>
                                                </argument>
                                            </data_method_call>
                                            <data_method_call method_name="setPrevious" super="false">
                                                <receiver>
                                                    <variable name="Root"/>
                                                </receiver>
                                                <argument>
                                                    <variable name="R"/>
                                                </argument>
                                            </data_method_call>
                                            <assignment variable_name="Occupation">
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="Occupation"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="integer">1</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </assignment>
                                        </sequence_of_expressions>
                                    </then>
                                </if>
                            </then>
                            <else>
                                <sequence_of_expressions>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="setElement" super="false">
                                            <receiver>
                                                <data_method_call method_name="setPrevious" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="setNext" super="false">
                                                            <receiver>
                                                                <new data_class="StructureElement"/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="Root"/>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="Root"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <variable name="O"/>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                    <data_method_call method_name="setNext" super="false">
                                        <receiver>
                                            <data_method_call method_name="previous" super="false">
                                                <receiver>
                                                    <variable name="Root"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <variable name="R"/>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setPrevious" super="false">
                                        <receiver>
                                            <variable name="Root"/>
                                        </receiver>
                                        <argument>
                                            <variable name="R"/>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="Occupation">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="Occupation"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </else>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="inspect" native="false">
                <return_type>Object</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <if>
                                <condition>
                                    <binary_operation operator="!=">
                                        <left_operand>
                                            <variable name="Occupation"/>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="integer">0</constant>
                                        </right_operand>
                                    </binary_operation>
                                </condition>
                                <then>
                                    <data_method_call method_name="element" super="false">
                                        <receiver>
                                            <data_method_call method_name="next" super="false">
                                                <receiver>
                                                    <variable name="Root"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                    </data_method_call>
                                </then>
                                <else>
                                    <nil/>
                                </else>
                            </if>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="remove" native="false">
                <return_type>Object</return_type>
                <local_variable name="R" type="StructureElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Occupation"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="Occupation">
                                        <binary_operation operator="-">
                                            <left_operand>
                                                <variable name="Occupation"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <data_method_call method_name="setNext" super="false">
                                        <receiver>
                                            <variable name="Root"/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="next" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setPrevious" super="false">
                                        <receiver>
                                            <data_method_call method_name="next" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <variable name="Root"/>
                                        </argument>
                                    </data_method_call>
                                    <return>
                                        <data_method_call method_name="element" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </return>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <return>
                                    <nil/>
                                </return>
                            </else>
                        </if>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <local_variable name="PrintOut" type="String"/>
                <local_variable name="R" type="StructureElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Occupation"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="PrintOut">
                                        <constant type="string">"Empty "</constant>
                                    </assignment>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="Size"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <variable name="PrintOut"/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"Unbounded "</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <data_method_call method_name="concat" super="false">
                                        <receiver>
                                            <variable name="PrintOut"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"Queue"</constant>
                                        </argument>
                                    </data_method_call>
                                    <if>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="Size"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <data_method_call method_name="concat" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="concat" super="false">
                                                                <receiver>
                                                                    <variable name="PrintOut"/>
                                                                </receiver>
                                                                <argument>
                                                                    <constant type="string">" [Size = "</constant>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <data_method_call method_name="printString" super="false">
                                                                <receiver>
                                                                    <variable name="Size"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"]"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <sequence_of_expressions>
                                    <assignment variable_name="PrintOut">
                                        <constant type="string">""</constant>
                                    </assignment>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="Size"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <variable name="PrintOut"/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"Unbounded "</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <data_method_call method_name="concat" super="false">
                                        <receiver>
                                            <variable name="PrintOut"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"Queue"</constant>
                                        </argument>
                                    </data_method_call>
                                    <if>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="Size"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <data_method_call method_name="concat" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="concat" super="false">
                                                                <receiver>
                                                                    <variable name="PrintOut"/>
                                                                </receiver>
                                                                <argument>
                                                                    <constant type="string">" [Size = "</constant>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <data_method_call method_name="printString" super="false">
                                                                <receiver>
                                                                    <variable name="Size"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"] {"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                        <else>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <variable name="PrintOut"/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">" {"</constant>
                                                </argument>
                                            </data_method_call>
                                        </else>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <variable name="PrintOut"/>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <if>
                                                    <condition>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <data_method_call method_name="next" super="false">
                                                                    <receiver>
                                                                        <variable name="R"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </condition>
                                                    <then>
                                                        <data_method_call method_name="concat" super="false">
                                                            <receiver>
                                                                <variable name="PrintOut"/>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">", "</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </then>
                                                </if>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <data_method_call method_name="concat" super="false">
                                        <receiver>
                                            <variable name="PrintOut"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"}"</constant>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </else>
                        </if>
                        <return>
                            <variable name="PrintOut"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Stack" native="false">
            <super_class>Object</super_class>
            <instance_variable name="Occupation" type="Integer"/>
            <instance_variable name="Size" type="Integer"/>
            <instance_variable name="Root" type="StructureElement"/>
            <data_method name="clear" native="false">
                <return_type>Stack</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Root">
                            <new data_class="StructureElement"/>
                        </assignment>
                        <data_method_call method_name="setPrevious" super="false">
                            <receiver>
                                <data_method_call method_name="setNext" super="false">
                                    <receiver>
                                        <variable name="Root"/>
                                    </receiver>
                                    <argument>
                                        <variable name="Root"/>
                                    </argument>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <variable name="Root"/>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="Occupation">
                            <constant type="integer">0</constant>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="resize" native="false">
                <return_type>Stack</return_type>
                <argument name="S" type="Integer"/>
                <local_variable name="R" type="StructureElement"/>
                <local_variable name="C" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <data_method_call method_name="not" super="false">
                                    <receiver>
                                        <data_method_call method_name="isOfType" super="false">
                                            <receiver>
                                                <variable name="S"/>
                                            </receiver>
                                            <argument>
                                                <constant type="string">"Integer"</constant>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for method \"resize\" of Stack must be an Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="S"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">1</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"Parameter for method \"resize\" of Stack must be positive"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <if>
                                        <condition>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Occupation"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <assignment variable_name="Occupation">
                                                    <variable name="S"/>
                                                </assignment>
                                                <assignment variable_name="C">
                                                    <variable name="S"/>
                                                </assignment>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="Root"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                                <assignment variable_name="C">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="C"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <while>
                                                    <condition>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="C"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">0</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </condition>
                                                    <body>
                                                        <sequence_of_expressions>
                                                            <assignment variable_name="R">
                                                                <data_method_call method_name="next" super="false">
                                                                    <receiver>
                                                                        <variable name="R"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </assignment>
                                                            <assignment variable_name="C">
                                                                <binary_operation operator="-">
                                                                    <left_operand>
                                                                        <variable name="C"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <constant type="integer">1</constant>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </assignment>
                                                        </sequence_of_expressions>
                                                    </body>
                                                </while>
                                                <data_method_call method_name="setNext" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="Root"/>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setPrevious" super="false">
                                                    <receiver>
                                                        <variable name="Root"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="R"/>
                                                    </argument>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <assignment variable_name="Size">
                            <variable name="S"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="size" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <variable name="Size"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="occupation" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <variable name="Occupation"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="isEmpty" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="Occupation"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">0</constant>
                                </right_operand>
                            </binary_operation>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="isFull" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <if>
                                <condition>
                                    <binary_operation operator="=">
                                        <left_operand>
                                            <variable name="Size"/>
                                        </left_operand>
                                        <right_operand>
                                            <nil/>
                                        </right_operand>
                                    </binary_operation>
                                </condition>
                                <then>
                                    <constant type="boolean">false</constant>
                                </then>
                                <else>
                                    <binary_operation operator="=">
                                        <left_operand>
                                            <variable name="Occupation"/>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="Size"/>
                                        </right_operand>
                                    </binary_operation>
                                </else>
                            </if>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="excludes" native="false">
                <return_type>Boolean</return_type>
                <argument name="O" type="Object"/>
                <body_expression>
                    <return>
                        <data_method_call method_name="not" super="false">
                            <receiver>
                                <data_method_call method_name="includes" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <variable name="O"/>
                                    </argument>
                                </data_method_call>
                            </receiver>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="includes" native="false">
                <return_type>Boolean</return_type>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="StructureElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="NF">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="NF"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="element" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="O"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <assignment variable_name="NF">
                                                <constant type="boolean">false</constant>
                                            </assignment>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <data_method_call method_name="not" super="false">
                                <receiver>
                                    <variable name="NF"/>
                                </receiver>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="count" native="false">
                <return_type>Integer</return_type>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="StructureElement"/>
                <local_variable name="C" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="C">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="element" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="O"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <assignment variable_name="C">
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="C"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="integer">1</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </assignment>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="C"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="push" native="false">
                <return_type>Stack</return_type>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="StructureElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <if>
                                    <condition>
                                        <binary_operation operator="&lt;">
                                            <left_operand>
                                                <variable name="Occupation"/>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="Size"/>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <sequence_of_expressions>
                                            <assignment variable_name="R">
                                                <data_method_call method_name="setElement" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="setPrevious" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="setNext" super="false">
                                                                    <receiver>
                                                                        <new data_class="StructureElement"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <variable name="Root"/>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                            <argument>
                                                                <data_method_call method_name="previous" super="false">
                                                                    <receiver>
                                                                        <variable name="Root"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="O"/>
                                                    </argument>
                                                </data_method_call>
                                            </assignment>
                                            <data_method_call method_name="setNext" super="false">
                                                <receiver>
                                                    <data_method_call method_name="previous" super="false">
                                                        <receiver>
                                                            <variable name="Root"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <variable name="R"/>
                                                </argument>
                                            </data_method_call>
                                            <data_method_call method_name="setPrevious" super="false">
                                                <receiver>
                                                    <variable name="Root"/>
                                                </receiver>
                                                <argument>
                                                    <variable name="R"/>
                                                </argument>
                                            </data_method_call>
                                            <assignment variable_name="Occupation">
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="Occupation"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="integer">1</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </assignment>
                                        </sequence_of_expressions>
                                    </then>
                                </if>
                            </then>
                            <else>
                                <sequence_of_expressions>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="setElement" super="false">
                                            <receiver>
                                                <data_method_call method_name="setPrevious" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="setNext" super="false">
                                                            <receiver>
                                                                <new data_class="StructureElement"/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="Root"/>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="Root"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <variable name="O"/>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                    <data_method_call method_name="setNext" super="false">
                                        <receiver>
                                            <data_method_call method_name="previous" super="false">
                                                <receiver>
                                                    <variable name="Root"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <variable name="R"/>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setPrevious" super="false">
                                        <receiver>
                                            <variable name="Root"/>
                                        </receiver>
                                        <argument>
                                            <variable name="R"/>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="Occupation">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="Occupation"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </else>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="inspect" native="false">
                <return_type>Object</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <if>
                                <condition>
                                    <binary_operation operator="!=">
                                        <left_operand>
                                            <variable name="Occupation"/>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="integer">0</constant>
                                        </right_operand>
                                    </binary_operation>
                                </condition>
                                <then>
                                    <data_method_call method_name="element" super="false">
                                        <receiver>
                                            <data_method_call method_name="previous" super="false">
                                                <receiver>
                                                    <variable name="Root"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                    </data_method_call>
                                </then>
                                <else>
                                    <nil/>
                                </else>
                            </if>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="pop" native="false">
                <return_type>Object</return_type>
                <local_variable name="R" type="StructureElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Occupation"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="Occupation">
                                        <binary_operation operator="-">
                                            <left_operand>
                                                <variable name="Occupation"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="previous" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <data_method_call method_name="setPrevious" super="false">
                                        <receiver>
                                            <variable name="Root"/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="previous" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setNext" super="false">
                                        <receiver>
                                            <data_method_call method_name="previous" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <variable name="Root"/>
                                        </argument>
                                    </data_method_call>
                                    <return>
                                        <data_method_call method_name="element" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </return>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <return>
                                    <nil/>
                                </return>
                            </else>
                        </if>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <local_variable name="PrintOut" type="String"/>
                <local_variable name="R" type="StructureElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Occupation"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="PrintOut">
                                        <constant type="string">"Empty "</constant>
                                    </assignment>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="Size"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <variable name="PrintOut"/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"Unbounded "</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <data_method_call method_name="concat" super="false">
                                        <receiver>
                                            <variable name="PrintOut"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"Stack"</constant>
                                        </argument>
                                    </data_method_call>
                                    <if>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="Size"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <data_method_call method_name="concat" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="concat" super="false">
                                                                <receiver>
                                                                    <variable name="PrintOut"/>
                                                                </receiver>
                                                                <argument>
                                                                    <constant type="string">" [Size = "</constant>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <data_method_call method_name="printString" super="false">
                                                                <receiver>
                                                                    <variable name="Size"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"]"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <sequence_of_expressions>
                                    <assignment variable_name="PrintOut">
                                        <constant type="string">""</constant>
                                    </assignment>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="Size"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <variable name="PrintOut"/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"Unbounded "</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <data_method_call method_name="concat" super="false">
                                        <receiver>
                                            <variable name="PrintOut"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"Stack"</constant>
                                        </argument>
                                    </data_method_call>
                                    <if>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="Size"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <data_method_call method_name="concat" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="concat" super="false">
                                                                <receiver>
                                                                    <variable name="PrintOut"/>
                                                                </receiver>
                                                                <argument>
                                                                    <constant type="string">" [Size = "</constant>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <data_method_call method_name="printString" super="false">
                                                                <receiver>
                                                                    <variable name="Size"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"] {"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                        <else>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <variable name="PrintOut"/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">" {"</constant>
                                                </argument>
                                            </data_method_call>
                                        </else>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <variable name="PrintOut"/>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <if>
                                                    <condition>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <data_method_call method_name="next" super="false">
                                                                    <receiver>
                                                                        <variable name="R"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </condition>
                                                    <then>
                                                        <data_method_call method_name="concat" super="false">
                                                            <receiver>
                                                                <variable name="PrintOut"/>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">", "</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </then>
                                                </if>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <data_method_call method_name="concat" super="false">
                                        <receiver>
                                            <variable name="PrintOut"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"}"</constant>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </else>
                        </if>
                        <return>
                            <variable name="PrintOut"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Map" native="false">
            <super_class>Object</super_class>
            <instance_variable name="Size" type="Integer"/>
            <instance_variable name="Root" type="MapElement"/>
            <data_method name="clear" native="false">
                <return_type>Map</return_type>
                <local_variable name="R" type="MapElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="setRemoved" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="boolean">true</constant>
                                                    </argument>
                                                </data_method_call>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <assignment variable_name="Root">
                                    <data_method_call method_name="setRemoved" super="false">
                                        <receiver>
                                            <new data_class="MapElement"/>
                                        </receiver>
                                        <argument>
                                            <constant type="boolean">false</constant>
                                        </argument>
                                    </data_method_call>
                                </assignment>
                            </else>
                        </if>
                        <data_method_call method_name="setPrevious" super="false">
                            <receiver>
                                <data_method_call method_name="setNext" super="false">
                                    <receiver>
                                        <variable name="Root"/>
                                    </receiver>
                                    <argument>
                                        <variable name="Root"/>
                                    </argument>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <variable name="Root"/>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="Size">
                            <constant type="integer">0</constant>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="isEmpty" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="Size"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">0</constant>
                                </right_operand>
                            </binary_operation>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="size" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <variable name="Size"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="iterator" native="false">
                <return_type>MapIterator</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <data_method_call method_name="referringTo" super="false">
                                <receiver>
                                    <new data_class="MapIterator"/>
                                </receiver>
                                <argument>
                                    <self/>
                                </argument>
                                <argument>
                                    <data_method_call method_name="next" super="false">
                                        <receiver>
                                            <variable name="Root"/>
                                        </receiver>
                                    </data_method_call>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="includesKey" native="false">
                <return_type>Boolean</return_type>
                <argument name="K" type="Object"/>
                <local_variable name="R" type="MapElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="NF">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="NF"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="key" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="K"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <assignment variable_name="NF">
                                                <constant type="boolean">false</constant>
                                            </assignment>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <data_method_call method_name="not" super="false">
                                <receiver>
                                    <variable name="NF"/>
                                </receiver>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="includesValue" native="false">
                <return_type>Boolean</return_type>
                <argument name="V" type="Object"/>
                <local_variable name="R" type="MapElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="NF">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="NF"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="value" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="V"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <assignment variable_name="NF">
                                                <constant type="boolean">false</constant>
                                            </assignment>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <data_method_call method_name="not" super="false">
                                <receiver>
                                    <variable name="NF"/>
                                </receiver>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="keys" native="false">
                <return_type>Set</return_type>
                <local_variable name="R" type="MapElement"/>
                <local_variable name="S" type="Set"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="S">
                            <data_method_call method_name="clear" super="false">
                                <receiver>
                                    <new data_class="Set"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="add" super="false">
                                        <receiver>
                                            <variable name="S"/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="key" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="S"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="values" native="false">
                <return_type>Bag</return_type>
                <local_variable name="R" type="MapElement"/>
                <local_variable name="B" type="Bag"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="B">
                            <data_method_call method_name="clear" super="false">
                                <receiver>
                                    <new data_class="Bag"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="add" super="false">
                                        <receiver>
                                            <variable name="B"/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="value" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="B"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="putAt" native="false">
                <return_type>Map</return_type>
                <argument name="Key" type="Object"/>
                <argument name="Value" type="Object"/>
                <local_variable name="R" type="MapElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="NF">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="NF"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="key" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Key"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="setValue" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="Value"/>
                                                    </argument>
                                                </data_method_call>
                                                <assignment variable_name="NF">
                                                    <constant type="boolean">false</constant>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <if>
                            <condition>
                                <variable name="NF"/>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="setValue" super="false">
                                            <receiver>
                                                <data_method_call method_name="setKey" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="setRemoved" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="setPrevious" super="false">
                                                                    <receiver>
                                                                        <data_method_call method_name="setNext" super="false">
                                                                            <receiver>
                                                                                <new data_class="MapElement"/>
                                                                            </receiver>
                                                                            <argument>
                                                                                <variable name="Root"/>
                                                                            </argument>
                                                                        </data_method_call>
                                                                    </receiver>
                                                                    <argument>
                                                                        <data_method_call method_name="previous" super="false">
                                                                            <receiver>
                                                                                <variable name="Root"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="boolean">false</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="Key"/>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <variable name="Value"/>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                    <data_method_call method_name="setNext" super="false">
                                        <receiver>
                                            <data_method_call method_name="previous" super="false">
                                                <receiver>
                                                    <variable name="Root"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <variable name="R"/>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setPrevious" super="false">
                                        <receiver>
                                            <variable name="Root"/>
                                        </receiver>
                                        <argument>
                                            <variable name="R"/>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="Size">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="Size"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="at" native="false">
                <return_type>Object</return_type>
                <argument name="Key" type="Object"/>
                <local_variable name="R" type="MapElement"/>
                <local_variable name="NF" type="Boolean"/>
                <local_variable name="Value" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="NF">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <assignment variable_name="Value">
                            <nil/>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="NF"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="key" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Key"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <assignment variable_name="Value">
                                                    <data_method_call method_name="value" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                                <assignment variable_name="NF">
                                                    <constant type="boolean">false</constant>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="Value"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="removeAt" native="false">
                <return_type>Map</return_type>
                <argument name="Key" type="Object"/>
                <local_variable name="R" type="MapElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="NF">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="NF"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="key" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Key"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <assignment variable_name="NF">
                                                    <constant type="boolean">false</constant>
                                                </assignment>
                                                <data_method_call method_name="setRemoved" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="boolean">true</constant>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setPrevious" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="next" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setNext" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="next" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <assignment variable_name="Size">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="Size"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <local_variable name="R" type="MapElement"/>
                <local_variable name="PrintOut" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <assignment variable_name="PrintOut">
                                    <constant type="string">"Empty Map"</constant>
                                </assignment>
                            </then>
                            <else>
                                <sequence_of_expressions>
                                    <assignment variable_name="PrintOut">
                                        <constant type="string">"Map{"</constant>
                                    </assignment>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <variable name="PrintOut"/>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <if>
                                                    <condition>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <data_method_call method_name="next" super="false">
                                                                    <receiver>
                                                                        <variable name="R"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </condition>
                                                    <then>
                                                        <data_method_call method_name="concat" super="false">
                                                            <receiver>
                                                                <variable name="PrintOut"/>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">", "</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </then>
                                                </if>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <data_method_call method_name="concat" super="false">
                                        <receiver>
                                            <variable name="PrintOut"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"}"</constant>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </else>
                        </if>
                        <return>
                            <variable name="PrintOut"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="resize" native="false">
                <return_type>Map</return_type>
                <argument name="S" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Size">
                            <variable name="S"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="root" native="false">
                <return_type>MapElement</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <variable name="Root"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="=" native="false">
                <return_type>Boolean</return_type>
                <argument name="M" type="Object"/>
                <local_variable name="R" type="MapElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="&amp;">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="!=">
                                            <left_operand>
                                                <variable name="M"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <data_method_call method_name="isOfType" super="false">
                                        <receiver>
                                            <variable name="M"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"Map"</constant>
                                        </argument>
                                    </data_method_call>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <sequence_of_expressions>
                                <if>
                                    <condition>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="Root"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <data_method_call method_name="clear" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                        </data_method_call>
                                    </then>
                                </if>
                                <assignment variable_name="NF">
                                    <binary_operation operator="=">
                                        <left_operand>
                                            <variable name="Size"/>
                                        </left_operand>
                                        <right_operand>
                                            <data_method_call method_name="size" super="false">
                                                <receiver>
                                                    <variable name="M"/>
                                                </receiver>
                                            </data_method_call>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                                <if>
                                    <condition>
                                        <binary_operation operator="&amp;">
                                            <left_operand>
                                                <variable name="NF"/>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="!=">
                                                        <left_operand>
                                                            <variable name="Size"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">0</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <sequence_of_expressions>
                                            <assignment variable_name="R">
                                                <data_method_call method_name="next" super="false">
                                                    <receiver>
                                                        <variable name="Root"/>
                                                    </receiver>
                                                </data_method_call>
                                            </assignment>
                                            <while>
                                                <condition>
                                                    <binary_operation operator="&amp;">
                                                        <left_operand>
                                                            <variable name="NF"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="!=">
                                                                    <left_operand>
                                                                        <variable name="R"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="Root"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </right_operand>
                                                    </binary_operation>
                                                </condition>
                                                <body>
                                                    <sequence_of_expressions>
                                                        <if>
                                                            <condition>
                                                                <binary_operation operator="!=">
                                                                    <left_operand>
                                                                        <data_method_call method_name="value" super="false">
                                                                            <receiver>
                                                                                <variable name="R"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <nil/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </condition>
                                                            <then>
                                                                <assignment variable_name="NF">
                                                                    <binary_operation operator="=">
                                                                        <left_operand>
                                                                            <data_method_call method_name="at" super="false">
                                                                                <receiver>
                                                                                    <variable name="M"/>
                                                                                </receiver>
                                                                                <argument>
                                                                                    <data_method_call method_name="key" super="false">
                                                                                        <receiver>
                                                                                            <variable name="R"/>
                                                                                        </receiver>
                                                                                    </data_method_call>
                                                                                </argument>
                                                                            </data_method_call>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <data_method_call method_name="value" super="false">
                                                                                <receiver>
                                                                                    <variable name="R"/>
                                                                                </receiver>
                                                                            </data_method_call>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </assignment>
                                                            </then>
                                                            <else>
                                                                <assignment variable_name="NF">
                                                                    <binary_operation operator="&amp;">
                                                                        <left_operand>
                                                                            <data_method_call method_name="includesKey" super="false">
                                                                                <receiver>
                                                                                    <variable name="M"/>
                                                                                </receiver>
                                                                                <argument>
                                                                                    <data_method_call method_name="key" super="false">
                                                                                        <receiver>
                                                                                            <variable name="R"/>
                                                                                        </receiver>
                                                                                    </data_method_call>
                                                                                </argument>
                                                                            </data_method_call>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <sequence_of_expressions>
                                                                                <binary_operation operator="=">
                                                                                    <left_operand>
                                                                                        <data_method_call method_name="at" super="false">
                                                                                            <receiver>
                                                                                                <variable name="M"/>
                                                                                            </receiver>
                                                                                            <argument>
                                                                                                <data_method_call method_name="key" super="false">
                                                                                                    <receiver>
                                                                                                        <variable name="R"/>
                                                                                                    </receiver>
                                                                                                </data_method_call>
                                                                                            </argument>
                                                                                        </data_method_call>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <nil/>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </sequence_of_expressions>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </assignment>
                                                            </else>
                                                        </if>
                                                        <assignment variable_name="R">
                                                            <data_method_call method_name="next" super="false">
                                                                <receiver>
                                                                    <variable name="R"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </assignment>
                                                    </sequence_of_expressions>
                                                </body>
                                            </while>
                                        </sequence_of_expressions>
                                    </then>
                                </if>
                                <return>
                                    <variable name="NF"/>
                                </return>
                            </sequence_of_expressions>
                        </then>
                        <else>
                            <return>
                                <constant type="boolean">false</constant>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="!=" native="false">
                <return_type>Boolean</return_type>
                <argument name="M" type="Object"/>
                <body_expression>
                    <return>
                        <unary_operation operator="!">
                            <operand>
                                <sequence_of_expressions>
                                    <binary_operation operator="=">
                                        <left_operand>
                                            <self/>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="M"/>
                                        </right_operand>
                                    </binary_operation>
                                </sequence_of_expressions>
                            </operand>
                        </unary_operation>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Collection" native="false">
            <super_class>Object</super_class>
            <instance_variable name="Root" type="CollectionElement"/>
            <instance_variable name="Size" type="Integer"/>
            <data_method name="clear" native="false">
                <return_type>Collection</return_type>
                <local_variable name="R" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="setRemoved" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="boolean">true</constant>
                                                    </argument>
                                                </data_method_call>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <assignment variable_name="Root">
                                    <data_method_call method_name="setRemoved" super="false">
                                        <receiver>
                                            <data_method_call method_name="setCount" super="false">
                                                <receiver>
                                                    <new data_class="CollectionElement"/>
                                                </receiver>
                                                <argument>
                                                    <constant type="integer">0</constant>
                                                </argument>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <constant type="boolean">false</constant>
                                        </argument>
                                    </data_method_call>
                                </assignment>
                            </else>
                        </if>
                        <data_method_call method_name="setPrevious" super="false">
                            <receiver>
                                <data_method_call method_name="setNext" super="false">
                                    <receiver>
                                        <variable name="Root"/>
                                    </receiver>
                                    <argument>
                                        <variable name="Root"/>
                                    </argument>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <variable name="Root"/>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="Size">
                            <constant type="integer">0</constant>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="isEmpty" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="Size"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">0</constant>
                                </right_operand>
                            </binary_operation>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="size" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <variable name="Size"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="excludes" native="false">
                <return_type>Boolean</return_type>
                <argument name="O" type="Object"/>
                <body_expression>
                    <return>
                        <data_method_call method_name="not" super="false">
                            <receiver>
                                <data_method_call method_name="includes" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <variable name="O"/>
                                    </argument>
                                </data_method_call>
                            </receiver>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="excludesAll" native="false">
                <return_type>Boolean</return_type>
                <argument name="C" type="Collection"/>
                <local_variable name="I" type="CollectionIterator"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="C"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="C"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Collection"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter of method \"excludesAll\" for Collection should be a Collection"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="NF">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="I">
                                        <data_method_call method_name="iterator" super="false">
                                            <receiver>
                                                <variable name="C"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <variable name="NF"/>
                                                </left_operand>
                                                <right_operand>
                                                    <unary_operation operator="!">
                                                        <operand>
                                                            <sequence_of_expressions>
                                                                <data_method_call method_name="isDone" super="false">
                                                                    <receiver>
                                                                        <variable name="I"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </sequence_of_expressions>
                                                        </operand>
                                                    </unary_operation>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="NF">
                                                    <data_method_call method_name="excludes" super="false">
                                                        <receiver>
                                                            <self/>
                                                        </receiver>
                                                        <argument>
                                                            <data_method_call method_name="element" super="false">
                                                                <receiver>
                                                                    <variable name="I"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </argument>
                                                    </data_method_call>
                                                </assignment>
                                                <data_method_call method_name="advance" super="false">
                                                    <receiver>
                                                        <variable name="I"/>
                                                    </receiver>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <variable name="NF"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="includes" native="false">
                <return_type>Boolean</return_type>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="NF">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="NF"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <assignment variable_name="NF">
                                        <binary_operation operator="!=">
                                            <left_operand>
                                                <data_method_call method_name="element" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                </data_method_call>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="O"/>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <data_method_call method_name="not" super="false">
                                <receiver>
                                    <variable name="NF"/>
                                </receiver>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="includesAll" native="false">
                <return_type>Boolean</return_type>
                <argument name="C" type="Collection"/>
                <local_variable name="I" type="CollectionIterator"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="C"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="C"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Collection"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter of method \"includesAll\" for Collection should be a Collection"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="I">
                                        <data_method_call method_name="iterator" super="false">
                                            <receiver>
                                                <variable name="C"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <assignment variable_name="NF">
                                        <constant type="boolean">true</constant>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <variable name="NF"/>
                                                </left_operand>
                                                <right_operand>
                                                    <unary_operation operator="!">
                                                        <operand>
                                                            <sequence_of_expressions>
                                                                <data_method_call method_name="isDone" super="false">
                                                                    <receiver>
                                                                        <variable name="I"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </sequence_of_expressions>
                                                        </operand>
                                                    </unary_operation>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="NF">
                                                    <data_method_call method_name="includes" super="false">
                                                        <receiver>
                                                            <self/>
                                                        </receiver>
                                                        <argument>
                                                            <data_method_call method_name="element" super="false">
                                                                <receiver>
                                                                    <variable name="I"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </argument>
                                                    </data_method_call>
                                                </assignment>
                                                <data_method_call method_name="advance" super="false">
                                                    <receiver>
                                                        <variable name="I"/>
                                                    </receiver>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <return>
                                        <variable name="NF"/>
                                    </return>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <return>
                                    <binary_operation operator="=">
                                        <left_operand>
                                            <data_method_call method_name="size" super="false">
                                                <receiver>
                                                    <variable name="C"/>
                                                </receiver>
                                            </data_method_call>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="integer">0</constant>
                                        </right_operand>
                                    </binary_operation>
                                </return>
                            </else>
                        </if>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="toArray" native="false">
                <return_type>Array</return_type>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="I" type="Integer"/>
                <local_variable name="J" type="Integer"/>
                <local_variable name="A" type="Array"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="A">
                            <data_method_call method_name="resize" super="false">
                                <receiver>
                                    <new data_class="Array"/>
                                </receiver>
                                <argument>
                                    <variable name="Size"/>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="I">
                            <constant type="integer">1</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <assignment variable_name="J">
                                        <data_method_call method_name="count" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="J"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="putAt" super="false">
                                                    <receiver>
                                                        <variable name="A"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="I"/>
                                                    </argument>
                                                    <argument>
                                                        <data_method_call method_name="element" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <assignment variable_name="I">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="I"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <assignment variable_name="J">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="J"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="A"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="toBag" native="false">
                <return_type>Bag</return_type>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="B" type="Bag"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="B">
                            <data_method_call method_name="clear" super="false">
                                <receiver>
                                    <new data_class="Bag"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="addMultiple" super="false">
                                        <receiver>
                                            <variable name="B"/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="element" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                        <argument>
                                            <data_method_call method_name="count" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="B"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="toSet" native="false">
                <return_type>Set</return_type>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="S" type="Set"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="S">
                            <data_method_call method_name="clear" super="false">
                                <receiver>
                                    <new data_class="Set"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="add" super="false">
                                        <receiver>
                                            <variable name="S"/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="element" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="S"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="toSequence" native="false">
                <return_type>Sequence</return_type>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="I" type="Integer"/>
                <local_variable name="S" type="Sequence"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="S">
                            <data_method_call method_name="clear" super="false">
                                <receiver>
                                    <new data_class="Sequence"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <assignment variable_name="I">
                                        <data_method_call method_name="count" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="I"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="append" super="false">
                                                    <receiver>
                                                        <variable name="S"/>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="element" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <assignment variable_name="I">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="I"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="S"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="resize" native="false">
                <return_type>Collection</return_type>
                <argument name="S" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Size">
                            <variable name="S"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="root" native="false">
                <return_type>CollectionElement</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <variable name="Root"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Bag" native="false">
            <super_class>Collection</super_class>
            <data_method name="iterator" native="false">
                <return_type>BagIterator</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <data_method_call method_name="referringTo" super="false">
                                <receiver>
                                    <new data_class="BagIterator"/>
                                </receiver>
                                <argument>
                                    <self/>
                                </argument>
                                <argument>
                                    <data_method_call method_name="next" super="false">
                                        <receiver>
                                            <variable name="Root"/>
                                        </receiver>
                                    </data_method_call>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="fromArray" native="false">
                <return_type>Bag</return_type>
                <argument name="A" type="Array"/>
                <local_variable name="I" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="clear" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <assignment variable_name="I">
                            <constant type="integer">1</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <variable name="I"/>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="size" super="false">
                                            <receiver>
                                                <variable name="A"/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="add" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="at" super="false">
                                                <receiver>
                                                    <variable name="A"/>
                                                </receiver>
                                                <argument>
                                                    <variable name="I"/>
                                                </argument>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="I">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="I"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="isUnique" native="false">
                <return_type>Boolean</return_type>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="NF">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">1</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <variable name="NF"/>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="R"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="NF">
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <data_method_call method_name="count" super="false">
                                                                <receiver>
                                                                    <variable name="R"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <variable name="NF"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="count" native="false">
                <return_type>Integer</return_type>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="C" type="Integer"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="C">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="NF">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="NF"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="element" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="O"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <assignment variable_name="NF">
                                                    <constant type="boolean">false</constant>
                                                </assignment>
                                                <assignment variable_name="C">
                                                    <data_method_call method_name="count" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="C"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="add" native="false">
                <return_type>Bag</return_type>
                <argument name="O" type="Object"/>
                <body_expression>
                    <return>
                        <data_method_call method_name="addMultiple" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="O"/>
                            </argument>
                            <argument>
                                <constant type="integer">1</constant>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="addMultiple" native="false">
                <return_type>Bag</return_type>
                <argument name="O" type="Object"/>
                <argument name="N" type="Integer"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="N"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="N"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Second parameter for method \"addMultiple\" of Bag must be an Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&lt;">
                                    <left_operand>
                                        <variable name="N"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Second parameter for method \"addMultiple\" of Bag must not be negative"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="NF">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="NF"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="element" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="O"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <assignment variable_name="NF">
                                                    <constant type="boolean">false</constant>
                                                </assignment>
                                                <data_method_call method_name="setCount" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <data_method_call method_name="count" super="false">
                                                                    <receiver>
                                                                        <variable name="R"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="N"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </argument>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <if>
                            <condition>
                                <variable name="NF"/>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="setElement" super="false">
                                            <receiver>
                                                <data_method_call method_name="setRemoved" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="setCount" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="setPrevious" super="false">
                                                                    <receiver>
                                                                        <data_method_call method_name="setNext" super="false">
                                                                            <receiver>
                                                                                <new data_class="CollectionElement"/>
                                                                            </receiver>
                                                                            <argument>
                                                                                <variable name="Root"/>
                                                                            </argument>
                                                                        </data_method_call>
                                                                    </receiver>
                                                                    <argument>
                                                                        <data_method_call method_name="previous" super="false">
                                                                            <receiver>
                                                                                <variable name="Root"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="N"/>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="boolean">false</constant>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <variable name="O"/>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                    <data_method_call method_name="setNext" super="false">
                                        <receiver>
                                            <data_method_call method_name="previous" super="false">
                                                <receiver>
                                                    <variable name="Root"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <variable name="R"/>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setPrevious" super="false">
                                        <receiver>
                                            <variable name="Root"/>
                                        </receiver>
                                        <argument>
                                            <variable name="R"/>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <assignment variable_name="Size">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="Size"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="N"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="remove" native="false">
                <return_type>Bag</return_type>
                <argument name="O" type="Object"/>
                <body_expression>
                    <return>
                        <data_method_call method_name="removeMultiple" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="O"/>
                            </argument>
                            <argument>
                                <constant type="integer">1</constant>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="removeMultiple" native="false">
                <return_type>Bag</return_type>
                <argument name="O" type="Object"/>
                <argument name="N" type="Integer"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="N"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="N"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Second parameter for method \"removeMultiple\" of Bag must be an Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&lt;">
                                    <left_operand>
                                        <variable name="N"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Second parameter for method \"removeMultiple\" of Bag must not be negative"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="NF">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="NF"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="element" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="O"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <if>
                                                    <condition>
                                                        <binary_operation operator="&lt;=">
                                                            <left_operand>
                                                                <data_method_call method_name="count" super="false">
                                                                    <receiver>
                                                                        <variable name="R"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="N"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </condition>
                                                    <then>
                                                        <sequence_of_expressions>
                                                            <data_method_call method_name="setRemoved" super="false">
                                                                <receiver>
                                                                    <variable name="R"/>
                                                                </receiver>
                                                                <argument>
                                                                    <constant type="boolean">true</constant>
                                                                </argument>
                                                            </data_method_call>
                                                            <data_method_call method_name="setPrevious" super="false">
                                                                <receiver>
                                                                    <data_method_call method_name="next" super="false">
                                                                        <receiver>
                                                                            <variable name="R"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </receiver>
                                                                <argument>
                                                                    <data_method_call method_name="previous" super="false">
                                                                        <receiver>
                                                                            <variable name="R"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </argument>
                                                            </data_method_call>
                                                            <data_method_call method_name="setNext" super="false">
                                                                <receiver>
                                                                    <data_method_call method_name="previous" super="false">
                                                                        <receiver>
                                                                            <variable name="R"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </receiver>
                                                                <argument>
                                                                    <data_method_call method_name="next" super="false">
                                                                        <receiver>
                                                                            <variable name="R"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </argument>
                                                            </data_method_call>
                                                            <assignment variable_name="Size">
                                                                <binary_operation operator="-">
                                                                    <left_operand>
                                                                        <variable name="Size"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <data_method_call method_name="count" super="false">
                                                                            <receiver>
                                                                                <variable name="R"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </assignment>
                                                        </sequence_of_expressions>
                                                    </then>
                                                    <else>
                                                        <sequence_of_expressions>
                                                            <data_method_call method_name="setCount" super="false">
                                                                <receiver>
                                                                    <variable name="R"/>
                                                                </receiver>
                                                                <argument>
                                                                    <binary_operation operator="-">
                                                                        <left_operand>
                                                                            <data_method_call method_name="count" super="false">
                                                                                <receiver>
                                                                                    <variable name="R"/>
                                                                                </receiver>
                                                                            </data_method_call>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <variable name="N"/>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </argument>
                                                            </data_method_call>
                                                            <assignment variable_name="Size">
                                                                <binary_operation operator="-">
                                                                    <left_operand>
                                                                        <variable name="Size"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="N"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </assignment>
                                                        </sequence_of_expressions>
                                                    </else>
                                                </if>
                                                <assignment variable_name="NF">
                                                    <constant type="boolean">false</constant>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="removeDuplicates" native="false">
                <return_type>Bag</return_type>
                <local_variable name="R" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <assignment variable_name="Size">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="-">
                                                    <left_operand>
                                                        <variable name="Size"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <data_method_call method_name="count" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <data_method_call method_name="setCount" super="false">
                                        <receiver>
                                            <variable name="R"/>
                                        </receiver>
                                        <argument>
                                            <constant type="integer">1</constant>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="union" native="false">
                <return_type>Bag</return_type>
                <argument name="B" type="Bag"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="I" type="CollectionElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="B"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="B"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Bag"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for method \"union\" of Bag must be a Bag"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="I">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <data_method_call method_name="root" super="false">
                                        <receiver>
                                            <variable name="B"/>
                                        </receiver>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="I"/>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="root" super="false">
                                            <receiver>
                                                <variable name="B"/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <assignment variable_name="NF">
                                        <constant type="boolean">true</constant>
                                    </assignment>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <variable name="NF"/>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="R"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <if>
                                                    <condition>
                                                        <binary_operation operator="=">
                                                            <left_operand>
                                                                <data_method_call method_name="element" super="false">
                                                                    <receiver>
                                                                        <variable name="R"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="element" super="false">
                                                                    <receiver>
                                                                        <variable name="I"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </condition>
                                                    <then>
                                                        <sequence_of_expressions>
                                                            <assignment variable_name="NF">
                                                                <constant type="boolean">false</constant>
                                                            </assignment>
                                                            <data_method_call method_name="setCount" super="false">
                                                                <receiver>
                                                                    <variable name="R"/>
                                                                </receiver>
                                                                <argument>
                                                                    <binary_operation operator="+">
                                                                        <left_operand>
                                                                            <data_method_call method_name="count" super="false">
                                                                                <receiver>
                                                                                    <variable name="R"/>
                                                                                </receiver>
                                                                            </data_method_call>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <data_method_call method_name="count" super="false">
                                                                                <receiver>
                                                                                    <variable name="I"/>
                                                                                </receiver>
                                                                            </data_method_call>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </argument>
                                                            </data_method_call>
                                                        </sequence_of_expressions>
                                                    </then>
                                                </if>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <if>
                                        <condition>
                                            <variable name="NF"/>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="setElement" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="setRemoved" super="false">
                                                                <receiver>
                                                                    <data_method_call method_name="setCount" super="false">
                                                                        <receiver>
                                                                            <data_method_call method_name="setPrevious" super="false">
                                                                                <receiver>
                                                                                    <data_method_call method_name="setNext" super="false">
                                                                                        <receiver>
                                                                                            <new data_class="CollectionElement"/>
                                                                                        </receiver>
                                                                                        <argument>
                                                                                            <variable name="Root"/>
                                                                                        </argument>
                                                                                    </data_method_call>
                                                                                </receiver>
                                                                                <argument>
                                                                                    <data_method_call method_name="previous" super="false">
                                                                                        <receiver>
                                                                                            <variable name="Root"/>
                                                                                        </receiver>
                                                                                    </data_method_call>
                                                                                </argument>
                                                                            </data_method_call>
                                                                        </receiver>
                                                                        <argument>
                                                                            <data_method_call method_name="count" super="false">
                                                                                <receiver>
                                                                                    <variable name="I"/>
                                                                                </receiver>
                                                                            </data_method_call>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </receiver>
                                                                <argument>
                                                                    <constant type="boolean">false</constant>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <data_method_call method_name="element" super="false">
                                                                <receiver>
                                                                    <variable name="I"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </argument>
                                                    </data_method_call>
                                                </assignment>
                                                <data_method_call method_name="setNext" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="Root"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="R"/>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setPrevious" super="false">
                                                    <receiver>
                                                        <variable name="Root"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="R"/>
                                                    </argument>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                    <assignment variable_name="Size">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="Size"/>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="count" super="false">
                                                    <receiver>
                                                        <variable name="I"/>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <assignment variable_name="I">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="I"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="subtract" native="false">
                <return_type>Bag</return_type>
                <argument name="B" type="Bag"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="C" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="B"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="B"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Bag"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for method \"subtract\" of Bag must be a Bag"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <assignment variable_name="C">
                                        <data_method_call method_name="monus" super="false">
                                            <receiver>
                                                <data_method_call method_name="count" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <data_method_call method_name="count" super="false">
                                                    <receiver>
                                                        <variable name="B"/>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="element" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="C"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="setRemoved" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="boolean">true</constant>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setNext" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="next" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setPrevious" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="next" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <assignment variable_name="Size">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="Size"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <data_method_call method_name="count" super="false">
                                                                <receiver>
                                                                    <variable name="R"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </then>
                                        <else>
                                            <sequence_of_expressions>
                                                <assignment variable_name="Size">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <binary_operation operator="-">
                                                                <left_operand>
                                                                    <variable name="Size"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <data_method_call method_name="count" super="false">
                                                                        <receiver>
                                                                            <variable name="R"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="C"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <data_method_call method_name="setCount" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="C"/>
                                                    </argument>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </else>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="difference" native="false">
                <return_type>Bag</return_type>
                <argument name="B" type="Bag"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="Intersection" type="Bag"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="B"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="B"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Bag"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for method \"difference\" of Bag must be a Bag"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Intersection">
                            <data_method_call method_name="clear" super="false">
                                <receiver>
                                    <new data_class="Bag"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="addMultiple" super="false">
                                        <receiver>
                                            <variable name="Intersection"/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="element" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                        <argument>
                                            <data_method_call method_name="min" super="false">
                                                <receiver>
                                                    <data_method_call method_name="count" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="count" super="false">
                                                        <receiver>
                                                            <variable name="B"/>
                                                        </receiver>
                                                        <argument>
                                                            <data_method_call method_name="element" super="false">
                                                                <receiver>
                                                                    <variable name="R"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </argument>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <data_method_call method_name="union" super="false">
                                <receiver>
                                    <sequence_of_expressions>
                                        <data_method_call method_name="subtract" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                            <argument>
                                                <variable name="Intersection"/>
                                            </argument>
                                        </data_method_call>
                                    </sequence_of_expressions>
                                </receiver>
                                <argument>
                                    <binary_operation operator="-">
                                        <left_operand>
                                            <variable name="B"/>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="Intersection"/>
                                        </right_operand>
                                    </binary_operation>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="intersection" native="false">
                <return_type>Bag</return_type>
                <argument name="B" type="Bag"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="C" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="B"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="B"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Bag"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for method \"intersection\" of Bag must be a Bag"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <assignment variable_name="C">
                                        <data_method_call method_name="min" super="false">
                                            <receiver>
                                                <data_method_call method_name="count" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <data_method_call method_name="count" super="false">
                                                    <receiver>
                                                        <variable name="B"/>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="element" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="C"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="setRemoved" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="boolean">true</constant>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setNext" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="next" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setPrevious" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="next" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <assignment variable_name="Size">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="Size"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <data_method_call method_name="count" super="false">
                                                                <receiver>
                                                                    <variable name="R"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </then>
                                        <else>
                                            <sequence_of_expressions>
                                                <assignment variable_name="Size">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <binary_operation operator="-">
                                                                <left_operand>
                                                                    <variable name="Size"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <data_method_call method_name="count" super="false">
                                                                        <receiver>
                                                                            <variable name="R"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="C"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <data_method_call method_name="setCount" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="C"/>
                                                    </argument>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </else>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="PrintOut" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <assignment variable_name="PrintOut">
                                    <constant type="string">"Empty Bag"</constant>
                                </assignment>
                            </then>
                            <else>
                                <sequence_of_expressions>
                                    <assignment variable_name="PrintOut">
                                        <constant type="string">"Bag{"</constant>
                                    </assignment>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="concat" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="concat" super="false">
                                                                    <receiver>
                                                                        <data_method_call method_name="concat" super="false">
                                                                            <receiver>
                                                                                <data_method_call method_name="concat" super="false">
                                                                                    <receiver>
                                                                                        <variable name="PrintOut"/>
                                                                                    </receiver>
                                                                                    <argument>
                                                                                        <constant type="string">"["</constant>
                                                                                    </argument>
                                                                                </data_method_call>
                                                                            </receiver>
                                                                            <argument>
                                                                                <data_method_call method_name="printString" super="false">
                                                                                    <receiver>
                                                                                        <data_method_call method_name="count" super="false">
                                                                                            <receiver>
                                                                                                <variable name="R"/>
                                                                                            </receiver>
                                                                                        </data_method_call>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </argument>
                                                                        </data_method_call>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">" * "</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                            <argument>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <data_method_call method_name="element" super="false">
                                                                            <receiver>
                                                                                <variable name="R"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"]"</constant>
                                                    </argument>
                                                </data_method_call>
                                                <if>
                                                    <condition>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <data_method_call method_name="next" super="false">
                                                                    <receiver>
                                                                        <variable name="R"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </condition>
                                                    <then>
                                                        <data_method_call method_name="concat" super="false">
                                                            <receiver>
                                                                <variable name="PrintOut"/>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">", "</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </then>
                                                </if>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <data_method_call method_name="concat" super="false">
                                        <receiver>
                                            <variable name="PrintOut"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"}"</constant>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </else>
                        </if>
                        <return>
                            <variable name="PrintOut"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="=" native="false">
                <return_type>Boolean</return_type>
                <argument name="B" type="Object"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="&amp;">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="!=">
                                            <left_operand>
                                                <variable name="B"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <data_method_call method_name="isOfType" super="false">
                                        <receiver>
                                            <variable name="B"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"Bag"</constant>
                                        </argument>
                                    </data_method_call>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <sequence_of_expressions>
                                <if>
                                    <condition>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="Root"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <data_method_call method_name="clear" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                        </data_method_call>
                                    </then>
                                </if>
                                <assignment variable_name="NF">
                                    <binary_operation operator="=">
                                        <left_operand>
                                            <variable name="Size"/>
                                        </left_operand>
                                        <right_operand>
                                            <data_method_call method_name="size" super="false">
                                                <receiver>
                                                    <variable name="B"/>
                                                </receiver>
                                            </data_method_call>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                                <if>
                                    <condition>
                                        <binary_operation operator="&amp;">
                                            <left_operand>
                                                <variable name="NF"/>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="!=">
                                                        <left_operand>
                                                            <variable name="Size"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">0</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <sequence_of_expressions>
                                            <assignment variable_name="R">
                                                <data_method_call method_name="next" super="false">
                                                    <receiver>
                                                        <variable name="Root"/>
                                                    </receiver>
                                                </data_method_call>
                                            </assignment>
                                            <while>
                                                <condition>
                                                    <binary_operation operator="&amp;">
                                                        <left_operand>
                                                            <variable name="NF"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="!=">
                                                                    <left_operand>
                                                                        <variable name="R"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="Root"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </right_operand>
                                                    </binary_operation>
                                                </condition>
                                                <body>
                                                    <sequence_of_expressions>
                                                        <assignment variable_name="NF">
                                                            <binary_operation operator="=">
                                                                <left_operand>
                                                                    <data_method_call method_name="count" super="false">
                                                                        <receiver>
                                                                            <variable name="R"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <data_method_call method_name="count" super="false">
                                                                        <receiver>
                                                                            <variable name="B"/>
                                                                        </receiver>
                                                                        <argument>
                                                                            <data_method_call method_name="element" super="false">
                                                                                <receiver>
                                                                                    <variable name="R"/>
                                                                                </receiver>
                                                                            </data_method_call>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </assignment>
                                                        <assignment variable_name="R">
                                                            <data_method_call method_name="next" super="false">
                                                                <receiver>
                                                                    <variable name="R"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </assignment>
                                                    </sequence_of_expressions>
                                                </body>
                                            </while>
                                        </sequence_of_expressions>
                                    </then>
                                </if>
                                <return>
                                    <variable name="NF"/>
                                </return>
                            </sequence_of_expressions>
                        </then>
                        <else>
                            <return>
                                <constant type="boolean">false</constant>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="!=" native="false">
                <return_type>Boolean</return_type>
                <argument name="B" type="Object"/>
                <body_expression>
                    <return>
                        <unary_operation operator="!">
                            <operand>
                                <sequence_of_expressions>
                                    <binary_operation operator="=">
                                        <left_operand>
                                            <self/>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="B"/>
                                        </right_operand>
                                    </binary_operation>
                                </sequence_of_expressions>
                            </operand>
                        </unary_operation>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="+" native="false">
                <return_type>Bag</return_type>
                <argument name="B" type="Bag"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="B"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="B"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Bag"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for operator \"+\" of Bag must be a Bag"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <data_method_call method_name="union" super="false">
                                <receiver>
                                    <data_method_call method_name="deepCopy" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                    </data_method_call>
                                </receiver>
                                <argument>
                                    <variable name="B"/>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="-" native="false">
                <return_type>Bag</return_type>
                <argument name="B" type="Bag"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="Subtraction" type="Bag"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="B"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="B"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Bag"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for operator \"-\" of Bag must be a Bag"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Subtraction">
                            <new data_class="Bag"/>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="addMultiple" super="false">
                                        <receiver>
                                            <variable name="Subtraction"/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="element" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                        <argument>
                                            <data_method_call method_name="monus" super="false">
                                                <receiver>
                                                    <data_method_call method_name="count" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="count" super="false">
                                                        <receiver>
                                                            <variable name="B"/>
                                                        </receiver>
                                                        <argument>
                                                            <data_method_call method_name="element" super="false">
                                                                <receiver>
                                                                    <variable name="R"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </argument>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="Subtraction"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="&gt;" native="false">
                <return_type>Boolean</return_type>
                <argument name="B" type="Bag"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="B"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="B"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Bag"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for operator \"&lt;\" of Bag must be a Bag"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <unary_operation operator="!">
                                <operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="&lt;=">
                                            <left_operand>
                                                <self/>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="B"/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </operand>
                            </unary_operation>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="&gt;=" native="false">
                <return_type>Boolean</return_type>
                <argument name="B" type="Bag"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="B"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="B"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Bag"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for operator \"&lt;=\" of Bag must be a Bag"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <binary_operation operator="&lt;=">
                                <left_operand>
                                    <variable name="B"/>
                                </left_operand>
                                <right_operand>
                                    <self/>
                                </right_operand>
                            </binary_operation>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="&lt;" native="false">
                <return_type>Boolean</return_type>
                <argument name="B" type="Bag"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="B"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="B"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Bag"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for operator \"&lt;\" of Bag must be a Bag"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <unary_operation operator="!">
                                <operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="&lt;=">
                                            <left_operand>
                                                <variable name="B"/>
                                            </left_operand>
                                            <right_operand>
                                                <self/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </operand>
                            </unary_operation>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="&lt;=" native="false">
                <return_type>Boolean</return_type>
                <argument name="B" type="Bag"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="SubBag" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="B"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="B"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Bag"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for operator \"&lt;=\" of Bag must be a Bag"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="SubBag">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="SubBag"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <assignment variable_name="SubBag">
                                        <binary_operation operator="&lt;=">
                                            <left_operand>
                                                <data_method_call method_name="count" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                </data_method_call>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="count" super="false">
                                                    <receiver>
                                                        <variable name="B"/>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="element" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="SubBag"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Set" native="false">
            <super_class>Collection</super_class>
            <data_method name="iterator" native="false">
                <return_type>CollectionIterator</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <data_method_call method_name="referringTo" super="false">
                                <receiver>
                                    <new data_class="CollectionIterator"/>
                                </receiver>
                                <argument>
                                    <self/>
                                </argument>
                                <argument>
                                    <data_method_call method_name="next" super="false">
                                        <receiver>
                                            <variable name="Root"/>
                                        </receiver>
                                    </data_method_call>
                                </argument>
                                <argument>
                                    <constant type="string">"Set"</constant>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="fromArray" native="false">
                <return_type>Set</return_type>
                <argument name="A" type="Array"/>
                <local_variable name="I" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="clear" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <assignment variable_name="I">
                            <constant type="integer">1</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <variable name="I"/>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="size" super="false">
                                            <receiver>
                                                <variable name="A"/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="add" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="at" super="false">
                                                <receiver>
                                                    <variable name="A"/>
                                                </receiver>
                                                <argument>
                                                    <variable name="I"/>
                                                </argument>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="I">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="I"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="count" native="false">
                <return_type>Integer</return_type>
                <argument name="O" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="includes" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <variable name="O"/>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <return>
                                    <constant type="integer">1</constant>
                                </return>
                            </then>
                            <else>
                                <return>
                                    <constant type="integer">0</constant>
                                </return>
                            </else>
                        </if>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="add" native="false">
                <return_type>Set</return_type>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="excludes" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <variable name="O"/>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="setElement" super="false">
                                            <receiver>
                                                <data_method_call method_name="setRemoved" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="setCount" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="setPrevious" super="false">
                                                                    <receiver>
                                                                        <data_method_call method_name="setNext" super="false">
                                                                            <receiver>
                                                                                <new data_class="CollectionElement"/>
                                                                            </receiver>
                                                                            <argument>
                                                                                <variable name="Root"/>
                                                                            </argument>
                                                                        </data_method_call>
                                                                    </receiver>
                                                                    <argument>
                                                                        <data_method_call method_name="previous" super="false">
                                                                            <receiver>
                                                                                <variable name="Root"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="integer">1</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="boolean">false</constant>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <variable name="O"/>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                    <data_method_call method_name="setNext" super="false">
                                        <receiver>
                                            <data_method_call method_name="previous" super="false">
                                                <receiver>
                                                    <variable name="Root"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <variable name="R"/>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setPrevious" super="false">
                                        <receiver>
                                            <variable name="Root"/>
                                        </receiver>
                                        <argument>
                                            <variable name="R"/>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="Size">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="Size"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="remove" native="false">
                <return_type>Set</return_type>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="NF">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <variable name="NF"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <if>
                                    <condition>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <data_method_call method_name="element" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                </data_method_call>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="O"/>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="setRemoved" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                                <argument>
                                                    <constant type="boolean">true</constant>
                                                </argument>
                                            </data_method_call>
                                            <data_method_call method_name="setPrevious" super="false">
                                                <receiver>
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="previous" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                            <data_method_call method_name="setNext" super="false">
                                                <receiver>
                                                    <data_method_call method_name="previous" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                            <assignment variable_name="Size">
                                                <binary_operation operator="-">
                                                    <left_operand>
                                                        <variable name="Size"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="integer">1</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </assignment>
                                            <assignment variable_name="NF">
                                                <constant type="boolean">false</constant>
                                            </assignment>
                                        </sequence_of_expressions>
                                    </then>
                                    <else>
                                        <assignment variable_name="R">
                                            <data_method_call method_name="next" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </assignment>
                                    </else>
                                </if>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="union" native="false">
                <return_type>Set</return_type>
                <argument name="S" type="Set"/>
                <local_variable name="I" type="CollectionIterator"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="S"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Set"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter of method \"union\" for Set must be a Set"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="I">
                            <data_method_call method_name="iterator" super="false">
                                <receiver>
                                    <variable name="S"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <unary_operation operator="!">
                                    <operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="isDone" super="false">
                                                <receiver>
                                                    <variable name="I"/>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </operand>
                                </unary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="add" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="element" super="false">
                                                <receiver>
                                                    <variable name="I"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="advance" super="false">
                                        <receiver>
                                            <variable name="I"/>
                                        </receiver>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="subtract" native="false">
                <return_type>Set</return_type>
                <argument name="S" type="Set"/>
                <local_variable name="R" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="S"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Set"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter of method \"subtract\" for Set must be a Set"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <data_method_call method_name="includes" super="false">
                                                <receiver>
                                                    <variable name="S"/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="element" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="setRemoved" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="boolean">true</constant>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setNext" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="next" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setPrevious" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="next" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <assignment variable_name="Size">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="Size"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="difference" native="false">
                <return_type>Set</return_type>
                <argument name="S" type="Set"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="Intersection" type="Set"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="S"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Set"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for method \"difference\" of Set must be a Set"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Intersection">
                            <data_method_call method_name="clear" super="false">
                                <receiver>
                                    <new data_class="Set"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <data_method_call method_name="includes" super="false">
                                                <receiver>
                                                    <variable name="S"/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="element" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="add" super="false">
                                                <receiver>
                                                    <variable name="Intersection"/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="element" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <data_method_call method_name="union" super="false">
                                <receiver>
                                    <sequence_of_expressions>
                                        <data_method_call method_name="subtract" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                            <argument>
                                                <variable name="Intersection"/>
                                            </argument>
                                        </data_method_call>
                                    </sequence_of_expressions>
                                </receiver>
                                <argument>
                                    <binary_operation operator="-">
                                        <left_operand>
                                            <variable name="S"/>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="Intersection"/>
                                        </right_operand>
                                    </binary_operation>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="intersection" native="false">
                <return_type>Set</return_type>
                <argument name="S" type="Set"/>
                <local_variable name="R" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="not" super="false">
                                    <receiver>
                                        <data_method_call method_name="isOfType" super="false">
                                            <receiver>
                                                <variable name="S"/>
                                            </receiver>
                                            <argument>
                                                <constant type="string">"Set"</constant>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter of method \"intersection\" for Set must be a Set"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <data_method_call method_name="excludes" super="false">
                                                <receiver>
                                                    <variable name="S"/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="element" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="setRemoved" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="boolean">true</constant>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setNext" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="next" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setPrevious" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="next" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <assignment variable_name="Size">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="Size"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <local_variable name="PrintOut" type="String"/>
                <local_variable name="R" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <assignment variable_name="PrintOut">
                                    <constant type="string">"Empty Set"</constant>
                                </assignment>
                            </then>
                            <else>
                                <sequence_of_expressions>
                                    <assignment variable_name="PrintOut">
                                        <constant type="string">"Set{"</constant>
                                    </assignment>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <variable name="PrintOut"/>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <if>
                                                    <condition>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <data_method_call method_name="next" super="false">
                                                                    <receiver>
                                                                        <variable name="R"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </condition>
                                                    <then>
                                                        <data_method_call method_name="concat" super="false">
                                                            <receiver>
                                                                <variable name="PrintOut"/>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">", "</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </then>
                                                </if>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <data_method_call method_name="concat" super="false">
                                        <receiver>
                                            <variable name="PrintOut"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"}"</constant>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </else>
                        </if>
                        <return>
                            <variable name="PrintOut"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="=" native="false">
                <return_type>Boolean</return_type>
                <argument name="S" type="Object"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="&amp;">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="!=">
                                            <left_operand>
                                                <variable name="S"/>
                                            </left_operand>
                                            <right_operand>
                                                <nil/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <data_method_call method_name="isOfType" super="false">
                                        <receiver>
                                            <variable name="S"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"Set"</constant>
                                        </argument>
                                    </data_method_call>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <sequence_of_expressions>
                                <assignment variable_name="NF">
                                    <binary_operation operator="=">
                                        <left_operand>
                                            <variable name="Size"/>
                                        </left_operand>
                                        <right_operand>
                                            <data_method_call method_name="size" super="false">
                                                <receiver>
                                                    <variable name="S"/>
                                                </receiver>
                                            </data_method_call>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                                <if>
                                    <condition>
                                        <binary_operation operator="&amp;">
                                            <left_operand>
                                                <variable name="NF"/>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="!=">
                                                        <left_operand>
                                                            <variable name="Size"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">0</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <sequence_of_expressions>
                                            <assignment variable_name="R">
                                                <data_method_call method_name="next" super="false">
                                                    <receiver>
                                                        <variable name="Root"/>
                                                    </receiver>
                                                </data_method_call>
                                            </assignment>
                                            <while>
                                                <condition>
                                                    <binary_operation operator="&amp;">
                                                        <left_operand>
                                                            <variable name="NF"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="!=">
                                                                    <left_operand>
                                                                        <variable name="R"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="Root"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </right_operand>
                                                    </binary_operation>
                                                </condition>
                                                <body>
                                                    <sequence_of_expressions>
                                                        <assignment variable_name="NF">
                                                            <data_method_call method_name="includes" super="false">
                                                                <receiver>
                                                                    <variable name="S"/>
                                                                </receiver>
                                                                <argument>
                                                                    <data_method_call method_name="element" super="false">
                                                                        <receiver>
                                                                            <variable name="R"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </argument>
                                                            </data_method_call>
                                                        </assignment>
                                                        <assignment variable_name="R">
                                                            <data_method_call method_name="next" super="false">
                                                                <receiver>
                                                                    <variable name="R"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </assignment>
                                                    </sequence_of_expressions>
                                                </body>
                                            </while>
                                        </sequence_of_expressions>
                                    </then>
                                </if>
                                <return>
                                    <variable name="NF"/>
                                </return>
                            </sequence_of_expressions>
                        </then>
                        <else>
                            <return>
                                <constant type="boolean">false</constant>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="!=" native="false">
                <return_type>Boolean</return_type>
                <argument name="S" type="Object"/>
                <body_expression>
                    <return>
                        <unary_operation operator="!">
                            <operand>
                                <sequence_of_expressions>
                                    <binary_operation operator="=">
                                        <left_operand>
                                            <self/>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="S"/>
                                        </right_operand>
                                    </binary_operation>
                                </sequence_of_expressions>
                            </operand>
                        </unary_operation>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="+" native="false">
                <return_type>Set</return_type>
                <argument name="S" type="Set"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="S"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Set"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter of operator \"+\" for Set must be a Set"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <data_method_call method_name="union" super="false">
                                <receiver>
                                    <data_method_call method_name="deepCopy" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                    </data_method_call>
                                </receiver>
                                <argument>
                                    <variable name="S"/>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="-" native="false">
                <return_type>Set</return_type>
                <argument name="S" type="Set"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="Subtraction" type="Set"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="S"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Set"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter of operator \"-\" for Set must be a Set"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Subtraction">
                            <data_method_call method_name="clear" super="false">
                                <receiver>
                                    <new data_class="Set"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <data_method_call method_name="excludes" super="false">
                                                <receiver>
                                                    <variable name="S"/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="element" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="add" super="false">
                                                <receiver>
                                                    <variable name="Subtraction"/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="element" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="Subtraction"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="&gt;" native="false">
                <return_type>Boolean</return_type>
                <argument name="S" type="Set"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="S"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Set"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for operator \"&lt;\" of Set must be a Set"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <unary_operation operator="!">
                                <operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="&lt;=">
                                            <left_operand>
                                                <self/>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="S"/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </operand>
                            </unary_operation>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="&gt;=" native="false">
                <return_type>Boolean</return_type>
                <argument name="S" type="Set"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="S"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Set"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for operator \"&lt;=\" of Set must be a Set"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <data_method_call method_name="includesAll" super="false">
                                <receiver>
                                    <self/>
                                </receiver>
                                <argument>
                                    <variable name="S"/>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="&lt;" native="false">
                <return_type>Boolean</return_type>
                <argument name="S" type="Set"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="S"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Set"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for operator \"&lt;\" of Set must be a Set"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <unary_operation operator="!">
                                <operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="&gt;=">
                                            <left_operand>
                                                <self/>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="S"/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </operand>
                            </unary_operation>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="&lt;=" native="false">
                <return_type>Boolean</return_type>
                <argument name="S" type="Set"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="S"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Set"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for operator \"&lt;=\" of Set must be a Set"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <data_method_call method_name="includesAll" super="false">
                                <receiver>
                                    <variable name="S"/>
                                </receiver>
                                <argument>
                                    <self/>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Sequence" native="false">
            <super_class>Collection</super_class>
            <data_method name="iterator" native="false">
                <return_type>SequenceIterator</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <data_method_call method_name="referringTo" super="false">
                                <receiver>
                                    <new data_class="SequenceIterator"/>
                                </receiver>
                                <argument>
                                    <self/>
                                </argument>
                                <argument>
                                    <data_method_call method_name="next" super="false">
                                        <receiver>
                                            <variable name="Root"/>
                                        </receiver>
                                    </data_method_call>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="fromArray" native="false">
                <return_type>Sequence</return_type>
                <argument name="A" type="Array"/>
                <local_variable name="I" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="clear" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <assignment variable_name="I">
                            <constant type="integer">1</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <variable name="I"/>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="size" super="false">
                                            <receiver>
                                                <variable name="A"/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="append" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="at" super="false">
                                                <receiver>
                                                    <variable name="A"/>
                                                </receiver>
                                                <argument>
                                                    <variable name="I"/>
                                                </argument>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="I">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="I"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="isUnique" native="false">
                <return_type>Boolean</return_type>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="Q" type="CollectionElement"/>
                <local_variable name="NF" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="NF">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">1</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <variable name="NF"/>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="R"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="Q">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                                <while>
                                                    <condition>
                                                        <binary_operation operator="&amp;">
                                                            <left_operand>
                                                                <variable name="NF"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="!=">
                                                                        <left_operand>
                                                                            <variable name="Q"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <variable name="Root"/>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </condition>
                                                    <body>
                                                        <sequence_of_expressions>
                                                            <assignment variable_name="NF">
                                                                <binary_operation operator="!=">
                                                                    <left_operand>
                                                                        <data_method_call method_name="element" super="false">
                                                                            <receiver>
                                                                                <variable name="R"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <data_method_call method_name="element" super="false">
                                                                            <receiver>
                                                                                <variable name="Q"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </assignment>
                                                            <assignment variable_name="Q">
                                                                <data_method_call method_name="next" super="false">
                                                                    <receiver>
                                                                        <variable name="Q"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </assignment>
                                                        </sequence_of_expressions>
                                                    </body>
                                                </while>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <variable name="NF"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="count" native="false">
                <return_type>Integer</return_type>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="C" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="C">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="R">
                            <data_method_call method_name="next" super="false">
                                <receiver>
                                    <variable name="Root"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="R"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Root"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="element" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="O"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <assignment variable_name="C">
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="C"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="integer">1</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </assignment>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="C"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="append" native="false">
                <return_type>Sequence</return_type>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="R">
                            <data_method_call method_name="setElement" super="false">
                                <receiver>
                                    <data_method_call method_name="setRemoved" super="false">
                                        <receiver>
                                            <data_method_call method_name="setCount" super="false">
                                                <receiver>
                                                    <data_method_call method_name="setPrevious" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="setNext" super="false">
                                                                <receiver>
                                                                    <new data_class="CollectionElement"/>
                                                                </receiver>
                                                                <argument>
                                                                    <variable name="Root"/>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <data_method_call method_name="previous" super="false">
                                                                <receiver>
                                                                    <variable name="Root"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <constant type="integer">1</constant>
                                                </argument>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <constant type="boolean">false</constant>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                                <argument>
                                    <variable name="O"/>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="setNext" super="false">
                            <receiver>
                                <data_method_call method_name="previous" super="false">
                                    <receiver>
                                        <variable name="Root"/>
                                    </receiver>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <variable name="R"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="setPrevious" super="false">
                            <receiver>
                                <variable name="Root"/>
                            </receiver>
                            <argument>
                                <variable name="R"/>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="Size">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="Size"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="prepend" native="false">
                <return_type>Sequence</return_type>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="R">
                            <data_method_call method_name="setElement" super="false">
                                <receiver>
                                    <data_method_call method_name="setRemoved" super="false">
                                        <receiver>
                                            <data_method_call method_name="setCount" super="false">
                                                <receiver>
                                                    <data_method_call method_name="setPrevious" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="setNext" super="false">
                                                                <receiver>
                                                                    <new data_class="CollectionElement"/>
                                                                </receiver>
                                                                <argument>
                                                                    <data_method_call method_name="next" super="false">
                                                                        <receiver>
                                                                            <variable name="Root"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <variable name="Root"/>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <constant type="integer">1</constant>
                                                </argument>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <constant type="boolean">false</constant>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                                <argument>
                                    <variable name="O"/>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="setPrevious" super="false">
                            <receiver>
                                <data_method_call method_name="next" super="false">
                                    <receiver>
                                        <variable name="Root"/>
                                    </receiver>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <variable name="R"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="setNext" super="false">
                            <receiver>
                                <variable name="Root"/>
                            </receiver>
                            <argument>
                                <variable name="R"/>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="Size">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="Size"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="putAt" native="false">
                <return_type>Sequence</return_type>
                <argument name="I" type="Integer"/>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="I"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="I"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"First parameter for method \"putAt\" of Sequence must be an Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&lt;">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">1</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&gt;">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Size"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="concat" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="concat" super="false">
                                                                <receiver>
                                                                    <constant type="string">"First parameter for method \"putAt\" of Sequence must be in [1, "</constant>
                                                                </receiver>
                                                                <argument>
                                                                    <data_method_call method_name="printString" super="false">
                                                                        <receiver>
                                                                            <variable name="Size"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"]"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">1</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="R"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                                <assignment variable_name="I">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="I"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <data_method_call method_name="setElement" super="false">
                                        <receiver>
                                            <variable name="R"/>
                                        </receiver>
                                        <argument>
                                            <variable name="O"/>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Method \"putAt\" of Sequence requires a Sequence of positive size"</constant>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="insertAt" native="false">
                <return_type>Sequence</return_type>
                <argument name="I" type="Integer"/>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="N" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="I"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="I"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"First parameter for method \"insertAt\" of Sequence must be an Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&lt;">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">1</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&gt;">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Size"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="concat" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="concat" super="false">
                                                                <receiver>
                                                                    <constant type="string">"First parameter for method \"insertAt\" of Sequence must be in [1, "</constant>
                                                                </receiver>
                                                                <argument>
                                                                    <data_method_call method_name="printString" super="false">
                                                                        <receiver>
                                                                            <variable name="Size"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"]"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">1</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="R"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                                <assignment variable_name="I">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="I"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <assignment variable_name="N">
                                        <data_method_call method_name="setElement" super="false">
                                            <receiver>
                                                <data_method_call method_name="setRemoved" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="setCount" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="setPrevious" super="false">
                                                                    <receiver>
                                                                        <data_method_call method_name="setNext" super="false">
                                                                            <receiver>
                                                                                <new data_class="CollectionElement"/>
                                                                            </receiver>
                                                                            <argument>
                                                                                <variable name="R"/>
                                                                            </argument>
                                                                        </data_method_call>
                                                                    </receiver>
                                                                    <argument>
                                                                        <data_method_call method_name="previous" super="false">
                                                                            <receiver>
                                                                                <variable name="R"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="integer">1</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="boolean">false</constant>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <variable name="O"/>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                    <data_method_call method_name="setPrevious" super="false">
                                        <receiver>
                                            <variable name="R"/>
                                        </receiver>
                                        <argument>
                                            <variable name="N"/>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setNext" super="false">
                                        <receiver>
                                            <data_method_call method_name="previous" super="false">
                                                <receiver>
                                                    <variable name="N"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <variable name="N"/>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="Size">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="Size"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Method \"insertAt\" of Sequence requires a Sequence of positive size"</constant>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="at" native="false">
                <return_type>Object</return_type>
                <argument name="I" type="Integer"/>
                <local_variable name="R" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="I"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="I"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for method \"at\" of Sequence must be an Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&lt;">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">1</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&gt;">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Size"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="concat" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="concat" super="false">
                                                                <receiver>
                                                                    <constant type="string">"Parameter for method \"at\" of Sequence must be in [1, "</constant>
                                                                </receiver>
                                                                <argument>
                                                                    <data_method_call method_name="printString" super="false">
                                                                        <receiver>
                                                                            <variable name="Size"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"]"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">1</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="R"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                                <assignment variable_name="I">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="I"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <return>
                                        <data_method_call method_name="element" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </return>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <sequence_of_expressions>
                                    <data_method_call method_name="error" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"Method \"at\" of Sequence requires a Sequence of positive size"</constant>
                                        </argument>
                                    </data_method_call>
                                    <return>
                                        <nil/>
                                    </return>
                                </sequence_of_expressions>
                            </else>
                        </if>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="first" native="false">
                <return_type>Object</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <return>
                                    <nil/>
                                </return>
                            </then>
                            <else>
                                <return>
                                    <data_method_call method_name="element" super="false">
                                        <receiver>
                                            <data_method_call method_name="next" super="false">
                                                <receiver>
                                                    <variable name="Root"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                    </data_method_call>
                                </return>
                            </else>
                        </if>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="last" native="false">
                <return_type>Object</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <return>
                                    <nil/>
                                </return>
                            </then>
                            <else>
                                <return>
                                    <data_method_call method_name="element" super="false">
                                        <receiver>
                                            <data_method_call method_name="previous" super="false">
                                                <receiver>
                                                    <variable name="Root"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                    </data_method_call>
                                </return>
                            </else>
                        </if>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="removeAt" native="false">
                <return_type>Sequence</return_type>
                <argument name="I" type="Integer"/>
                <local_variable name="R" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="I"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="I"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for method \"removeAt\" of Sequence must be an Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&lt;">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">1</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&gt;">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Size"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="concat" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="concat" super="false">
                                                                <receiver>
                                                                    <constant type="string">"Parameter for method \"removeAt\" of Sequence must be in [1, "</constant>
                                                                </receiver>
                                                                <argument>
                                                                    <data_method_call method_name="printString" super="false">
                                                                        <receiver>
                                                                            <variable name="Size"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"]"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">1</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="R"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                                <assignment variable_name="I">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="I"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <data_method_call method_name="setRemoved" super="false">
                                        <receiver>
                                            <variable name="R"/>
                                        </receiver>
                                        <argument>
                                            <constant type="boolean">true</constant>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setPrevious" super="false">
                                        <receiver>
                                            <data_method_call method_name="next" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="previous" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setNext" super="false">
                                        <receiver>
                                            <data_method_call method_name="previous" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="next" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="Size">
                                        <binary_operation operator="-">
                                            <left_operand>
                                                <variable name="Size"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Method \"removeAt\" of Sequence requires a Sequence of positive size"</constant>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="removeFirst" native="false">
                <return_type>Sequence</return_type>
                <local_variable name="R" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <data_method_call method_name="setRemoved" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="next" super="false">
                                                            <receiver>
                                                                <variable name="Root"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="boolean">true</constant>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <data_method_call method_name="setNext" super="false">
                                        <receiver>
                                            <variable name="Root"/>
                                        </receiver>
                                        <argument>
                                            <variable name="R"/>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setPrevious" super="false">
                                        <receiver>
                                            <variable name="R"/>
                                        </receiver>
                                        <argument>
                                            <variable name="Root"/>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="Size">
                                        <binary_operation operator="-">
                                            <left_operand>
                                                <variable name="Size"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="removeLast" native="false">
                <return_type>Sequence</return_type>
                <local_variable name="R" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="previous" super="false">
                                            <receiver>
                                                <data_method_call method_name="setRemoved" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="Root"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="boolean">true</constant>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <data_method_call method_name="setPrevious" super="false">
                                        <receiver>
                                            <variable name="Root"/>
                                        </receiver>
                                        <argument>
                                            <variable name="R"/>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setNext" super="false">
                                        <receiver>
                                            <variable name="R"/>
                                        </receiver>
                                        <argument>
                                            <variable name="Root"/>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="Size">
                                        <binary_operation operator="-">
                                            <left_operand>
                                                <variable name="Size"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="concat" native="false">
                <return_type>Sequence</return_type>
                <argument name="S" type="Sequence"/>
                <local_variable name="I" type="SequenceIterator"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="S"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Sequence"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter of method \"concat\" of Sequence must be a Sequence"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="I">
                            <data_method_call method_name="iterator" super="false">
                                <receiver>
                                    <variable name="S"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <unary_operation operator="!">
                                    <operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="isDone" super="false">
                                                <receiver>
                                                    <variable name="I"/>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </operand>
                                </unary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="append" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="element" super="false">
                                                <receiver>
                                                    <variable name="I"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="advance" super="false">
                                        <receiver>
                                            <variable name="I"/>
                                        </receiver>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="reverse" native="false">
                <return_type>Sequence</return_type>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="Q" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">1</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="R">
                                        <variable name="Root"/>
                                    </assignment>
                                    <assignment variable_name="Q">
                                        <data_method_call method_name="previous" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="Q"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="setPrevious" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="next" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setNext" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="Q"/>
                                                    </argument>
                                                </data_method_call>
                                                <assignment variable_name="R">
                                                    <variable name="Q"/>
                                                </assignment>
                                                <assignment variable_name="Q">
                                                    <data_method_call method_name="previous" super="false">
                                                        <receiver>
                                                            <variable name="Q"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <data_method_call method_name="setPrevious" super="false">
                                        <receiver>
                                            <variable name="R"/>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="next" super="false">
                                                <receiver>
                                                    <variable name="R"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setNext" super="false">
                                        <receiver>
                                            <variable name="R"/>
                                        </receiver>
                                        <argument>
                                            <variable name="Q"/>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="splice" native="false">
                <return_type>Sequence</return_type>
                <argument name="I" type="Integer"/>
                <argument name="S" type="Sequence"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="Q" type="CollectionElement"/>
                <local_variable name="X" type="CollectionElement"/>
                <local_variable name="Y" type="SequenceIterator"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="=">
                                                            <left_operand>
                                                                <variable name="S"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <nil/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="S"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Sequence"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"Second parameter of method \"splice\" of Sequence must be a Sequence"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="=">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <nil/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="I"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"First parameter of method \"splice\" of Sequence must be an Integer"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&lt;">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">1</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&gt;">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Size"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="concat" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="concat" super="false">
                                                                <receiver>
                                                                    <constant type="string">"First parameter for method \"splice\" of Sequence must be in [1, "</constant>
                                                                </receiver>
                                                                <argument>
                                                                    <data_method_call method_name="printString" super="false">
                                                                        <receiver>
                                                                            <variable name="Size"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"]"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <assignment variable_name="I">
                                        <binary_operation operator="-">
                                            <left_operand>
                                                <variable name="I"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="I"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                                <assignment variable_name="I">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="I"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <assignment variable_name="Q">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <assignment variable_name="Y">
                                        <data_method_call method_name="iterator" super="false">
                                            <receiver>
                                                <variable name="S"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <unary_operation operator="!">
                                                <operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="isDone" super="false">
                                                            <receiver>
                                                                <variable name="Y"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </operand>
                                            </unary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="X">
                                                    <data_method_call method_name="setElement" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="setRemoved" super="false">
                                                                <receiver>
                                                                    <data_method_call method_name="setCount" super="false">
                                                                        <receiver>
                                                                            <data_method_call method_name="setPrevious" super="false">
                                                                                <receiver>
                                                                                    <new data_class="CollectionElement"/>
                                                                                </receiver>
                                                                                <argument>
                                                                                    <variable name="R"/>
                                                                                </argument>
                                                                            </data_method_call>
                                                                        </receiver>
                                                                        <argument>
                                                                            <constant type="integer">1</constant>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </receiver>
                                                                <argument>
                                                                    <constant type="boolean">false</constant>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <data_method_call method_name="element" super="false">
                                                                <receiver>
                                                                    <variable name="Y"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </argument>
                                                    </data_method_call>
                                                </assignment>
                                                <data_method_call method_name="setNext" super="false">
                                                    <receiver>
                                                        <variable name="R"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="X"/>
                                                    </argument>
                                                </data_method_call>
                                                <assignment variable_name="R">
                                                    <variable name="X"/>
                                                </assignment>
                                                <assignment variable_name="Size">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="Size"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <data_method_call method_name="advance" super="false">
                                                    <receiver>
                                                        <variable name="Y"/>
                                                    </receiver>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <data_method_call method_name="setNext" super="false">
                                        <receiver>
                                            <variable name="X"/>
                                        </receiver>
                                        <argument>
                                            <variable name="Q"/>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setPrevious" super="false">
                                        <receiver>
                                            <variable name="Q"/>
                                        </receiver>
                                        <argument>
                                            <variable name="X"/>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="swap" native="false">
                <return_type>Sequence</return_type>
                <argument name="I" type="Integer"/>
                <argument name="J" type="Integer"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="Q" type="CollectionElement"/>
                <local_variable name="NF" type="Boolean"/>
                <local_variable name="C" type="Integer"/>
                <local_variable name="O" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;">
                                                <left_operand>
                                                    <variable name="Size"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">1</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="I"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="J"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <binary_operation operator="|">
                                                        <left_operand>
                                                            <binary_operation operator="|">
                                                                <left_operand>
                                                                    <sequence_of_expressions>
                                                                        <binary_operation operator="=">
                                                                            <left_operand>
                                                                                <variable name="I"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <nil/>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </sequence_of_expressions>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <sequence_of_expressions>
                                                                        <binary_operation operator="=">
                                                                            <left_operand>
                                                                                <variable name="J"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <nil/>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </sequence_of_expressions>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </left_operand>
                                                        <right_operand>
                                                            <sequence_of_expressions>
                                                                <data_method_call method_name="not" super="false">
                                                                    <receiver>
                                                                        <data_method_call method_name="isOfType" super="false">
                                                                            <receiver>
                                                                                <variable name="I"/>
                                                                            </receiver>
                                                                            <argument>
                                                                                <constant type="string">"Integer"</constant>
                                                                            </argument>
                                                                        </data_method_call>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </sequence_of_expressions>
                                                        </right_operand>
                                                    </binary_operation>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="J"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"Parameters of method \"splice\" of Sequence must be Integers"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <binary_operation operator="|">
                                                        <left_operand>
                                                            <binary_operation operator="|">
                                                                <left_operand>
                                                                    <sequence_of_expressions>
                                                                        <binary_operation operator="&lt;">
                                                                            <left_operand>
                                                                                <variable name="I"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <constant type="integer">1</constant>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </sequence_of_expressions>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <sequence_of_expressions>
                                                                        <binary_operation operator="&gt;">
                                                                            <left_operand>
                                                                                <variable name="I"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <variable name="Size"/>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </sequence_of_expressions>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </left_operand>
                                                        <right_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="&lt;">
                                                                    <left_operand>
                                                                        <variable name="J"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <constant type="integer">1</constant>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </right_operand>
                                                    </binary_operation>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&gt;">
                                                            <left_operand>
                                                                <variable name="J"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Size"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="concat" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="concat" super="false">
                                                                <receiver>
                                                                    <constant type="string">"Parameters for method \"swap\" of Sequence must be in [1, "</constant>
                                                                </receiver>
                                                                <argument>
                                                                    <data_method_call method_name="printString" super="false">
                                                                        <receiver>
                                                                            <variable name="Size"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"]"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <if>
                                        <condition>
                                            <binary_operation operator="&gt;">
                                                <left_operand>
                                                    <variable name="I"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="J"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <assignment variable_name="C">
                                                    <variable name="I"/>
                                                </assignment>
                                                <assignment variable_name="I">
                                                    <variable name="J"/>
                                                </assignment>
                                                <assignment variable_name="J">
                                                    <variable name="C"/>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                    <assignment variable_name="C">
                                        <constant type="integer">1</constant>
                                    </assignment>
                                    <assignment variable_name="NF">
                                        <constant type="boolean">true</constant>
                                    </assignment>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <variable name="NF"/>
                                        </condition>
                                        <body>
                                            <if>
                                                <condition>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="C"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="I"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </condition>
                                                <then>
                                                    <sequence_of_expressions>
                                                        <assignment variable_name="NF">
                                                            <constant type="boolean">false</constant>
                                                        </assignment>
                                                        <assignment variable_name="O">
                                                            <data_method_call method_name="element" super="false">
                                                                <receiver>
                                                                    <variable name="R"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </assignment>
                                                    </sequence_of_expressions>
                                                </then>
                                                <else>
                                                    <sequence_of_expressions>
                                                        <assignment variable_name="R">
                                                            <data_method_call method_name="next" super="false">
                                                                <receiver>
                                                                    <variable name="R"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </assignment>
                                                        <assignment variable_name="C">
                                                            <binary_operation operator="+">
                                                                <left_operand>
                                                                    <variable name="C"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <constant type="integer">1</constant>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </assignment>
                                                    </sequence_of_expressions>
                                                </else>
                                            </if>
                                        </body>
                                    </while>
                                    <assignment variable_name="NF">
                                        <constant type="boolean">true</constant>
                                    </assignment>
                                    <assignment variable_name="Q">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="R"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <assignment variable_name="C">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="C"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <variable name="NF"/>
                                        </condition>
                                        <body>
                                            <if>
                                                <condition>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="C"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="J"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </condition>
                                                <then>
                                                    <sequence_of_expressions>
                                                        <assignment variable_name="NF">
                                                            <constant type="boolean">false</constant>
                                                        </assignment>
                                                        <data_method_call method_name="setElement" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                            <argument>
                                                                <data_method_call method_name="element" super="false">
                                                                    <receiver>
                                                                        <variable name="Q"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </argument>
                                                        </data_method_call>
                                                        <data_method_call method_name="setElement" super="false">
                                                            <receiver>
                                                                <variable name="Q"/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="O"/>
                                                            </argument>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </then>
                                                <else>
                                                    <sequence_of_expressions>
                                                        <assignment variable_name="Q">
                                                            <data_method_call method_name="next" super="false">
                                                                <receiver>
                                                                    <variable name="Q"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </assignment>
                                                        <assignment variable_name="C">
                                                            <binary_operation operator="+">
                                                                <left_operand>
                                                                    <variable name="C"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <constant type="integer">1</constant>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </assignment>
                                                    </sequence_of_expressions>
                                                </else>
                                            </if>
                                        </body>
                                    </while>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="subSequence" native="false">
                <return_type>Sequence</return_type>
                <argument name="I" type="Integer"/>
                <argument name="L" type="Integer"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="S" type="Sequence"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="S">
                            <data_method_call method_name="clear" super="false">
                                <receiver>
                                    <new data_class="Sequence"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <binary_operation operator="|">
                                                        <left_operand>
                                                            <binary_operation operator="|">
                                                                <left_operand>
                                                                    <sequence_of_expressions>
                                                                        <binary_operation operator="=">
                                                                            <left_operand>
                                                                                <variable name="I"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <nil/>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </sequence_of_expressions>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <sequence_of_expressions>
                                                                        <binary_operation operator="=">
                                                                            <left_operand>
                                                                                <variable name="L"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <nil/>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </sequence_of_expressions>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </left_operand>
                                                        <right_operand>
                                                            <sequence_of_expressions>
                                                                <data_method_call method_name="not" super="false">
                                                                    <receiver>
                                                                        <data_method_call method_name="isOfType" super="false">
                                                                            <receiver>
                                                                                <variable name="I"/>
                                                                            </receiver>
                                                                            <argument>
                                                                                <constant type="string">"Integer"</constant>
                                                                            </argument>
                                                                        </data_method_call>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </sequence_of_expressions>
                                                        </right_operand>
                                                    </binary_operation>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="L"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"Parameters of method \"subSequence\" of Sequence must be Integers"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <if>
                                        <condition>
                                            <binary_operation operator="&lt;=">
                                                <left_operand>
                                                    <variable name="I"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"First parameter of method \"subSequence\" of Sequence must be positive"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <if>
                                        <condition>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="L"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"Second parameter of method \"subSequence\" of Sequence must not be negative"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <if>
                                        <condition>
                                            <binary_operation operator="&gt;">
                                                <left_operand>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="I"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="L"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </left_operand>
                                                <right_operand>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="Size"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="concat" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="concat" super="false">
                                                                <receiver>
                                                                    <constant type="string">"Sum of parameters for method \"subSequence\" of Sequence must be in [1, "</constant>
                                                                </receiver>
                                                                <argument>
                                                                    <data_method_call method_name="printString" super="false">
                                                                        <receiver>
                                                                            <sequence_of_expressions>
                                                                                <binary_operation operator="+">
                                                                                    <left_operand>
                                                                                        <variable name="Size"/>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <constant type="integer">1</constant>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </sequence_of_expressions>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"]"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">1</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="R"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                                <assignment variable_name="I">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="I"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="L"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">0</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="R"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="append" super="false">
                                                    <receiver>
                                                        <variable name="S"/>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="element" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                                <assignment variable_name="L">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="L"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <variable name="S"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="find" native="false">
                <return_type>Integer</return_type>
                <argument name="I" type="Integer"/>
                <argument name="O" type="Object"/>
                <local_variable name="R" type="CollectionElement"/>
                <local_variable name="NF" type="Boolean"/>
                <local_variable name="Index" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Index">
                            <constant type="integer">0</constant>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="=">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <nil/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="I"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"First parameter for method \"find\" of Sequence must be an Integer"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&lt;">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">1</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&gt;">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Size"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="concat" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="concat" super="false">
                                                                <receiver>
                                                                    <constant type="string">"First paramete for method \"find\" of Sequence must be in [1, "</constant>
                                                                </receiver>
                                                                <argument>
                                                                    <data_method_call method_name="printString" super="false">
                                                                        <receiver>
                                                                            <variable name="Size"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"]"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <assignment variable_name="NF">
                                        <constant type="boolean">true</constant>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">1</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="R"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                                <assignment variable_name="Index">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="Index"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <assignment variable_name="I">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="I"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <variable name="NF"/>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="R"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <if>
                                                    <condition>
                                                        <binary_operation operator="=">
                                                            <left_operand>
                                                                <data_method_call method_name="element" super="false">
                                                                    <receiver>
                                                                        <variable name="R"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="O"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </condition>
                                                    <then>
                                                        <assignment variable_name="NF">
                                                            <constant type="boolean">false</constant>
                                                        </assignment>
                                                    </then>
                                                </if>
                                                <assignment variable_name="Index">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="Index"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <if>
                                        <condition>
                                            <variable name="NF"/>
                                        </condition>
                                        <then>
                                            <assignment variable_name="Index">
                                                <constant type="integer">0</constant>
                                            </assignment>
                                        </then>
                                    </if>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <variable name="Index"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="iteratorAt" native="false">
                <return_type>SequenceIterator</return_type>
                <argument name="I" type="Integer"/>
                <local_variable name="R" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="=">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <nil/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="I"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"Parameter for method \"iteratorTo\" of Sequence must be an Integer"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&lt;">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">1</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&gt;">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Size"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="concat" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="concat" super="false">
                                                                <receiver>
                                                                    <constant type="string">"Parameter for method \"iteratorTo\" of Sequence must be in [1, "</constant>
                                                                </receiver>
                                                                <argument>
                                                                    <data_method_call method_name="printString" super="false">
                                                                        <receiver>
                                                                            <variable name="Size"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"]"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="I"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="integer">1</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="R"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                                <assignment variable_name="I">
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="I"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <return>
                                        <data_method_call method_name="referringTo" super="false">
                                            <receiver>
                                                <new data_class="SequenceIterator"/>
                                            </receiver>
                                            <argument>
                                                <self/>
                                            </argument>
                                            <argument>
                                                <variable name="R"/>
                                            </argument>
                                        </data_method_call>
                                    </return>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <return>
                                    <data_method_call method_name="referringTo" super="false">
                                        <receiver>
                                            <new data_class="SequenceIterator"/>
                                        </receiver>
                                        <argument>
                                            <self/>
                                        </argument>
                                        <argument>
                                            <variable name="Root"/>
                                        </argument>
                                    </data_method_call>
                                </return>
                            </else>
                        </if>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <local_variable name="PrintOut" type="String"/>
                <local_variable name="R" type="CollectionElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Root"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="clear" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Size"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <assignment variable_name="PrintOut">
                                    <constant type="string">"Empty Sequence"</constant>
                                </assignment>
                            </then>
                            <else>
                                <sequence_of_expressions>
                                    <assignment variable_name="PrintOut">
                                        <constant type="string">"Sequence{"</constant>
                                    </assignment>
                                    <assignment variable_name="R">
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="Root"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="R"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Root"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <variable name="PrintOut"/>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="R"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <if>
                                                    <condition>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <data_method_call method_name="next" super="false">
                                                                    <receiver>
                                                                        <variable name="R"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Root"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </condition>
                                                    <then>
                                                        <data_method_call method_name="concat" super="false">
                                                            <receiver>
                                                                <variable name="PrintOut"/>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">", "</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </then>
                                                </if>
                                                <assignment variable_name="R">
                                                    <data_method_call method_name="next" super="false">
                                                        <receiver>
                                                            <variable name="R"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <data_method_call method_name="concat" super="false">
                                        <receiver>
                                            <variable name="PrintOut"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"}"</constant>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </else>
                        </if>
                        <return>
                            <variable name="PrintOut"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="+" native="false">
                <return_type>Sequence</return_type>
                <argument name="S" type="Sequence"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="S"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Sequence"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter of operator \"+\" of Sequence must be a Sequence"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <data_method_call method_name="concat" super="false">
                                <receiver>
                                    <data_method_call method_name="deepCopy" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                    </data_method_call>
                                </receiver>
                                <argument>
                                    <variable name="S"/>
                                </argument>
                            </data_method_call>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Iterator" native="false">
            <super_class>Object</super_class>
            <instance_variable name="ReferredStructure" type="Object"/>
            <instance_variable name="ReferredElement" type="Element"/>
            <instance_variable name="StructureType" type="String"/>
            <data_method name="isDone" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <return>
                        <binary_operation operator="=">
                            <left_operand>
                                <variable name="ReferredElement"/>
                            </left_operand>
                            <right_operand>
                                <data_method_call method_name="root" super="false">
                                    <receiver>
                                        <variable name="ReferredStructure"/>
                                    </receiver>
                                </data_method_call>
                            </right_operand>
                        </binary_operation>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="advance" native="false">
                <return_type>Iterator</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <unary_operation operator="!">
                                    <operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="isDone" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </operand>
                                </unary_operation>
                            </condition>
                            <then>
                                <assignment variable_name="ReferredElement">
                                    <data_method_call method_name="next" super="false">
                                        <receiver>
                                            <variable name="ReferredElement"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="removed" super="false">
                                    <receiver>
                                        <variable name="ReferredElement"/>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <return>
                                    <data_method_call method_name="advance" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                    </data_method_call>
                                </return>
                            </then>
                            <else>
                                <return>
                                    <self/>
                                </return>
                            </else>
                        </if>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="remove" native="false">
                <return_type>Iterator</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <data_method_call method_name="not" super="false">
                                            <receiver>
                                                <data_method_call method_name="removed" super="false">
                                                    <receiver>
                                                        <variable name="ReferredElement"/>
                                                    </receiver>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </left_operand>
                                    <right_operand>
                                        <unary_operation operator="!">
                                            <operand>
                                                <sequence_of_expressions>
                                                    <data_method_call method_name="isDone" super="false">
                                                        <receiver>
                                                            <self/>
                                                        </receiver>
                                                    </data_method_call>
                                                </sequence_of_expressions>
                                            </operand>
                                        </unary_operation>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <data_method_call method_name="setNext" super="false">
                                        <receiver>
                                            <data_method_call method_name="previous" super="false">
                                                <receiver>
                                                    <variable name="ReferredElement"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="next" super="false">
                                                <receiver>
                                                    <variable name="ReferredElement"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setPrevious" super="false">
                                        <receiver>
                                            <data_method_call method_name="next" super="false">
                                                <receiver>
                                                    <variable name="ReferredElement"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <data_method_call method_name="previous" super="false">
                                                <receiver>
                                                    <variable name="ReferredElement"/>
                                                </receiver>
                                            </data_method_call>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="setRemoved" super="false">
                                        <receiver>
                                            <variable name="ReferredElement"/>
                                        </receiver>
                                        <argument>
                                            <constant type="boolean">true</constant>
                                        </argument>
                                    </data_method_call>
                                    <data_method_call method_name="resize" super="false">
                                        <receiver>
                                            <variable name="ReferredStructure"/>
                                        </receiver>
                                        <argument>
                                            <binary_operation operator="-">
                                                <left_operand>
                                                    <data_method_call method_name="size" super="false">
                                                        <receiver>
                                                            <variable name="ReferredStructure"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">1</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <local_variable name="Out" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Out">
                            <data_method_call method_name="concat" super="false">
                                <receiver>
                                    <constant type="string">"Iterator on "</constant>
                                </receiver>
                                <argument>
                                    <variable name="StructureType"/>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="ReferredElement"/>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="root" super="false">
                                            <receiver>
                                                <variable name="ReferredStructure"/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <data_method_call method_name="concat" super="false">
                                            <receiver>
                                                <variable name="Out"/>
                                            </receiver>
                                            <argument>
                                                <constant type="string">" to "</constant>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                    <argument>
                                        <data_method_call method_name="printString" super="false">
                                            <receiver>
                                                <variable name="ReferredElement"/>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <variable name="Out"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="referringTo" native="false">
                <return_type>Iterator</return_type>
                <argument name="S" type="Object"/>
                <argument name="E" type="Element"/>
                <argument name="T" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="ReferredStructure">
                            <variable name="S"/>
                        </assignment>
                        <assignment variable_name="ReferredElement">
                            <variable name="E"/>
                        </assignment>
                        <assignment variable_name="StructureType">
                            <variable name="T"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="key" native="false">
                <return_type>Object</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="error" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <constant type="string">"Method \"key\"is not defined on iterator for "</constant>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="StructureType"/>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                        </data_method_call>
                        <return>
                            <nil/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="value" native="false">
                <return_type>Object</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="error" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <constant type="string">"Method \"value\" is not defined on iterator for "</constant>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="StructureType"/>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                        </data_method_call>
                        <return>
                            <nil/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="element" native="false">
                <return_type>Object</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="error" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <constant type="string">"Method \"element\" is not defined on iterator for "</constant>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="StructureType"/>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                        </data_method_call>
                        <return>
                            <nil/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="reverse" native="false">
                <return_type>Object</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="error" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <constant type="string">"Method \"reverse\" is not defined on iterator for "</constant>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="StructureType"/>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                        </data_method_call>
                        <return>
                            <nil/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="MapIterator" native="false">
            <super_class>Iterator</super_class>
            <data_method name="key" native="false">
                <return_type>Object</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="key" super="false">
                            <receiver>
                                <variable name="ReferredElement"/>
                            </receiver>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="value" native="false">
                <return_type>Object</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="value" super="false">
                            <receiver>
                                <variable name="ReferredElement"/>
                            </receiver>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="referringTo" native="false">
                <return_type>Iterator</return_type>
                <argument name="S" type="Object"/>
                <argument name="E" type="Element"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="ReferredStructure">
                            <variable name="S"/>
                        </assignment>
                        <assignment variable_name="ReferredElement">
                            <variable name="E"/>
                        </assignment>
                        <assignment variable_name="StructureType">
                            <constant type="string">"Map"</constant>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="CollectionIterator" native="false">
            <super_class>Iterator</super_class>
            <data_method name="element" native="false">
                <return_type>Object</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="element" super="false">
                            <receiver>
                                <variable name="ReferredElement"/>
                            </receiver>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="BagIterator" native="false">
            <super_class>CollectionIterator</super_class>
            <instance_variable name="Index" type="Integer"/>
            <data_method name="advance" native="false">
                <return_type>BagIterator</return_type>
                <body_expression>
                    <if>
                        <condition>
                            <unary_operation operator="!">
                                <operand>
                                    <sequence_of_expressions>
                                        <data_method_call method_name="isDone" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                        </data_method_call>
                                    </sequence_of_expressions>
                                </operand>
                            </unary_operation>
                        </condition>
                        <then>
                            <sequence_of_expressions>
                                <assignment variable_name="Index">
                                    <binary_operation operator="-">
                                        <left_operand>
                                            <variable name="Index"/>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="integer">1</constant>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                                <if>
                                    <condition>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="Index"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">0</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <sequence_of_expressions>
                                            <assignment variable_name="ReferredElement">
                                                <data_method_call method_name="next" super="false">
                                                    <receiver>
                                                        <variable name="ReferredElement"/>
                                                    </receiver>
                                                </data_method_call>
                                            </assignment>
                                            <assignment variable_name="Index">
                                                <data_method_call method_name="count" super="false">
                                                    <receiver>
                                                        <variable name="ReferredElement"/>
                                                    </receiver>
                                                </data_method_call>
                                            </assignment>
                                        </sequence_of_expressions>
                                    </then>
                                </if>
                                <return>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="removed" super="false">
                                                            <receiver>
                                                                <variable name="ReferredElement"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&gt;">
                                                            <left_operand>
                                                                <variable name="Index"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="count" super="false">
                                                                    <receiver>
                                                                        <variable name="ReferredElement"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="advance" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                            </data_method_call>
                                        </then>
                                        <else>
                                            <self/>
                                        </else>
                                    </if>
                                </return>
                            </sequence_of_expressions>
                        </then>
                        <else>
                            <return>
                                <self/>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="remove" native="false">
                <return_type>BagIterator</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <data_method_call method_name="not" super="false">
                                            <receiver>
                                                <data_method_call method_name="removed" super="false">
                                                    <receiver>
                                                        <variable name="ReferredElement"/>
                                                    </receiver>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </left_operand>
                                    <right_operand>
                                        <unary_operation operator="!">
                                            <operand>
                                                <sequence_of_expressions>
                                                    <data_method_call method_name="isDone" super="false">
                                                        <receiver>
                                                            <self/>
                                                        </receiver>
                                                    </data_method_call>
                                                </sequence_of_expressions>
                                            </operand>
                                        </unary_operation>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="count" super="false">
                                                        <receiver>
                                                            <variable name="ReferredElement"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">1</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="setRemoved" super="false">
                                                    <receiver>
                                                        <variable name="ReferredElement"/>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="boolean">true</constant>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setNext" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="ReferredElement"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="next" super="false">
                                                            <receiver>
                                                                <variable name="ReferredElement"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="setPrevious" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="next" super="false">
                                                            <receiver>
                                                                <variable name="ReferredElement"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="previous" super="false">
                                                            <receiver>
                                                                <variable name="ReferredElement"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </then>
                                        <else>
                                            <data_method_call method_name="setCount" super="false">
                                                <receiver>
                                                    <variable name="ReferredElement"/>
                                                </receiver>
                                                <argument>
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <data_method_call method_name="count" super="false">
                                                                <receiver>
                                                                    <variable name="ReferredElement"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </argument>
                                            </data_method_call>
                                        </else>
                                    </if>
                                    <data_method_call method_name="resize" super="false">
                                        <receiver>
                                            <variable name="ReferredStructure"/>
                                        </receiver>
                                        <argument>
                                            <binary_operation operator="-">
                                                <left_operand>
                                                    <data_method_call method_name="size" super="false">
                                                        <receiver>
                                                            <variable name="ReferredStructure"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">1</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <local_variable name="Out" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Out">
                            <data_method_call method_name="concat" super="false">
                                <receiver>
                                    <constant type="string">"Iterator on "</constant>
                                </receiver>
                                <argument>
                                    <variable name="StructureType"/>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="ReferredElement"/>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="root" super="false">
                                            <receiver>
                                                <variable name="ReferredStructure"/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <data_method_call method_name="concat" super="false">
                                            <receiver>
                                                <variable name="Out"/>
                                            </receiver>
                                            <argument>
                                                <constant type="string">" to "</constant>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                    <argument>
                                        <data_method_call method_name="printString" super="false">
                                            <receiver>
                                                <data_method_call method_name="element" super="false">
                                                    <receiver>
                                                        <variable name="ReferredElement"/>
                                                    </receiver>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <return>
                            <variable name="Out"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="referringTo" native="false">
                <return_type>Iterator</return_type>
                <argument name="S" type="Object"/>
                <argument name="E" type="Element"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="ReferredStructure">
                            <variable name="S"/>
                        </assignment>
                        <assignment variable_name="ReferredElement">
                            <variable name="E"/>
                        </assignment>
                        <assignment variable_name="StructureType">
                            <constant type="string">"Bag"</constant>
                        </assignment>
                        <assignment variable_name="Index">
                            <data_method_call method_name="count" super="false">
                                <receiver>
                                    <variable name="ReferredElement"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="SequenceIterator" native="false">
            <super_class>CollectionIterator</super_class>
            <instance_variable name="Reverse" type="Boolean"/>
            <data_method name="first" native="false">
                <return_type>SequenceIterator</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="referringTo" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="ReferredStructure"/>
                            </argument>
                            <argument>
                                <data_method_call method_name="next" super="false">
                                    <receiver>
                                        <data_method_call method_name="root" super="false">
                                            <receiver>
                                                <variable name="ReferredStructure"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="last" native="false">
                <return_type>SequenceIterator</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="referringTo" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="ReferredStructure"/>
                            </argument>
                            <argument>
                                <data_method_call method_name="previous" super="false">
                                    <receiver>
                                        <data_method_call method_name="root" super="false">
                                            <receiver>
                                                <variable name="ReferredStructure"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="advance" native="false">
                <return_type>SequenceIterator</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <unary_operation operator="!">
                                    <operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="isDone" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </operand>
                                </unary_operation>
                            </condition>
                            <then>
                                <if>
                                    <condition>
                                        <variable name="Reverse"/>
                                    </condition>
                                    <then>
                                        <assignment variable_name="ReferredElement">
                                            <data_method_call method_name="previous" super="false">
                                                <receiver>
                                                    <variable name="ReferredElement"/>
                                                </receiver>
                                            </data_method_call>
                                        </assignment>
                                    </then>
                                    <else>
                                        <assignment variable_name="ReferredElement">
                                            <data_method_call method_name="next" super="false">
                                                <receiver>
                                                    <variable name="ReferredElement"/>
                                                </receiver>
                                            </data_method_call>
                                        </assignment>
                                    </else>
                                </if>
                            </then>
                        </if>
                        <return>
                            <if>
                                <condition>
                                    <data_method_call method_name="removed" super="false">
                                        <receiver>
                                            <variable name="ReferredElement"/>
                                        </receiver>
                                    </data_method_call>
                                </condition>
                                <then>
                                    <data_method_call method_name="advance" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                    </data_method_call>
                                </then>
                                <else>
                                    <self/>
                                </else>
                            </if>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="reverse" native="false">
                <return_type>SequenceIterator</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Reverse">
                            <data_method_call method_name="not" super="false">
                                <receiver>
                                    <variable name="Reverse"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="referringTo" native="false">
                <return_type>Iterator</return_type>
                <argument name="S" type="Object"/>
                <argument name="E" type="Element"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="ReferredStructure">
                            <variable name="S"/>
                        </assignment>
                        <assignment variable_name="ReferredElement">
                            <variable name="E"/>
                        </assignment>
                        <assignment variable_name="StructureType">
                            <constant type="string">"Sequence"</constant>
                        </assignment>
                        <assignment variable_name="Reverse">
                            <constant type="boolean">false</constant>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Element" native="false">
            <super_class>Object</super_class>
            <instance_variable name="Next" type="Element"/>
            <instance_variable name="Previous" type="Element"/>
            <data_method name="next" native="false">
                <return_type>Element</return_type>
                <body_expression>
                    <return>
                        <variable name="Next"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="previous" native="false">
                <return_type>Element</return_type>
                <body_expression>
                    <return>
                        <variable name="Previous"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="setNext" native="false">
                <return_type>Element</return_type>
                <argument name="E" type="Element"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Next">
                            <variable name="E"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="setPrevious" native="false">
                <return_type>Element</return_type>
                <argument name="E" type="Element"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Previous">
                            <variable name="E"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="MapElement" native="false">
            <super_class>Element</super_class>
            <instance_variable name="Key" type="Object"/>
            <instance_variable name="Value" type="Object"/>
            <instance_variable name="Removed" type="Boolean"/>
            <data_method name="key" native="false">
                <return_type>Object</return_type>
                <body_expression>
                    <return>
                        <variable name="Key"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="value" native="false">
                <return_type>Object</return_type>
                <body_expression>
                    <return>
                        <variable name="Value"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="removed" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <return>
                        <variable name="Removed"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="setKey" native="false">
                <return_type>MapElement</return_type>
                <argument name="K" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Key">
                            <variable name="K"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="setValue" native="false">
                <return_type>MapElement</return_type>
                <argument name="V" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Value">
                            <variable name="V"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="setRemoved" native="false">
                <return_type>MapElement</return_type>
                <argument name="B" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Removed">
                            <variable name="B"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="concat" super="false">
                            <receiver>
                                <data_method_call method_name="concat" super="false">
                                    <receiver>
                                        <data_method_call method_name="concat" super="false">
                                            <receiver>
                                                <data_method_call method_name="concat" super="false">
                                                    <receiver>
                                                        <constant type="string">"["</constant>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="Key"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <constant type="string">", "</constant>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                    <argument>
                                        <data_method_call method_name="printString" super="false">
                                            <receiver>
                                                <variable name="Value"/>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <constant type="string">"]"</constant>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="StructureElement" native="false">
            <super_class>Element</super_class>
            <instance_variable name="Element" type="Object"/>
            <data_method name="element" native="false">
                <return_type>Object</return_type>
                <body_expression>
                    <return>
                        <variable name="Element"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="setElement" native="false">
                <return_type>Element</return_type>
                <argument name="E" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Element">
                            <variable name="E"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="printString" super="false">
                            <receiver>
                                <variable name="Element"/>
                            </receiver>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="CollectionElement" native="false">
            <super_class>StructureElement</super_class>
            <instance_variable name="Count" type="Integer"/>
            <instance_variable name="Removed" type="Boolean"/>
            <data_method name="count" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <return>
                        <variable name="Count"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="removed" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <return>
                        <variable name="Removed"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="setCount" native="false">
                <return_type>CollectionElement</return_type>
                <argument name="C" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Count">
                            <variable name="C"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="setRemoved" native="false">
                <return_type>CollectionElement</return_type>
                <argument name="B" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Removed">
                            <variable name="B"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Distribution" native="false">
            <super_class>Object</super_class>
            <instance_variable name="Random" type="RandomGenerator"/>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <constant type="string">"Unspecified Distribution"</constant>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="initialise" native="false">
                <return_type>Distribution</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Random">
                            <data_method_call method_name="randomiseSeed" super="false">
                                <receiver>
                                    <new data_class="RandomGenerator"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Bernoulli" native="false">
            <super_class>Distribution</super_class>
            <instance_variable name="SuccessProbability" type="Real"/>
            <data_method name="withParameter" native="false">
                <return_type>Bernoulli</return_type>
                <argument name="S" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="initialise" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="S"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="S"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter of Bernoulli distribution must be an Integer or Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="S"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="S">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="S"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;">
                                                <left_operand>
                                                    <variable name="S"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">1.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for Bernoulli distribution must be within the interval [0, 1]"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="SuccessProbability">
                            <variable name="S"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="sample" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <return>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Random"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <binary_operation operator="&lt;">
                                    <left_operand>
                                        <data_method_call method_name="random" super="false">
                                            <receiver>
                                                <variable name="Random"/>
                                            </receiver>
                                        </data_method_call>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="SuccessProbability"/>
                                    </right_operand>
                                </binary_operation>
                            </then>
                            <else>
                                <nil/>
                            </else>
                        </if>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="yieldsSuccess" native="false">
                <return_type>Boolean</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="sample" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Random"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <constant type="string">"Bernoulli("</constant>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <variable name="SuccessProbability"/>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">")"</constant>
                                    </right_operand>
                                </binary_operation>
                            </then>
                            <else>
                                <constant type="string">"Uninitialized Bernoulli"</constant>
                            </else>
                        </if>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Beta" native="false">
            <super_class>Distribution</super_class>
            <instance_variable name="GammaA" type="Gamma"/>
            <instance_variable name="GammaB" type="Gamma"/>
            <instance_variable name="Alpha" type="Real"/>
            <instance_variable name="Beta" type="Real"/>
            <data_method name="withParameters" native="false">
                <return_type>Beta</return_type>
                <argument name="A" type="Object"/>
                <argument name="B" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="initialise" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <binary_operation operator="|">
                                            <left_operand>
                                                <binary_operation operator="|">
                                                    <left_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="=">
                                                                <left_operand>
                                                                    <variable name="A"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <nil/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="&amp;">
                                                                <left_operand>
                                                                    <sequence_of_expressions>
                                                                        <data_method_call method_name="not" super="false">
                                                                            <receiver>
                                                                                <data_method_call method_name="isOfType" super="false">
                                                                                    <receiver>
                                                                                        <variable name="A"/>
                                                                                    </receiver>
                                                                                    <argument>
                                                                                        <constant type="string">"Integer"</constant>
                                                                                    </argument>
                                                                                </data_method_call>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </sequence_of_expressions>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <sequence_of_expressions>
                                                                        <data_method_call method_name="not" super="false">
                                                                            <receiver>
                                                                                <data_method_call method_name="isOfType" super="false">
                                                                                    <receiver>
                                                                                        <variable name="A"/>
                                                                                    </receiver>
                                                                                    <argument>
                                                                                        <constant type="string">"Real"</constant>
                                                                                    </argument>
                                                                                </data_method_call>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </sequence_of_expressions>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="B"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <nil/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="B"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="B"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Shape parameters of Beta distribution must be Integers or Reals"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="A"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="A">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="A"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="B"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="B">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="B"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;=">
                                                <left_operand>
                                                    <variable name="B"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Shape parameters of Beta distribution should be larger than 0.0"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Alpha">
                            <variable name="A"/>
                        </assignment>
                        <assignment variable_name="Beta">
                            <variable name="B"/>
                        </assignment>
                        <assignment variable_name="GammaA">
                            <data_method_call method_name="withParameters" super="false">
                                <receiver>
                                    <new data_class="Gamma"/>
                                </receiver>
                                <argument>
                                    <variable name="Alpha"/>
                                </argument>
                                <argument>
                                    <constant type="real">1.0</constant>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="GammaB">
                            <data_method_call method_name="withParameters" super="false">
                                <receiver>
                                    <new data_class="Gamma"/>
                                </receiver>
                                <argument>
                                    <variable name="Beta"/>
                                </argument>
                                <argument>
                                    <constant type="real">1.0</constant>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="sample" native="false">
                <return_type>Real</return_type>
                <local_variable name="Sample" type="Real"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="!=">
                                <left_operand>
                                    <variable name="Random"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <sequence_of_expressions>
                                <assignment variable_name="Sample">
                                    <data_method_call method_name="sample" super="false">
                                        <receiver>
                                            <variable name="GammaA"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                                <return>
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <variable name="Sample"/>
                                        </left_operand>
                                        <right_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="Sample"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <data_method_call method_name="sample" super="false">
                                                            <receiver>
                                                                <variable name="GammaB"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </right_operand>
                                    </binary_operation>
                                </return>
                            </sequence_of_expressions>
                        </then>
                        <else>
                            <return>
                                <nil/>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Random"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"Beta("</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="Alpha"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">", "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <variable name="Beta"/>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">")"</constant>
                                    </right_operand>
                                </binary_operation>
                            </then>
                            <else>
                                <constant type="string">"Uninitialized Beta"</constant>
                            </else>
                        </if>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Beta4" native="false">
            <super_class>Distribution</super_class>
            <instance_variable name="GammaA" type="Gamma"/>
            <instance_variable name="GammaB" type="Gamma"/>
            <instance_variable name="Alpha" type="Real"/>
            <instance_variable name="Beta" type="Real"/>
            <instance_variable name="LowerBound" type="Real"/>
            <instance_variable name="UpperBound" type="Real"/>
            <instance_variable name="Fixed" type="Boolean"/>
            <data_method name="withParameters" native="false">
                <return_type>Beta4</return_type>
                <argument name="A" type="Object"/>
                <argument name="B" type="Object"/>
                <argument name="L" type="Object"/>
                <argument name="U" type="Object"/>
                <local_variable name="Temp" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="initialise" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <binary_operation operator="|">
                                            <left_operand>
                                                <binary_operation operator="|">
                                                    <left_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="=">
                                                                <left_operand>
                                                                    <variable name="A"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <nil/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="&amp;">
                                                                <left_operand>
                                                                    <sequence_of_expressions>
                                                                        <data_method_call method_name="not" super="false">
                                                                            <receiver>
                                                                                <data_method_call method_name="isOfType" super="false">
                                                                                    <receiver>
                                                                                        <variable name="A"/>
                                                                                    </receiver>
                                                                                    <argument>
                                                                                        <constant type="string">"Integer"</constant>
                                                                                    </argument>
                                                                                </data_method_call>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </sequence_of_expressions>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <sequence_of_expressions>
                                                                        <data_method_call method_name="not" super="false">
                                                                            <receiver>
                                                                                <data_method_call method_name="isOfType" super="false">
                                                                                    <receiver>
                                                                                        <variable name="A"/>
                                                                                    </receiver>
                                                                                    <argument>
                                                                                        <constant type="string">"Real"</constant>
                                                                                    </argument>
                                                                                </data_method_call>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </sequence_of_expressions>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="B"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <nil/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="B"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="B"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Shape parameters of Beta4 distribution must be Integers or Reals"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="L"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="L"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="L"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Lower Bound for Beta4 distribution must be an Integer or Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="U"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="U"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="U"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Upper Bound for Beta4 distribution must be an Integer or Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Alpha">
                            <variable name="A"/>
                        </assignment>
                        <assignment variable_name="Beta">
                            <variable name="B"/>
                        </assignment>
                        <assignment variable_name="LowerBound">
                            <variable name="L"/>
                        </assignment>
                        <assignment variable_name="UpperBound">
                            <variable name="U"/>
                        </assignment>
                        <assignment variable_name="Fixed">
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="LowerBound"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="UpperBound"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <if>
                            <condition>
                                <data_method_call method_name="not" super="false">
                                    <receiver>
                                        <variable name="Fixed"/>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="&gt;=">
                                                <left_operand>
                                                    <variable name="LowerBound"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="UpperBound"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <assignment variable_name="Temp">
                                                    <variable name="LowerBound"/>
                                                </assignment>
                                                <assignment variable_name="LowerBound">
                                                    <variable name="UpperBound"/>
                                                </assignment>
                                                <assignment variable_name="UpperBound">
                                                    <variable name="Temp"/>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&lt;=">
                                                            <left_operand>
                                                                <variable name="Alpha"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="real">0.0</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&lt;=">
                                                            <left_operand>
                                                                <variable name="Beta"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <constant type="real">0.0</constant>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"Shape parameters of Beta4 distribution should be larger than 0.0"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <assignment variable_name="GammaA">
                                        <data_method_call method_name="withParameters" super="false">
                                            <receiver>
                                                <new data_class="Gamma"/>
                                            </receiver>
                                            <argument>
                                                <variable name="Alpha"/>
                                            </argument>
                                            <argument>
                                                <constant type="real">1.0</constant>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                    <assignment variable_name="GammaB">
                                        <data_method_call method_name="withParameters" super="false">
                                            <receiver>
                                                <new data_class="Gamma"/>
                                            </receiver>
                                            <argument>
                                                <variable name="Beta"/>
                                            </argument>
                                            <argument>
                                                <constant type="real">1.0</constant>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="sample" native="false">
                <return_type>Real</return_type>
                <local_variable name="Sample" type="Real"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="!=">
                                <left_operand>
                                    <variable name="Random"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <if>
                                <condition>
                                    <variable name="Fixed"/>
                                </condition>
                                <then>
                                    <return>
                                        <variable name="LowerBound"/>
                                    </return>
                                </then>
                                <else>
                                    <sequence_of_expressions>
                                        <assignment variable_name="Sample">
                                            <data_method_call method_name="sample" super="false">
                                                <receiver>
                                                    <variable name="GammaA"/>
                                                </receiver>
                                            </data_method_call>
                                        </assignment>
                                        <if>
                                            <condition>
                                                <binary_operation operator="=">
                                                    <left_operand>
                                                        <variable name="Sample"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">0.0</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </condition>
                                            <then>
                                                <return>
                                                    <variable name="LowerBound"/>
                                                </return>
                                            </then>
                                            <else>
                                                <return>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="LowerBound"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <binary_operation operator="*">
                                                                <left_operand>
                                                                    <sequence_of_expressions>
                                                                        <binary_operation operator="-">
                                                                            <left_operand>
                                                                                <variable name="UpperBound"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <variable name="LowerBound"/>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </sequence_of_expressions>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <sequence_of_expressions>
                                                                        <binary_operation operator="/">
                                                                            <left_operand>
                                                                                <variable name="Sample"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <sequence_of_expressions>
                                                                                    <binary_operation operator="+">
                                                                                        <left_operand>
                                                                                            <variable name="Sample"/>
                                                                                        </left_operand>
                                                                                        <right_operand>
                                                                                            <data_method_call method_name="sample" super="false">
                                                                                                <receiver>
                                                                                                    <variable name="GammaB"/>
                                                                                                </receiver>
                                                                                            </data_method_call>
                                                                                        </right_operand>
                                                                                    </binary_operation>
                                                                                </sequence_of_expressions>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </sequence_of_expressions>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </right_operand>
                                                    </binary_operation>
                                                </return>
                                            </else>
                                        </if>
                                    </sequence_of_expressions>
                                </else>
                            </if>
                        </then>
                        <else>
                            <return>
                                <nil/>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Random"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <binary_operation operator="+">
                                                                    <left_operand>
                                                                        <binary_operation operator="+">
                                                                            <left_operand>
                                                                                <binary_operation operator="+">
                                                                                    <left_operand>
                                                                                        <binary_operation operator="+">
                                                                                            <left_operand>
                                                                                                <constant type="string">"Beta4("</constant>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <data_method_call method_name="printString" super="false">
                                                                                                    <receiver>
                                                                                                        <variable name="Alpha"/>
                                                                                                    </receiver>
                                                                                                </data_method_call>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <constant type="string">", "</constant>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <data_method_call method_name="printString" super="false">
                                                                                    <receiver>
                                                                                        <variable name="Beta"/>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <constant type="string">", "</constant>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="LowerBound"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">", "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <variable name="UpperBound"/>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">")"</constant>
                                    </right_operand>
                                </binary_operation>
                            </then>
                            <else>
                                <constant type="string">"Uninitialized Beta4"</constant>
                            </else>
                        </if>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="DiscreteUniform" native="false">
            <super_class>Distribution</super_class>
            <instance_variable name="LowerBound" type="Integer"/>
            <instance_variable name="IntervalLength" type="Integer"/>
            <instance_variable name="Fixed" type="Boolean"/>
            <data_method name="withParameters" native="false">
                <return_type>DiscreteUniform</return_type>
                <argument name="L" type="Object"/>
                <argument name="U" type="Object"/>
                <local_variable name="Temp" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="initialise" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <assignment variable_name="Fixed">
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="L"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="U"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <binary_operation operator="|">
                                            <left_operand>
                                                <binary_operation operator="|">
                                                    <left_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="=">
                                                                <left_operand>
                                                                    <variable name="L"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <nil/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <data_method_call method_name="not" super="false">
                                                                <receiver>
                                                                    <data_method_call method_name="isOfType" super="false">
                                                                        <receiver>
                                                                            <variable name="L"/>
                                                                        </receiver>
                                                                        <argument>
                                                                            <constant type="string">"Integer"</constant>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </receiver>
                                                            </data_method_call>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="U"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <nil/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="U"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameters of Discrete Uniform distribution must be Integers"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="L"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="U"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="Temp">
                                        <variable name="L"/>
                                    </assignment>
                                    <assignment variable_name="L">
                                        <variable name="U"/>
                                    </assignment>
                                    <assignment variable_name="U">
                                        <variable name="Temp"/>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <assignment variable_name="LowerBound">
                            <variable name="L"/>
                        </assignment>
                        <assignment variable_name="IntervalLength">
                            <binary_operation operator="+">
                                <left_operand>
                                    <binary_operation operator="-">
                                        <left_operand>
                                            <variable name="U"/>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="L"/>
                                        </right_operand>
                                    </binary_operation>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="sample" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="!=">
                                <left_operand>
                                    <variable name="Random"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <if>
                                    <condition>
                                        <variable name="Fixed"/>
                                    </condition>
                                    <then>
                                        <variable name="LowerBound"/>
                                    </then>
                                    <else>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="LowerBound"/>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="asInteger" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="floor" super="false">
                                                            <receiver>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="*">
                                                                        <left_operand>
                                                                            <data_method_call method_name="random" super="false">
                                                                                <receiver>
                                                                                    <variable name="Random"/>
                                                                                </receiver>
                                                                            </data_method_call>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <sequence_of_expressions>
                                                                                <data_method_call method_name="asReal" super="false">
                                                                                    <receiver>
                                                                                        <variable name="IntervalLength"/>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </sequence_of_expressions>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </else>
                                </if>
                            </return>
                        </then>
                        <else>
                            <return>
                                <nil/>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Random"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"DiscreteUniform("</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="LowerBound"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">", "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="-">
                                                                <left_operand>
                                                                    <binary_operation operator="+">
                                                                        <left_operand>
                                                                            <variable name="LowerBound"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <variable name="IntervalLength"/>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <constant type="integer">1</constant>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">")"</constant>
                                    </right_operand>
                                </binary_operation>
                            </then>
                            <else>
                                <constant type="string">"Uninitialized Discrete Uniform"</constant>
                            </else>
                        </if>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Exponential" native="false">
            <super_class>Distribution</super_class>
            <instance_variable name="Lambda" type="Real"/>
            <data_method name="withParameter" native="false">
                <return_type>Exponential</return_type>
                <argument name="L" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="initialise" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="L"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="L"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="L"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for Exponential distribution must be an Integer or Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="L"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="L">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="L"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <variable name="L"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="real">0.0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameter for Exponential distribution must be positive"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Lambda">
                            <variable name="L"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="sample" native="false">
                <return_type>Real</return_type>
                <local_variable name="Sample" type="Real"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="!=">
                                <left_operand>
                                    <variable name="Random"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <sequence_of_expressions>
                                <assignment variable_name="Sample">
                                    <binary_operation operator="/">
                                        <left_operand>
                                            <unary_operation operator="-">
                                                <operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="ln" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="random" super="false">
                                                                    <receiver>
                                                                        <variable name="Random"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </operand>
                                            </unary_operation>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="Lambda"/>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                                <return>
                                    <if>
                                        <condition>
                                            <binary_operation operator="&gt;">
                                                <left_operand>
                                                    <variable name="Sample"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <variable name="Sample"/>
                                        </then>
                                        <else>
                                            <data_method_call method_name="sample" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                            </data_method_call>
                                        </else>
                                    </if>
                                </return>
                            </sequence_of_expressions>
                        </then>
                        <else>
                            <return>
                                <nil/>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Random"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <constant type="string">"Exponential("</constant>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <variable name="Lambda"/>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">")"</constant>
                                    </right_operand>
                                </binary_operation>
                            </then>
                            <else>
                                <constant type="string">"Uninitialized Exponential Distribution"</constant>
                            </else>
                        </if>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Gamma" native="false">
            <super_class>Distribution</super_class>
            <instance_variable name="Alpha" type="Real"/>
            <instance_variable name="Beta" type="Real"/>
            <data_method name="withParameters" native="false">
                <return_type>Gamma</return_type>
                <argument name="A" type="Object"/>
                <argument name="B" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="initialise" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="A"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="A"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="A"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Shape parameter of Gamma distribution must be an Integer or a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="B"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="B"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="B"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Scale parameter of Gamma distribution must be an Integer or a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="A"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="A">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="A"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="B"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="B">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="B"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <variable name="A"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="real">0.0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Shape parameter of Gamma distribution should be larger than 0.0"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <variable name="B"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="real">0.0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Scale parameter of Gamma distribution should be larger than 0.0"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Alpha">
                            <variable name="A"/>
                        </assignment>
                        <assignment variable_name="Beta">
                            <variable name="B"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="sample" native="false">
                <return_type>Real</return_type>
                <local_variable name="T" type="Real"/>
                <local_variable name="ainv" type="Real"/>
                <local_variable name="e" type="Real"/>
                <local_variable name="b" type="Real"/>
                <local_variable name="p" type="Real"/>
                <local_variable name="bbb" type="Real"/>
                <local_variable name="ccc" type="Real"/>
                <local_variable name="u" type="Real"/>
                <local_variable name="u1" type="Real"/>
                <local_variable name="u2" type="Real"/>
                <local_variable name="v" type="Real"/>
                <local_variable name="x" type="Real"/>
                <local_variable name="z" type="Real"/>
                <local_variable name="r" type="Real"/>
                <local_variable name="MAGICCONST" type="Real"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="!=">
                                <left_operand>
                                    <variable name="Random"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <sequence_of_expressions>
                                <assignment variable_name="MAGICCONST">
                                    <binary_operation operator="+">
                                        <left_operand>
                                            <constant type="real">1.0</constant>
                                        </left_operand>
                                        <right_operand>
                                            <data_method_call method_name="ln" super="false">
                                                <receiver>
                                                    <constant type="real">4.5</constant>
                                                </receiver>
                                            </data_method_call>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                                <assignment variable_name="T">
                                    <constant type="real">-1.0</constant>
                                </assignment>
                                <if>
                                    <condition>
                                        <binary_operation operator="&gt;">
                                            <left_operand>
                                                <variable name="Alpha"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="real">1.0</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <sequence_of_expressions>
                                            <assignment variable_name="ainv">
                                                <data_method_call method_name="sqrt" super="false">
                                                    <receiver>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="-">
                                                                <left_operand>
                                                                    <binary_operation operator="*">
                                                                        <left_operand>
                                                                            <constant type="real">2.0</constant>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <variable name="Alpha"/>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <constant type="real">1.0</constant>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </receiver>
                                                </data_method_call>
                                            </assignment>
                                            <assignment variable_name="bbb">
                                                <binary_operation operator="-">
                                                    <left_operand>
                                                        <variable name="Alpha"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <data_method_call method_name="log" super="false">
                                                                <receiver>
                                                                    <constant type="real">4.0</constant>
                                                                </receiver>
                                                            </data_method_call>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </assignment>
                                            <assignment variable_name="ccc">
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="Alpha"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <variable name="ainv"/>
                                                    </right_operand>
                                                </binary_operation>
                                            </assignment>
                                            <while>
                                                <condition>
                                                    <binary_operation operator="&lt;">
                                                        <left_operand>
                                                            <variable name="T"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="real">0.0</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </condition>
                                                <body>
                                                    <sequence_of_expressions>
                                                        <assignment variable_name="u1">
                                                            <data_method_call method_name="random" super="false">
                                                                <receiver>
                                                                    <variable name="Random"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </assignment>
                                                        <if>
                                                            <condition>
                                                                <binary_operation operator="&amp;">
                                                                    <left_operand>
                                                                        <sequence_of_expressions>
                                                                            <binary_operation operator="&lt;">
                                                                                <left_operand>
                                                                                    <constant type="real">1.0e-7</constant>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <variable name="u1"/>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </sequence_of_expressions>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <sequence_of_expressions>
                                                                            <binary_operation operator="&lt;">
                                                                                <left_operand>
                                                                                    <variable name="u1"/>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <constant type="real">0.9999999</constant>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </sequence_of_expressions>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </condition>
                                                            <then>
                                                                <sequence_of_expressions>
                                                                    <assignment variable_name="u2">
                                                                        <binary_operation operator="-">
                                                                            <left_operand>
                                                                                <constant type="real">1.0</constant>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <data_method_call method_name="random" super="false">
                                                                                    <receiver>
                                                                                        <variable name="Random"/>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </assignment>
                                                                    <assignment variable_name="v">
                                                                        <binary_operation operator="/">
                                                                            <left_operand>
                                                                                <sequence_of_expressions>
                                                                                    <data_method_call method_name="ln" super="false">
                                                                                        <receiver>
                                                                                            <sequence_of_expressions>
                                                                                                <binary_operation operator="/">
                                                                                                    <left_operand>
                                                                                                        <variable name="u1"/>
                                                                                                    </left_operand>
                                                                                                    <right_operand>
                                                                                                        <sequence_of_expressions>
                                                                                                            <binary_operation operator="-">
                                                                                                                <left_operand>
                                                                                                                    <constant type="real">1.0</constant>
                                                                                                                </left_operand>
                                                                                                                <right_operand>
                                                                                                                    <variable name="u1"/>
                                                                                                                </right_operand>
                                                                                                            </binary_operation>
                                                                                                        </sequence_of_expressions>
                                                                                                    </right_operand>
                                                                                                </binary_operation>
                                                                                            </sequence_of_expressions>
                                                                                        </receiver>
                                                                                    </data_method_call>
                                                                                </sequence_of_expressions>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <variable name="ainv"/>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </assignment>
                                                                    <assignment variable_name="x">
                                                                        <binary_operation operator="*">
                                                                            <left_operand>
                                                                                <variable name="Alpha"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <sequence_of_expressions>
                                                                                    <data_method_call method_name="exp" super="false">
                                                                                        <receiver>
                                                                                            <variable name="v"/>
                                                                                        </receiver>
                                                                                    </data_method_call>
                                                                                </sequence_of_expressions>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </assignment>
                                                                    <assignment variable_name="z">
                                                                        <binary_operation operator="*">
                                                                            <left_operand>
                                                                                <binary_operation operator="*">
                                                                                    <left_operand>
                                                                                        <variable name="u1"/>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <variable name="u1"/>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <variable name="u2"/>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </assignment>
                                                                    <assignment variable_name="r">
                                                                        <binary_operation operator="-">
                                                                            <left_operand>
                                                                                <binary_operation operator="+">
                                                                                    <left_operand>
                                                                                        <variable name="bbb"/>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <binary_operation operator="*">
                                                                                            <left_operand>
                                                                                                <variable name="ccc"/>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <variable name="v"/>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <variable name="x"/>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </assignment>
                                                                    <if>
                                                                        <condition>
                                                                            <binary_operation operator="|">
                                                                                <left_operand>
                                                                                    <sequence_of_expressions>
                                                                                        <binary_operation operator="&gt;=">
                                                                                            <left_operand>
                                                                                                <sequence_of_expressions>
                                                                                                    <binary_operation operator="-">
                                                                                                        <left_operand>
                                                                                                            <binary_operation operator="+">
                                                                                                                <left_operand>
                                                                                                                    <variable name="r"/>
                                                                                                                </left_operand>
                                                                                                                <right_operand>
                                                                                                                    <variable name="MAGICCONST"/>
                                                                                                                </right_operand>
                                                                                                            </binary_operation>
                                                                                                        </left_operand>
                                                                                                        <right_operand>
                                                                                                            <binary_operation operator="*">
                                                                                                                <left_operand>
                                                                                                                    <constant type="real">4.5</constant>
                                                                                                                </left_operand>
                                                                                                                <right_operand>
                                                                                                                    <variable name="z"/>
                                                                                                                </right_operand>
                                                                                                            </binary_operation>
                                                                                                        </right_operand>
                                                                                                    </binary_operation>
                                                                                                </sequence_of_expressions>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <constant type="real">0.0</constant>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </sequence_of_expressions>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <sequence_of_expressions>
                                                                                        <binary_operation operator="&gt;=">
                                                                                            <left_operand>
                                                                                                <variable name="r"/>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <sequence_of_expressions>
                                                                                                    <data_method_call method_name="ln" super="false">
                                                                                                        <receiver>
                                                                                                            <variable name="z"/>
                                                                                                        </receiver>
                                                                                                    </data_method_call>
                                                                                                </sequence_of_expressions>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </sequence_of_expressions>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </condition>
                                                                        <then>
                                                                            <assignment variable_name="T">
                                                                                <binary_operation operator="*">
                                                                                    <left_operand>
                                                                                        <variable name="x"/>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <variable name="Beta"/>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </assignment>
                                                                        </then>
                                                                    </if>
                                                                </sequence_of_expressions>
                                                            </then>
                                                        </if>
                                                    </sequence_of_expressions>
                                                </body>
                                            </while>
                                        </sequence_of_expressions>
                                    </then>
                                </if>
                                <if>
                                    <condition>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="Alpha"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="real">1.0</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <sequence_of_expressions>
                                            <assignment variable_name="u">
                                                <data_method_call method_name="random" super="false">
                                                    <receiver>
                                                        <variable name="Random"/>
                                                    </receiver>
                                                </data_method_call>
                                            </assignment>
                                            <while>
                                                <condition>
                                                    <binary_operation operator="&lt;=">
                                                        <left_operand>
                                                            <variable name="u"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="real">1.0e-7</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </condition>
                                                <body>
                                                    <assignment variable_name="u">
                                                        <data_method_call method_name="random" super="false">
                                                            <receiver>
                                                                <variable name="Random"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </assignment>
                                                </body>
                                            </while>
                                            <assignment variable_name="T">
                                                <binary_operation operator="*">
                                                    <left_operand>
                                                        <unary_operation operator="-">
                                                            <operand>
                                                                <sequence_of_expressions>
                                                                    <data_method_call method_name="ln" super="false">
                                                                        <receiver>
                                                                            <variable name="u"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </sequence_of_expressions>
                                                            </operand>
                                                        </unary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <variable name="Beta"/>
                                                    </right_operand>
                                                </binary_operation>
                                            </assignment>
                                        </sequence_of_expressions>
                                    </then>
                                </if>
                                <if>
                                    <condition>
                                        <binary_operation operator="&lt;">
                                            <left_operand>
                                                <variable name="Alpha"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="real">1.0</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <while>
                                            <condition>
                                                <binary_operation operator="&lt;">
                                                    <left_operand>
                                                        <variable name="T"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">0.0</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </condition>
                                            <body>
                                                <sequence_of_expressions>
                                                    <assignment variable_name="u">
                                                        <data_method_call method_name="random" super="false">
                                                            <receiver>
                                                                <variable name="Random"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </assignment>
                                                    <assignment variable_name="e">
                                                        <data_method_call method_name="exp" super="false">
                                                            <receiver>
                                                                <constant type="real">1.0</constant>
                                                            </receiver>
                                                        </data_method_call>
                                                    </assignment>
                                                    <assignment variable_name="b">
                                                        <binary_operation operator="/">
                                                            <left_operand>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="+">
                                                                        <left_operand>
                                                                            <variable name="e"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <variable name="Alpha"/>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="e"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </assignment>
                                                    <assignment variable_name="p">
                                                        <binary_operation operator="*">
                                                            <left_operand>
                                                                <variable name="b"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="u"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </assignment>
                                                    <if>
                                                        <condition>
                                                            <binary_operation operator="&lt;=">
                                                                <left_operand>
                                                                    <variable name="p"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <constant type="real">1.0</constant>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </condition>
                                                        <then>
                                                            <assignment variable_name="x">
                                                                <data_method_call method_name="power" super="false">
                                                                    <receiver>
                                                                        <variable name="p"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <binary_operation operator="/">
                                                                            <left_operand>
                                                                                <constant type="real">1.0</constant>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <variable name="Alpha"/>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </argument>
                                                                </data_method_call>
                                                            </assignment>
                                                        </then>
                                                        <else>
                                                            <assignment variable_name="x">
                                                                <unary_operation operator="-">
                                                                    <operand>
                                                                        <sequence_of_expressions>
                                                                            <data_method_call method_name="ln" super="false">
                                                                                <receiver>
                                                                                    <sequence_of_expressions>
                                                                                        <binary_operation operator="/">
                                                                                            <left_operand>
                                                                                                <sequence_of_expressions>
                                                                                                    <binary_operation operator="-">
                                                                                                        <left_operand>
                                                                                                            <variable name="b"/>
                                                                                                        </left_operand>
                                                                                                        <right_operand>
                                                                                                            <variable name="p"/>
                                                                                                        </right_operand>
                                                                                                    </binary_operation>
                                                                                                </sequence_of_expressions>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <variable name="Alpha"/>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </sequence_of_expressions>
                                                                                </receiver>
                                                                            </data_method_call>
                                                                        </sequence_of_expressions>
                                                                    </operand>
                                                                </unary_operation>
                                                            </assignment>
                                                        </else>
                                                    </if>
                                                    <assignment variable_name="u1">
                                                        <data_method_call method_name="random" super="false">
                                                            <receiver>
                                                                <variable name="Random"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </assignment>
                                                    <if>
                                                        <condition>
                                                            <binary_operation operator="&gt;">
                                                                <left_operand>
                                                                    <variable name="p"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <constant type="real">1.0</constant>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </condition>
                                                        <then>
                                                            <if>
                                                                <condition>
                                                                    <binary_operation operator="&lt;=">
                                                                        <left_operand>
                                                                            <variable name="u1"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <sequence_of_expressions>
                                                                                <data_method_call method_name="power" super="false">
                                                                                    <receiver>
                                                                                        <variable name="x"/>
                                                                                    </receiver>
                                                                                    <argument>
                                                                                        <binary_operation operator="-">
                                                                                            <left_operand>
                                                                                                <variable name="Alpha"/>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <constant type="real">1.0</constant>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </argument>
                                                                                </data_method_call>
                                                                            </sequence_of_expressions>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </condition>
                                                                <then>
                                                                    <assignment variable_name="T">
                                                                        <binary_operation operator="*">
                                                                            <left_operand>
                                                                                <variable name="x"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <variable name="Beta"/>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </assignment>
                                                                </then>
                                                            </if>
                                                        </then>
                                                        <else>
                                                            <if>
                                                                <condition>
                                                                    <binary_operation operator="&lt;=">
                                                                        <left_operand>
                                                                            <variable name="u1"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <sequence_of_expressions>
                                                                                <data_method_call method_name="exp" super="false">
                                                                                    <receiver>
                                                                                        <sequence_of_expressions>
                                                                                            <unary_operation operator="-">
                                                                                                <operand>
                                                                                                    <variable name="x"/>
                                                                                                </operand>
                                                                                            </unary_operation>
                                                                                        </sequence_of_expressions>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </sequence_of_expressions>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </condition>
                                                                <then>
                                                                    <assignment variable_name="T">
                                                                        <binary_operation operator="*">
                                                                            <left_operand>
                                                                                <variable name="x"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <variable name="Beta"/>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </assignment>
                                                                </then>
                                                            </if>
                                                        </else>
                                                    </if>
                                                </sequence_of_expressions>
                                            </body>
                                        </while>
                                    </then>
                                </if>
                                <return>
                                    <variable name="T"/>
                                </return>
                            </sequence_of_expressions>
                        </then>
                        <else>
                            <return>
                                <nil/>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Random"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"Gamma("</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="Alpha"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">", "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <variable name="Beta"/>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">")"</constant>
                                    </right_operand>
                                </binary_operation>
                            </then>
                            <else>
                                <constant type="string">"Uninitialized Gamma Distribution"</constant>
                            </else>
                        </if>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Discrete" native="false">
            <super_class>Distribution</super_class>
            <instance_variable name="Samples" type="Array"/>
            <instance_variable name="LowerBounds" type="Array"/>
            <instance_variable name="UpperBounds" type="Array"/>
            <instance_variable name="Weights" type="Array"/>
            <data_method name="withParameters" native="false">
                <return_type>Discrete</return_type>
                <argument name="Value" type="Object"/>
                <argument name="Weight" type="Object"/>
                <local_variable name="Index" type="Integer"/>
                <local_variable name="Size" type="Integer"/>
                <local_variable name="CumulativeWeight" type="Real"/>
                <local_variable name="Total" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Random"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <data_method_call method_name="initialise" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                    </data_method_call>
                                    <assignment variable_name="Samples">
                                        <new data_class="Array"/>
                                    </assignment>
                                    <assignment variable_name="Weights">
                                        <new data_class="Array"/>
                                    </assignment>
                                    <assignment variable_name="LowerBounds">
                                        <new data_class="Array"/>
                                    </assignment>
                                    <assignment variable_name="UpperBounds">
                                        <new data_class="Array"/>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="Weight"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="Weight"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="Weight"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Weight parameter of Discrete distribution must be an Integer or a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="Weight"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="Weight">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="Weight"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <assignment variable_name="Size">
                            <binary_operation operator="+">
                                <left_operand>
                                    <data_method_call method_name="size" super="false">
                                        <receiver>
                                            <variable name="Samples"/>
                                        </receiver>
                                    </data_method_call>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <data_method_call method_name="resize" super="false">
                            <receiver>
                                <variable name="Samples"/>
                            </receiver>
                            <argument>
                                <variable name="Size"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="resize" super="false">
                            <receiver>
                                <variable name="Weights"/>
                            </receiver>
                            <argument>
                                <variable name="Size"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="putAt" super="false">
                            <receiver>
                                <variable name="Samples"/>
                            </receiver>
                            <argument>
                                <variable name="Size"/>
                            </argument>
                            <argument>
                                <variable name="Value"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="putAt" super="false">
                            <receiver>
                                <variable name="Weights"/>
                            </receiver>
                            <argument>
                                <variable name="Size"/>
                            </argument>
                            <argument>
                                <variable name="Weight"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="resize" super="false">
                            <receiver>
                                <variable name="LowerBounds"/>
                            </receiver>
                            <argument>
                                <variable name="Size"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="resize" super="false">
                            <receiver>
                                <variable name="UpperBounds"/>
                            </receiver>
                            <argument>
                                <variable name="Size"/>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="Index">
                            <constant type="integer">1</constant>
                        </assignment>
                        <assignment variable_name="Total">
                            <constant type="real">0.0</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <variable name="Index"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Size"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <assignment variable_name="Total">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="Total"/>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="at" super="false">
                                                    <receiver>
                                                        <variable name="Weights"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="Index"/>
                                                    </argument>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <assignment variable_name="Index">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="Index"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <assignment variable_name="Index">
                            <constant type="integer">1</constant>
                        </assignment>
                        <assignment variable_name="CumulativeWeight">
                            <constant type="real">0.0</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <variable name="Index"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Size"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="putAt" super="false">
                                        <receiver>
                                            <variable name="LowerBounds"/>
                                        </receiver>
                                        <argument>
                                            <variable name="Index"/>
                                        </argument>
                                        <argument>
                                            <binary_operation operator="/">
                                                <left_operand>
                                                    <variable name="CumulativeWeight"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Total"/>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="CumulativeWeight">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="CumulativeWeight"/>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="at" super="false">
                                                    <receiver>
                                                        <variable name="Weights"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="Index"/>
                                                    </argument>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <data_method_call method_name="putAt" super="false">
                                        <receiver>
                                            <variable name="UpperBounds"/>
                                        </receiver>
                                        <argument>
                                            <variable name="Index"/>
                                        </argument>
                                        <argument>
                                            <binary_operation operator="/">
                                                <left_operand>
                                                    <variable name="CumulativeWeight"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Total"/>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="Index">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="Index"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="sample" native="false">
                <return_type>Object</return_type>
                <local_variable name="Sample" type="Real"/>
                <local_variable name="Result" type="Object"/>
                <local_variable name="Index" type="Integer"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="!=">
                                <left_operand>
                                    <variable name="Random"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <sequence_of_expressions>
                                <assignment variable_name="Sample">
                                    <data_method_call method_name="random" super="false">
                                        <receiver>
                                            <variable name="Random"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                                <assignment variable_name="Index">
                                    <constant type="integer">1</constant>
                                </assignment>
                                <while>
                                    <condition>
                                        <binary_operation operator="&amp;">
                                            <left_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="Result"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <nil/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="&lt;=">
                                                        <left_operand>
                                                            <variable name="Index"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <data_method_call method_name="size" super="false">
                                                                <receiver>
                                                                    <variable name="Samples"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <body>
                                        <if>
                                            <condition>
                                                <binary_operation operator="&amp;">
                                                    <left_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="&lt;">
                                                                <left_operand>
                                                                    <data_method_call method_name="at" super="false">
                                                                        <receiver>
                                                                            <variable name="LowerBounds"/>
                                                                        </receiver>
                                                                        <argument>
                                                                            <variable name="Index"/>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <variable name="Sample"/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="&lt;=">
                                                                <left_operand>
                                                                    <variable name="Sample"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <data_method_call method_name="at" super="false">
                                                                        <receiver>
                                                                            <variable name="UpperBounds"/>
                                                                        </receiver>
                                                                        <argument>
                                                                            <variable name="Index"/>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </condition>
                                            <then>
                                                <assignment variable_name="Result">
                                                    <data_method_call method_name="at" super="false">
                                                        <receiver>
                                                            <variable name="Samples"/>
                                                        </receiver>
                                                        <argument>
                                                            <variable name="Index"/>
                                                        </argument>
                                                    </data_method_call>
                                                </assignment>
                                            </then>
                                            <else>
                                                <assignment variable_name="Index">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="Index"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </else>
                                        </if>
                                    </body>
                                </while>
                                <return>
                                    <variable name="Result"/>
                                </return>
                            </sequence_of_expressions>
                        </then>
                        <else>
                            <return>
                                <nil/>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <local_variable name="PrintOut" type="String"/>
                <local_variable name="Index" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Random"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="PrintOut">
                                        <constant type="string">"Discrete Distribution\n"</constant>
                                    </assignment>
                                    <assignment variable_name="Index">
                                        <constant type="integer">1</constant>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&lt;=">
                                                <left_operand>
                                                    <variable name="Index"/>
                                                </left_operand>
                                                <right_operand>
                                                    <data_method_call method_name="size" super="false">
                                                        <receiver>
                                                            <variable name="Samples"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="PrintOut">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <binary_operation operator="+">
                                                                <left_operand>
                                                                    <binary_operation operator="+">
                                                                        <left_operand>
                                                                            <binary_operation operator="+">
                                                                                <left_operand>
                                                                                    <variable name="PrintOut"/>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <constant type="string">"Value: "</constant>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <data_method_call method_name="printString" super="false">
                                                                                <receiver>
                                                                                    <data_method_call method_name="at" super="false">
                                                                                        <receiver>
                                                                                            <variable name="Samples"/>
                                                                                        </receiver>
                                                                                        <argument>
                                                                                            <variable name="Index"/>
                                                                                        </argument>
                                                                                    </data_method_call>
                                                                                </receiver>
                                                                            </data_method_call>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <constant type="string">" Probability: "</constant>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </left_operand>
                                                        <right_operand>
                                                            <data_method_call method_name="cr" super="false">
                                                                <receiver>
                                                                    <data_method_call method_name="printString" super="false">
                                                                        <receiver>
                                                                            <sequence_of_expressions>
                                                                                <binary_operation operator="-">
                                                                                    <left_operand>
                                                                                        <data_method_call method_name="at" super="false">
                                                                                            <receiver>
                                                                                                <variable name="UpperBounds"/>
                                                                                            </receiver>
                                                                                            <argument>
                                                                                                <variable name="Index"/>
                                                                                            </argument>
                                                                                        </data_method_call>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <data_method_call method_name="at" super="false">
                                                                                            <receiver>
                                                                                                <variable name="LowerBounds"/>
                                                                                            </receiver>
                                                                                            <argument>
                                                                                                <variable name="Index"/>
                                                                                            </argument>
                                                                                        </data_method_call>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </sequence_of_expressions>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </receiver>
                                                            </data_method_call>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <assignment variable_name="Index">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="Index"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                </sequence_of_expressions>
                            </then>
                            <else>
                                <assignment variable_name="PrintOut">
                                    <constant type="string">"Uninitialized Discrete Distribution"</constant>
                                </assignment>
                            </else>
                        </if>
                        <return>
                            <variable name="PrintOut"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Normal" native="false">
            <super_class>Distribution</super_class>
            <instance_variable name="Mean" type="Real"/>
            <instance_variable name="StandardDeviation" type="Real"/>
            <data_method name="withParameters" native="false">
                <return_type>Normal</return_type>
                <argument name="M" type="Object"/>
                <argument name="V" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="initialise" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="M"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="M"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="M"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Mean parameter of Normal distribution must be an Integer or a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="V"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="V"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="V"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Variance parameter of Normal distribution must be an Integer or a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="M"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="M">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="M"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="V"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="V">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="V"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <assignment variable_name="Mean">
                            <variable name="M"/>
                        </assignment>
                        <assignment variable_name="StandardDeviation">
                            <data_method_call method_name="sqrt" super="false">
                                <receiver>
                                    <variable name="V"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="sample" native="false">
                <return_type>Real</return_type>
                <local_variable name="S" type="Real"/>
                <local_variable name="U" type="Real"/>
                <local_variable name="X" type="Real"/>
                <local_variable name="Y" type="Real"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="!=">
                                <left_operand>
                                    <variable name="Random"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <sequence_of_expressions>
                                <assignment variable_name="S">
                                    <constant type="real">1.0</constant>
                                </assignment>
                                <while>
                                    <condition>
                                        <binary_operation operator="&gt;=">
                                            <left_operand>
                                                <variable name="S"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="real">1.0</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <body>
                                        <sequence_of_expressions>
                                            <assignment variable_name="X">
                                                <binary_operation operator="-">
                                                    <left_operand>
                                                        <binary_operation operator="*">
                                                            <left_operand>
                                                                <constant type="real">2.0</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="random" super="false">
                                                                    <receiver>
                                                                        <variable name="Random"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">1.0</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </assignment>
                                            <assignment variable_name="Y">
                                                <binary_operation operator="-">
                                                    <left_operand>
                                                        <binary_operation operator="*">
                                                            <left_operand>
                                                                <constant type="real">2.0</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="random" super="false">
                                                                    <receiver>
                                                                        <variable name="Random"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="real">1.0</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </assignment>
                                            <assignment variable_name="S">
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="*">
                                                                <left_operand>
                                                                    <variable name="X"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <variable name="X"/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="*">
                                                                <left_operand>
                                                                    <variable name="Y"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <variable name="Y"/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </assignment>
                                        </sequence_of_expressions>
                                    </body>
                                </while>
                                <assignment variable_name="U">
                                    <data_method_call method_name="sqrt" super="false">
                                        <receiver>
                                            <sequence_of_expressions>
                                                <binary_operation operator="/">
                                                    <left_operand>
                                                        <binary_operation operator="*">
                                                            <left_operand>
                                                                <constant type="real">-2.0</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <sequence_of_expressions>
                                                                    <data_method_call method_name="ln" super="false">
                                                                        <receiver>
                                                                            <variable name="S"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </sequence_of_expressions>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <variable name="S"/>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                                <return>
                                    <binary_operation operator="+">
                                        <left_operand>
                                            <variable name="Mean"/>
                                        </left_operand>
                                        <right_operand>
                                            <sequence_of_expressions>
                                                <binary_operation operator="*">
                                                    <left_operand>
                                                        <binary_operation operator="*">
                                                            <left_operand>
                                                                <variable name="X"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="U"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <variable name="StandardDeviation"/>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </right_operand>
                                    </binary_operation>
                                </return>
                            </sequence_of_expressions>
                        </then>
                        <else>
                            <return>
                                <nil/>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Random"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"Normal("</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="Mean"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">", "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="sqr" super="false">
                                                            <receiver>
                                                                <variable name="StandardDeviation"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">")"</constant>
                                    </right_operand>
                                </binary_operation>
                            </then>
                            <else>
                                <constant type="string">"Uninitialized Normal Distribution"</constant>
                            </else>
                        </if>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="PERT" native="false">
            <super_class>Beta4</super_class>
            <instance_variable name="Mode" type="Real"/>
            <data_method name="withParameters" native="false">
                <return_type>PERT</return_type>
                <argument name="L" type="Object"/>
                <argument name="M" type="Object"/>
                <argument name="U" type="Object"/>
                <local_variable name="Mean" type="Real"/>
                <local_variable name="Std" type="Real"/>
                <local_variable name="Temp" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="initialise" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="L"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="L"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="L"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Lower Bound for PERT distribution must be an Integer or a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="M"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="M"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="M"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Mode Bound for PERT distribution must be an Integer or a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="U"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="U"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="U"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Upper Bound for PERT distribution must be an Integer or a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="L"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="L">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="L"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="M"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="M">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="M"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="U"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="U">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="U"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <assignment variable_name="LowerBound">
                            <variable name="L"/>
                        </assignment>
                        <assignment variable_name="UpperBound">
                            <variable name="U"/>
                        </assignment>
                        <assignment variable_name="Mode">
                            <variable name="M"/>
                        </assignment>
                        <assignment variable_name="Fixed">
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="LowerBound"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="UpperBound"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <if>
                            <condition>
                                <data_method_call method_name="not" super="false">
                                    <receiver>
                                        <variable name="Fixed"/>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="&gt;">
                                                <left_operand>
                                                    <variable name="LowerBound"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="UpperBound"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <assignment variable_name="Temp">
                                                    <variable name="LowerBound"/>
                                                </assignment>
                                                <assignment variable_name="LowerBound">
                                                    <variable name="UpperBound"/>
                                                </assignment>
                                                <assignment variable_name="UpperBound">
                                                    <variable name="Temp"/>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&gt;=">
                                                            <left_operand>
                                                                <variable name="LowerBound"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Mode"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&gt;=">
                                                            <left_operand>
                                                                <variable name="Mode"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="UpperBound"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"Parameters of PERT distribution do not satisfy LowerBound &lt; Mode &lt; UpperBound or LowerBound = UpperBound"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <assignment variable_name="Mean">
                                        <binary_operation operator="/">
                                            <left_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <binary_operation operator="+">
                                                                <left_operand>
                                                                    <variable name="LowerBound"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <binary_operation operator="*">
                                                                        <left_operand>
                                                                            <constant type="real">4.0</constant>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <variable name="Mode"/>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="UpperBound"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="real">6.0</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <assignment variable_name="Std">
                                        <binary_operation operator="/">
                                            <left_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="UpperBound"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="LowerBound"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="real">6.0</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <assignment variable_name="Alpha">
                                        <binary_operation operator="*">
                                            <left_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="/">
                                                        <left_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="-">
                                                                    <left_operand>
                                                                        <variable name="Mean"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="LowerBound"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </left_operand>
                                                        <right_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="-">
                                                                    <left_operand>
                                                                        <variable name="UpperBound"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="LowerBound"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="/">
                                                                    <left_operand>
                                                                        <sequence_of_expressions>
                                                                            <binary_operation operator="*">
                                                                                <left_operand>
                                                                                    <sequence_of_expressions>
                                                                                        <binary_operation operator="-">
                                                                                            <left_operand>
                                                                                                <variable name="Mean"/>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <variable name="LowerBound"/>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </sequence_of_expressions>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <sequence_of_expressions>
                                                                                        <binary_operation operator="-">
                                                                                            <left_operand>
                                                                                                <variable name="UpperBound"/>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <variable name="Mean"/>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </sequence_of_expressions>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </sequence_of_expressions>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <sequence_of_expressions>
                                                                            <data_method_call method_name="sqr" super="false">
                                                                                <receiver>
                                                                                    <variable name="Std"/>
                                                                                </receiver>
                                                                            </data_method_call>
                                                                        </sequence_of_expressions>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="real">1.0</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <assignment variable_name="Beta">
                                        <binary_operation operator="*">
                                            <left_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="/">
                                                        <left_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="-">
                                                                    <left_operand>
                                                                        <variable name="UpperBound"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="Mean"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </left_operand>
                                                        <right_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="-">
                                                                    <left_operand>
                                                                        <variable name="Mean"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="LowerBound"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="Alpha"/>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <assignment variable_name="GammaA">
                                        <data_method_call method_name="withParameters" super="false">
                                            <receiver>
                                                <new data_class="Gamma"/>
                                            </receiver>
                                            <argument>
                                                <variable name="Alpha"/>
                                            </argument>
                                            <argument>
                                                <constant type="real">1.0</constant>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                    <assignment variable_name="GammaB">
                                        <data_method_call method_name="withParameters" super="false">
                                            <receiver>
                                                <new data_class="Gamma"/>
                                            </receiver>
                                            <argument>
                                                <variable name="Beta"/>
                                            </argument>
                                            <argument>
                                                <constant type="real">1.0</constant>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Random"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <binary_operation operator="+">
                                                                    <left_operand>
                                                                        <binary_operation operator="+">
                                                                            <left_operand>
                                                                                <constant type="string">"PERT("</constant>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <data_method_call method_name="printString" super="false">
                                                                                    <receiver>
                                                                                        <variable name="LowerBound"/>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <constant type="string">", "</constant>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="Mode"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">", "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <variable name="UpperBound"/>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">")"</constant>
                                    </right_operand>
                                </binary_operation>
                            </then>
                            <else>
                                <constant type="string">"Uninitialized PERT Distribution"</constant>
                            </else>
                        </if>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Triangle" native="false">
            <super_class>Distribution</super_class>
            <instance_variable name="LowerBound" type="Real"/>
            <instance_variable name="Mode" type="Real"/>
            <instance_variable name="UpperBound" type="Real"/>
            <instance_variable name="Fixed" type="Boolean"/>
            <data_method name="withParameters" native="false">
                <return_type>Triangle</return_type>
                <argument name="L" type="Object"/>
                <argument name="M" type="Object"/>
                <argument name="U" type="Object"/>
                <local_variable name="Temp" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="initialise" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="L"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="L"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="L"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Lower Bound for Triangle distribution must be an Integer or a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="M"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="M"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="M"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Mode Bound for Triangle distribution must be an Integer or a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="U"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="U"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="U"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Upper Bound for Triangle distribution must be an Integer or a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="L"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="L">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="L"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="M"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="M">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="M"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="U"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="U">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="U"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <assignment variable_name="LowerBound">
                            <variable name="L"/>
                        </assignment>
                        <assignment variable_name="UpperBound">
                            <variable name="U"/>
                        </assignment>
                        <assignment variable_name="Mode">
                            <variable name="M"/>
                        </assignment>
                        <assignment variable_name="Fixed">
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="LowerBound"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="UpperBound"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <if>
                            <condition>
                                <data_method_call method_name="not" super="false">
                                    <receiver>
                                        <variable name="Fixed"/>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="&gt;">
                                                <left_operand>
                                                    <variable name="LowerBound"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="UpperBound"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <assignment variable_name="Temp">
                                                    <variable name="LowerBound"/>
                                                </assignment>
                                                <assignment variable_name="LowerBound">
                                                    <variable name="UpperBound"/>
                                                </assignment>
                                                <assignment variable_name="UpperBound">
                                                    <variable name="Temp"/>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                    <if>
                                        <condition>
                                            <binary_operation operator="|">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&gt;=">
                                                            <left_operand>
                                                                <variable name="LowerBound"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Mode"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&gt;=">
                                                            <left_operand>
                                                                <variable name="Mode"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="UpperBound"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="error" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">"Parameters of Triangle distribution do not satisfy LowerBound &lt; Mode &lt; UpperBound or LowerBound = UpperBound"</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="sample" native="false">
                <return_type>Real</return_type>
                <local_variable name="Sample" type="Real"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="!=">
                                <left_operand>
                                    <variable name="Random"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <if>
                                <condition>
                                    <variable name="Fixed"/>
                                </condition>
                                <then>
                                    <return>
                                        <variable name="LowerBound"/>
                                    </return>
                                </then>
                                <else>
                                    <sequence_of_expressions>
                                        <assignment variable_name="Sample">
                                            <data_method_call method_name="random" super="false">
                                                <receiver>
                                                    <variable name="Random"/>
                                                </receiver>
                                            </data_method_call>
                                        </assignment>
                                        <if>
                                            <condition>
                                                <binary_operation operator="&lt;=">
                                                    <left_operand>
                                                        <variable name="Sample"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <binary_operation operator="/">
                                                            <left_operand>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="-">
                                                                        <left_operand>
                                                                            <variable name="Mode"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <variable name="LowerBound"/>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </left_operand>
                                                            <right_operand>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="-">
                                                                        <left_operand>
                                                                            <variable name="UpperBound"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <variable name="LowerBound"/>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </right_operand>
                                                </binary_operation>
                                            </condition>
                                            <then>
                                                <return>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="LowerBound"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <data_method_call method_name="sqrt" super="false">
                                                                <receiver>
                                                                    <sequence_of_expressions>
                                                                        <binary_operation operator="*">
                                                                            <left_operand>
                                                                                <binary_operation operator="*">
                                                                                    <left_operand>
                                                                                        <variable name="Sample"/>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <sequence_of_expressions>
                                                                                            <binary_operation operator="-">
                                                                                                <left_operand>
                                                                                                    <variable name="UpperBound"/>
                                                                                                </left_operand>
                                                                                                <right_operand>
                                                                                                    <variable name="LowerBound"/>
                                                                                                </right_operand>
                                                                                            </binary_operation>
                                                                                        </sequence_of_expressions>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <sequence_of_expressions>
                                                                                    <binary_operation operator="-">
                                                                                        <left_operand>
                                                                                            <variable name="Mode"/>
                                                                                        </left_operand>
                                                                                        <right_operand>
                                                                                            <variable name="LowerBound"/>
                                                                                        </right_operand>
                                                                                    </binary_operation>
                                                                                </sequence_of_expressions>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </sequence_of_expressions>
                                                                </receiver>
                                                            </data_method_call>
                                                        </right_operand>
                                                    </binary_operation>
                                                </return>
                                            </then>
                                            <else>
                                                <return>
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <variable name="UpperBound"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <data_method_call method_name="sqrt" super="false">
                                                                <receiver>
                                                                    <sequence_of_expressions>
                                                                        <binary_operation operator="*">
                                                                            <left_operand>
                                                                                <binary_operation operator="*">
                                                                                    <left_operand>
                                                                                        <sequence_of_expressions>
                                                                                            <binary_operation operator="-">
                                                                                                <left_operand>
                                                                                                    <constant type="real">1.0</constant>
                                                                                                </left_operand>
                                                                                                <right_operand>
                                                                                                    <variable name="Sample"/>
                                                                                                </right_operand>
                                                                                            </binary_operation>
                                                                                        </sequence_of_expressions>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <sequence_of_expressions>
                                                                                            <binary_operation operator="-">
                                                                                                <left_operand>
                                                                                                    <variable name="UpperBound"/>
                                                                                                </left_operand>
                                                                                                <right_operand>
                                                                                                    <variable name="LowerBound"/>
                                                                                                </right_operand>
                                                                                            </binary_operation>
                                                                                        </sequence_of_expressions>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <sequence_of_expressions>
                                                                                    <binary_operation operator="-">
                                                                                        <left_operand>
                                                                                            <variable name="UpperBound"/>
                                                                                        </left_operand>
                                                                                        <right_operand>
                                                                                            <variable name="Mode"/>
                                                                                        </right_operand>
                                                                                    </binary_operation>
                                                                                </sequence_of_expressions>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </sequence_of_expressions>
                                                                </receiver>
                                                            </data_method_call>
                                                        </right_operand>
                                                    </binary_operation>
                                                </return>
                                            </else>
                                        </if>
                                    </sequence_of_expressions>
                                </else>
                            </if>
                        </then>
                        <else>
                            <return>
                                <nil/>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Random"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <binary_operation operator="+">
                                                                    <left_operand>
                                                                        <binary_operation operator="+">
                                                                            <left_operand>
                                                                                <constant type="string">"Triangle("</constant>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <data_method_call method_name="printString" super="false">
                                                                                    <receiver>
                                                                                        <variable name="LowerBound"/>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <constant type="string">", "</constant>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="Mode"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">", "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <variable name="UpperBound"/>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">")"</constant>
                                    </right_operand>
                                </binary_operation>
                            </then>
                            <else>
                                <constant type="string">"Uninitialized Trangle Distribution"</constant>
                            </else>
                        </if>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Uniform" native="false">
            <super_class>Distribution</super_class>
            <instance_variable name="LowerBound" type="Real"/>
            <instance_variable name="IntervalLength" type="Real"/>
            <data_method name="withParameters" native="false">
                <return_type>Uniform</return_type>
                <argument name="L" type="Object"/>
                <argument name="U" type="Object"/>
                <local_variable name="Temp" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="initialise" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="L"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="L"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="L"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Lower Bound for Uniform distribution must be an Integer or a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="U"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="U"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="U"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Upper Bound for Uniform distribution must be an Integer or a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="L"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="L">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="L"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="U"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="U">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="U"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="L"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="U"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="Temp">
                                        <variable name="L"/>
                                    </assignment>
                                    <assignment variable_name="L">
                                        <variable name="U"/>
                                    </assignment>
                                    <assignment variable_name="U">
                                        <variable name="Temp"/>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <assignment variable_name="LowerBound">
                            <variable name="L"/>
                        </assignment>
                        <assignment variable_name="IntervalLength">
                            <binary_operation operator="-">
                                <left_operand>
                                    <variable name="U"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="L"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="sample" native="false">
                <return_type>Real</return_type>
                <body_expression>
                    <return>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Random"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <variable name="LowerBound"/>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="*">
                                                <left_operand>
                                                    <data_method_call method_name="random" super="false">
                                                        <receiver>
                                                            <variable name="Random"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="IntervalLength"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </then>
                            <else>
                                <nil/>
                            </else>
                        </if>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Random"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"Uniform("</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="LowerBound"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">", "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="+">
                                                                <left_operand>
                                                                    <variable name="LowerBound"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <variable name="IntervalLength"/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">")"</constant>
                                    </right_operand>
                                </binary_operation>
                            </then>
                            <else>
                                <constant type="string">"Uninitialized Uniform Distribution"</constant>
                            </else>
                        </if>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Weibull" native="false">
            <super_class>Distribution</super_class>
            <instance_variable name="Shape" type="Real"/>
            <instance_variable name="Scale" type="Real"/>
            <data_method name="withParameters" native="false">
                <return_type>Weibull</return_type>
                <argument name="K" type="Object"/>
                <argument name="L" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="initialise" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="K"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="K"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="K"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Scale parameter for Weibull distribution must be an Integer or a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="L"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="L"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="L"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Shape parameter for Weibull distribution must be an Integer or a Real"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="K"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="K">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="K"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="L"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="L">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="L"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;=">
                                                <left_operand>
                                                    <variable name="K"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;=">
                                                <left_operand>
                                                    <variable name="L"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="real">0.0</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Parameters for Weibull distribution must be larger than 0.0"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Scale">
                            <binary_operation operator="/">
                                <left_operand>
                                    <variable name="L"/>
                                </left_operand>
                                <right_operand>
                                    <data_method_call method_name="gamma" super="false">
                                        <receiver>
                                            <self/>
                                        </receiver>
                                        <argument>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <constant type="real">1.0</constant>
                                                </left_operand>
                                                <right_operand>
                                                    <binary_operation operator="/">
                                                        <left_operand>
                                                            <constant type="real">1.0</constant>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="K"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                    </data_method_call>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="Shape">
                            <variable name="K"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="sample" native="false">
                <return_type>Real</return_type>
                <local_variable name="Sample" type="Real"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="!=">
                                <left_operand>
                                    <variable name="Random"/>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <sequence_of_expressions>
                                <assignment variable_name="Sample">
                                    <binary_operation operator="*">
                                        <left_operand>
                                            <data_method_call method_name="exp" super="false">
                                                <receiver>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="/">
                                                            <left_operand>
                                                                <data_method_call method_name="ln" super="false">
                                                                    <receiver>
                                                                        <unary_operation operator="-">
                                                                            <operand>
                                                                                <sequence_of_expressions>
                                                                                    <data_method_call method_name="ln" super="false">
                                                                                        <receiver>
                                                                                            <data_method_call method_name="random" super="false">
                                                                                                <receiver>
                                                                                                    <variable name="Random"/>
                                                                                                </receiver>
                                                                                            </data_method_call>
                                                                                        </receiver>
                                                                                    </data_method_call>
                                                                                </sequence_of_expressions>
                                                                            </operand>
                                                                        </unary_operation>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Shape"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </receiver>
                                            </data_method_call>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="Scale"/>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                                <if>
                                    <condition>
                                        <binary_operation operator="&gt;">
                                            <left_operand>
                                                <variable name="Sample"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="real">0.0</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <return>
                                            <variable name="Sample"/>
                                        </return>
                                    </then>
                                    <else>
                                        <return>
                                            <data_method_call method_name="sample" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                            </data_method_call>
                                        </return>
                                    </else>
                                </if>
                            </sequence_of_expressions>
                        </then>
                        <else>
                            <return>
                                <nil/>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="Random"/>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"Weibull("</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="Shape"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">", "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <variable name="Scale"/>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">")"</constant>
                                    </right_operand>
                                </binary_operation>
                            </then>
                            <else>
                                <constant type="string">"Uninitialized Weibull Distribution"</constant>
                            </else>
                        </if>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="gamma" native="false">
                <return_type>Real</return_type>
                <argument name="z" type="Real"/>
                <local_variable name="pi" type="Real"/>
                <local_variable name="t" type="Real"/>
                <local_variable name="x" type="Real"/>
                <local_variable name="g" type="Integer"/>
                <local_variable name="i" type="Integer"/>
                <local_variable name="lanczos_coef" type="Array"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="g">
                            <constant type="integer">7</constant>
                        </assignment>
                        <assignment variable_name="lanczos_coef">
                            <data_method_call method_name="putAt" super="false">
                                <receiver>
                                    <data_method_call method_name="putAt" super="false">
                                        <receiver>
                                            <data_method_call method_name="putAt" super="false">
                                                <receiver>
                                                    <data_method_call method_name="putAt" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="putAt" super="false">
                                                                <receiver>
                                                                    <data_method_call method_name="putAt" super="false">
                                                                        <receiver>
                                                                            <data_method_call method_name="putAt" super="false">
                                                                                <receiver>
                                                                                    <data_method_call method_name="putAt" super="false">
                                                                                        <receiver>
                                                                                            <data_method_call method_name="putAt" super="false">
                                                                                                <receiver>
                                                                                                    <data_method_call method_name="resize" super="false">
                                                                                                        <receiver>
                                                                                                            <new data_class="Array"/>
                                                                                                        </receiver>
                                                                                                        <argument>
                                                                                                            <constant type="integer">9</constant>
                                                                                                        </argument>
                                                                                                    </data_method_call>
                                                                                                </receiver>
                                                                                                <argument>
                                                                                                    <constant type="integer">1</constant>
                                                                                                </argument>
                                                                                                <argument>
                                                                                                    <constant type="real">0.99999999999980993</constant>
                                                                                                </argument>
                                                                                            </data_method_call>
                                                                                        </receiver>
                                                                                        <argument>
                                                                                            <constant type="integer">2</constant>
                                                                                        </argument>
                                                                                        <argument>
                                                                                            <constant type="real">676.5203681218851</constant>
                                                                                        </argument>
                                                                                    </data_method_call>
                                                                                </receiver>
                                                                                <argument>
                                                                                    <constant type="integer">3</constant>
                                                                                </argument>
                                                                                <argument>
                                                                                    <constant type="real">-1259.1392167224028</constant>
                                                                                </argument>
                                                                            </data_method_call>
                                                                        </receiver>
                                                                        <argument>
                                                                            <constant type="integer">4</constant>
                                                                        </argument>
                                                                        <argument>
                                                                            <constant type="real">771.32342877765313</constant>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </receiver>
                                                                <argument>
                                                                    <constant type="integer">5</constant>
                                                                </argument>
                                                                <argument>
                                                                    <constant type="real">-176.61502916214059</constant>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="integer">6</constant>
                                                        </argument>
                                                        <argument>
                                                            <constant type="real">12.507343278686905</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <constant type="integer">7</constant>
                                                </argument>
                                                <argument>
                                                    <constant type="real">-0.13857109526572012</constant>
                                                </argument>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <constant type="integer">8</constant>
                                        </argument>
                                        <argument>
                                            <constant type="real">9.9843695780195716e-6</constant>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                                <argument>
                                    <constant type="integer">9</constant>
                                </argument>
                                <argument>
                                    <constant type="real">1.5056327351493116e-7</constant>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="pi">
                            <constant type="real">3.14159265358979323846264338327950288419716939937510</constant>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="&lt;">
                                    <left_operand>
                                        <variable name="z"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="real">0.5</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <return>
                                    <binary_operation operator="*">
                                        <left_operand>
                                            <binary_operation operator="/">
                                                <left_operand>
                                                    <variable name="pi"/>
                                                </left_operand>
                                                <right_operand>
                                                    <data_method_call method_name="sin" super="false">
                                                        <receiver>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="*">
                                                                    <left_operand>
                                                                        <variable name="pi"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="z"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </receiver>
                                                    </data_method_call>
                                                </right_operand>
                                            </binary_operation>
                                        </left_operand>
                                        <right_operand>
                                            <data_method_call method_name="gamma" super="false">
                                                <receiver>
                                                    <self/>
                                                </receiver>
                                                <argument>
                                                    <binary_operation operator="-">
                                                        <left_operand>
                                                            <constant type="real">1.0</constant>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="z"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </argument>
                                            </data_method_call>
                                        </right_operand>
                                    </binary_operation>
                                </return>
                            </then>
                            <else>
                                <sequence_of_expressions>
                                    <assignment variable_name="z">
                                        <binary_operation operator="-">
                                            <left_operand>
                                                <variable name="z"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="real">1.0</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <assignment variable_name="i">
                                        <constant type="integer">1</constant>
                                    </assignment>
                                    <assignment variable_name="x">
                                        <data_method_call method_name="at" super="false">
                                            <receiver>
                                                <variable name="lanczos_coef"/>
                                            </receiver>
                                            <argument>
                                                <constant type="integer">1</constant>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&lt;">
                                                <left_operand>
                                                    <variable name="i"/>
                                                </left_operand>
                                                <right_operand>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="g"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">2</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="x">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="x"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <binary_operation operator="/">
                                                                <left_operand>
                                                                    <data_method_call method_name="at" super="false">
                                                                        <receiver>
                                                                            <variable name="lanczos_coef"/>
                                                                        </receiver>
                                                                        <argument>
                                                                            <binary_operation operator="+">
                                                                                <left_operand>
                                                                                    <variable name="i"/>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <constant type="integer">1</constant>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <sequence_of_expressions>
                                                                        <binary_operation operator="+">
                                                                            <left_operand>
                                                                                <variable name="z"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <data_method_call method_name="asReal" super="false">
                                                                                    <receiver>
                                                                                        <variable name="i"/>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </sequence_of_expressions>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <assignment variable_name="i">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="i"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                    <assignment variable_name="t">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="z"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <data_method_call method_name="asReal" super="false">
                                                            <receiver>
                                                                <variable name="g"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="real">0.5</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <return>
                                        <binary_operation operator="*">
                                            <left_operand>
                                                <binary_operation operator="*">
                                                    <left_operand>
                                                        <binary_operation operator="*">
                                                            <left_operand>
                                                                <data_method_call method_name="sqrt" super="false">
                                                                    <receiver>
                                                                        <sequence_of_expressions>
                                                                            <binary_operation operator="*">
                                                                                <left_operand>
                                                                                    <constant type="real">2.0</constant>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <variable name="pi"/>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </sequence_of_expressions>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="power" super="false">
                                                                    <receiver>
                                                                        <variable name="t"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <binary_operation operator="+">
                                                                            <left_operand>
                                                                                <variable name="z"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <constant type="real">0.5</constant>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </argument>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <data_method_call method_name="exp" super="false">
                                                            <receiver>
                                                                <sequence_of_expressions>
                                                                    <unary_operation operator="-">
                                                                        <operand>
                                                                            <variable name="t"/>
                                                                        </operand>
                                                                    </unary_operation>
                                                                </sequence_of_expressions>
                                                            </receiver>
                                                        </data_method_call>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="x"/>
                                            </right_operand>
                                        </binary_operation>
                                    </return>
                                </sequence_of_expressions>
                            </else>
                        </if>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="Histogram" native="false">
            <super_class>Object</super_class>
            <instance_variable name="NumberOfSamples" type="Integer"/>
            <instance_variable name="NumberOfBins" type="Integer"/>
            <instance_variable name="Histogram" type="Array"/>
            <instance_variable name="Minimum" type="Real"/>
            <instance_variable name="Maximum" type="Real"/>
            <instance_variable name="IntervalSize" type="Real"/>
            <instance_variable name="Start" type="Real"/>
            <data_method name="withParameters" native="false">
                <return_type>Histogram</return_type>
                <argument name="L" type="Object"/>
                <argument name="U" type="Object"/>
                <argument name="N" type="Integer"/>
                <local_variable name="Temp" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <binary_operation operator="|">
                                            <left_operand>
                                                <binary_operation operator="|">
                                                    <left_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="=">
                                                                <left_operand>
                                                                    <variable name="L"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <nil/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </left_operand>
                                                    <right_operand>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="&amp;">
                                                                <left_operand>
                                                                    <sequence_of_expressions>
                                                                        <data_method_call method_name="not" super="false">
                                                                            <receiver>
                                                                                <data_method_call method_name="isOfType" super="false">
                                                                                    <receiver>
                                                                                        <variable name="L"/>
                                                                                    </receiver>
                                                                                    <argument>
                                                                                        <constant type="string">"Integer"</constant>
                                                                                    </argument>
                                                                                </data_method_call>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </sequence_of_expressions>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <sequence_of_expressions>
                                                                        <data_method_call method_name="not" super="false">
                                                                            <receiver>
                                                                                <data_method_call method_name="isOfType" super="false">
                                                                                    <receiver>
                                                                                        <variable name="L"/>
                                                                                    </receiver>
                                                                                    <argument>
                                                                                        <constant type="string">"Real"</constant>
                                                                                    </argument>
                                                                                </data_method_call>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </sequence_of_expressions>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="U"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <nil/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="U"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Integer"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <data_method_call method_name="not" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="isOfType" super="false">
                                                                    <receiver>
                                                                        <variable name="U"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"Real"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Bounds for Histogram must be Integers or Reals"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="L"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="L">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="L"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <data_method_call method_name="isOfType" super="false">
                                    <receiver>
                                        <variable name="U"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <assignment variable_name="U">
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <variable name="U"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="|">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="N"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="not" super="false">
                                                <receiver>
                                                    <data_method_call method_name="isOfType" super="false">
                                                        <receiver>
                                                            <variable name="N"/>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"Integer"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Number of bins for Histogram must be an Integer"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Minimum">
                            <variable name="L"/>
                        </assignment>
                        <assignment variable_name="Maximum">
                            <variable name="U"/>
                        </assignment>
                        <assignment variable_name="NumberOfBins">
                            <variable name="N"/>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;=">
                                    <left_operand>
                                        <variable name="Minimum"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Maximum"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="Temp">
                                        <variable name="Minimum"/>
                                    </assignment>
                                    <assignment variable_name="Minimum">
                                        <variable name="Maximum"/>
                                    </assignment>
                                    <assignment variable_name="Maximum">
                                        <variable name="Temp"/>
                                    </assignment>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <if>
                            <condition>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <variable name="NumberOfBins"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">2</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Number Of Slots for Histogram must be larger than 2"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Histogram">
                            <data_method_call method_name="putAll" super="false">
                                <receiver>
                                    <data_method_call method_name="resize" super="false">
                                        <receiver>
                                            <new data_class="Array"/>
                                        </receiver>
                                        <argument>
                                            <variable name="NumberOfBins"/>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                                <argument>
                                    <constant type="integer">0</constant>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="NumberOfSamples">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="IntervalSize">
                            <binary_operation operator="/">
                                <left_operand>
                                    <sequence_of_expressions>
                                        <binary_operation operator="-">
                                            <left_operand>
                                                <variable name="Maximum"/>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="Minimum"/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </left_operand>
                                <right_operand>
                                    <data_method_call method_name="asReal" super="false">
                                        <receiver>
                                            <sequence_of_expressions>
                                                <binary_operation operator="-">
                                                    <left_operand>
                                                        <variable name="NumberOfBins"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="integer">1</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </sequence_of_expressions>
                                        </receiver>
                                    </data_method_call>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="Start">
                            <binary_operation operator="-">
                                <left_operand>
                                    <variable name="Minimum"/>
                                </left_operand>
                                <right_operand>
                                    <binary_operation operator="*">
                                        <left_operand>
                                            <constant type="real">0.5</constant>
                                        </left_operand>
                                        <right_operand>
                                            <variable name="IntervalSize"/>
                                        </right_operand>
                                    </binary_operation>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="sample" native="false">
                <return_type>Histogram</return_type>
                <argument name="Value" type="Real"/>
                <local_variable name="i" type="Integer"/>
                <local_variable name="b" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="NumberOfSamples">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="NumberOfSamples"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&gt;=">
                                                <left_operand>
                                                    <variable name="Value"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Minimum"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="&lt;=">
                                                <left_operand>
                                                    <variable name="Value"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Maximum"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="b">
                                        <constant type="boolean">true</constant>
                                    </assignment>
                                    <assignment variable_name="i">
                                        <constant type="integer">1</constant>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <variable name="b"/>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="&lt;=">
                                                            <left_operand>
                                                                <variable name="i"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="NumberOfBins"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <if>
                                                    <condition>
                                                        <binary_operation operator="&amp;">
                                                            <left_operand>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="&gt;=">
                                                                        <left_operand>
                                                                            <variable name="Value"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <binary_operation operator="+">
                                                                                <left_operand>
                                                                                    <variable name="Start"/>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <binary_operation operator="*">
                                                                                        <left_operand>
                                                                                            <data_method_call method_name="asReal" super="false">
                                                                                                <receiver>
                                                                                                    <sequence_of_expressions>
                                                                                                        <binary_operation operator="-">
                                                                                                            <left_operand>
                                                                                                                <variable name="i"/>
                                                                                                            </left_operand>
                                                                                                            <right_operand>
                                                                                                                <constant type="integer">1</constant>
                                                                                                            </right_operand>
                                                                                                        </binary_operation>
                                                                                                    </sequence_of_expressions>
                                                                                                </receiver>
                                                                                            </data_method_call>
                                                                                        </left_operand>
                                                                                        <right_operand>
                                                                                            <variable name="IntervalSize"/>
                                                                                        </right_operand>
                                                                                    </binary_operation>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </left_operand>
                                                            <right_operand>
                                                                <sequence_of_expressions>
                                                                    <binary_operation operator="&lt;">
                                                                        <left_operand>
                                                                            <variable name="Value"/>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <binary_operation operator="+">
                                                                                <left_operand>
                                                                                    <variable name="Start"/>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <binary_operation operator="*">
                                                                                        <left_operand>
                                                                                            <data_method_call method_name="asReal" super="false">
                                                                                                <receiver>
                                                                                                    <variable name="i"/>
                                                                                                </receiver>
                                                                                            </data_method_call>
                                                                                        </left_operand>
                                                                                        <right_operand>
                                                                                            <variable name="IntervalSize"/>
                                                                                        </right_operand>
                                                                                    </binary_operation>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </sequence_of_expressions>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </condition>
                                                    <then>
                                                        <sequence_of_expressions>
                                                            <data_method_call method_name="putAt" super="false">
                                                                <receiver>
                                                                    <variable name="Histogram"/>
                                                                </receiver>
                                                                <argument>
                                                                    <variable name="i"/>
                                                                </argument>
                                                                <argument>
                                                                    <binary_operation operator="+">
                                                                        <left_operand>
                                                                            <data_method_call method_name="at" super="false">
                                                                                <receiver>
                                                                                    <variable name="Histogram"/>
                                                                                </receiver>
                                                                                <argument>
                                                                                    <variable name="i"/>
                                                                                </argument>
                                                                            </data_method_call>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <constant type="integer">1</constant>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </argument>
                                                            </data_method_call>
                                                            <assignment variable_name="b">
                                                                <constant type="boolean">false</constant>
                                                            </assignment>
                                                        </sequence_of_expressions>
                                                    </then>
                                                </if>
                                                <assignment variable_name="i">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="i"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <local_variable name="i" type="Integer"/>
                <local_variable name="Result" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Result">
                            <constant type="string">"Probability\t\tSample Value Range\n"</constant>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="NumberOfSamples"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_expressions>
                                    <assignment variable_name="i">
                                        <constant type="integer">1</constant>
                                    </assignment>
                                    <while>
                                        <condition>
                                            <binary_operation operator="&lt;=">
                                                <left_operand>
                                                    <variable name="i"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="NumberOfBins"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <body>
                                            <sequence_of_expressions>
                                                <assignment variable_name="Result">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <binary_operation operator="+">
                                                                <left_operand>
                                                                    <binary_operation operator="+">
                                                                        <left_operand>
                                                                            <binary_operation operator="+">
                                                                                <left_operand>
                                                                                    <binary_operation operator="+">
                                                                                        <left_operand>
                                                                                            <binary_operation operator="+">
                                                                                                <left_operand>
                                                                                                    <variable name="Result"/>
                                                                                                </left_operand>
                                                                                                <right_operand>
                                                                                                    <data_method_call method_name="printString" super="false">
                                                                                                        <receiver>
                                                                                                            <sequence_of_expressions>
                                                                                                                <binary_operation operator="/">
                                                                                                                    <left_operand>
                                                                                                                        <data_method_call method_name="asReal" super="false">
                                                                                                                            <receiver>
                                                                                                                                <data_method_call method_name="at" super="false">
                                                                                                                                    <receiver>
                                                                                                                                        <variable name="Histogram"/>
                                                                                                                                    </receiver>
                                                                                                                                    <argument>
                                                                                                                                        <variable name="i"/>
                                                                                                                                    </argument>
                                                                                                                                </data_method_call>
                                                                                                                            </receiver>
                                                                                                                        </data_method_call>
                                                                                                                    </left_operand>
                                                                                                                    <right_operand>
                                                                                                                        <data_method_call method_name="asReal" super="false">
                                                                                                                            <receiver>
                                                                                                                                <variable name="NumberOfSamples"/>
                                                                                                                            </receiver>
                                                                                                                        </data_method_call>
                                                                                                                    </right_operand>
                                                                                                                </binary_operation>
                                                                                                            </sequence_of_expressions>
                                                                                                        </receiver>
                                                                                                    </data_method_call>
                                                                                                </right_operand>
                                                                                            </binary_operation>
                                                                                        </left_operand>
                                                                                        <right_operand>
                                                                                            <constant type="string">"\t["</constant>
                                                                                        </right_operand>
                                                                                    </binary_operation>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <data_method_call method_name="printString" super="false">
                                                                                        <receiver>
                                                                                            <sequence_of_expressions>
                                                                                                <binary_operation operator="+">
                                                                                                    <left_operand>
                                                                                                        <variable name="Start"/>
                                                                                                    </left_operand>
                                                                                                    <right_operand>
                                                                                                        <binary_operation operator="*">
                                                                                                            <left_operand>
                                                                                                                <data_method_call method_name="asReal" super="false">
                                                                                                                    <receiver>
                                                                                                                        <sequence_of_expressions>
                                                                                                                            <binary_operation operator="-">
                                                                                                                                <left_operand>
                                                                                                                                    <variable name="i"/>
                                                                                                                                </left_operand>
                                                                                                                                <right_operand>
                                                                                                                                    <constant type="integer">1</constant>
                                                                                                                                </right_operand>
                                                                                                                            </binary_operation>
                                                                                                                        </sequence_of_expressions>
                                                                                                                    </receiver>
                                                                                                                </data_method_call>
                                                                                                            </left_operand>
                                                                                                            <right_operand>
                                                                                                                <variable name="IntervalSize"/>
                                                                                                            </right_operand>
                                                                                                        </binary_operation>
                                                                                                    </right_operand>
                                                                                                </binary_operation>
                                                                                            </sequence_of_expressions>
                                                                                        </receiver>
                                                                                    </data_method_call>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <constant type="string">", "</constant>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <data_method_call method_name="printString" super="false">
                                                                        <receiver>
                                                                            <sequence_of_expressions>
                                                                                <binary_operation operator="+">
                                                                                    <left_operand>
                                                                                        <variable name="Start"/>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <binary_operation operator="*">
                                                                                            <left_operand>
                                                                                                <data_method_call method_name="asReal" super="false">
                                                                                                    <receiver>
                                                                                                        <variable name="i"/>
                                                                                                    </receiver>
                                                                                                </data_method_call>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <variable name="IntervalSize"/>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </sequence_of_expressions>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="string">"]\n"</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                                <assignment variable_name="i">
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="i"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="integer">1</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </assignment>
                                            </sequence_of_expressions>
                                        </body>
                                    </while>
                                </sequence_of_expressions>
                            </then>
                        </if>
                        <return>
                            <variable name="Result"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="XMLList" native="false">
            <super_class>Array</super_class>
            <instance_variable name="Capacity" type="Integer"/>
            <instance_variable name="Count" type="Integer"/>
            <data_method name="add" native="false">
                <return_type>XMLList</return_type>
                <argument name="o" type="Object"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Count"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Capacity"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="grow" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="Count">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="Count"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <data_method_call method_name="putAt" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="Count"/>
                            </argument>
                            <argument>
                                <variable name="o"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="count" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <return>
                        <variable name="Count"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="grow" native="false">
                <return_type>XMLList</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Capacity">
                            <binary_operation operator="*">
                                <left_operand>
                                    <constant type="integer">2</constant>
                                </left_operand>
                                <right_operand>
                                    <variable name="Capacity"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <data_method_call method_name="resize" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="Capacity"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="init" native="false">
                <return_type>XMLList</return_type>
                <argument name="cap" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Count">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="Capacity">
                            <variable name="cap"/>
                        </assignment>
                        <data_method_call method_name="resize" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="Capacity"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="XMLText" native="false">
            <super_class>Object</super_class>
            <instance_variable name="Text" type="String"/>
            <data_method name="init" native="false">
                <return_type>XMLText</return_type>
                <argument name="S" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Text">
                            <variable name="S"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <binary_operation operator="+">
                            <left_operand>
                                <constant type="string">"XMLText with: "</constant>
                            </left_operand>
                            <right_operand>
                                <data_method_call method_name="printString" super="false">
                                    <receiver>
                                        <variable name="Text"/>
                                    </receiver>
                                </data_method_call>
                            </right_operand>
                        </binary_operation>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="xmlString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <variable name="Text"/>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="XMLElement" native="false">
            <super_class>Object</super_class>
            <instance_variable name="Attributes" type="Map"/>
            <instance_variable name="Children" type="XMLList"/>
            <instance_variable name="Name" type="String"/>
            <data_method name="addAttribute" native="false">
                <return_type>XMLElement</return_type>
                <argument name="N" type="String"/>
                <argument name="V" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="putAt" super="false">
                            <receiver>
                                <variable name="Attributes"/>
                            </receiver>
                            <argument>
                                <variable name="N"/>
                            </argument>
                            <argument>
                                <variable name="V"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="addElement" native="false">
                <return_type>XMLElement</return_type>
                <argument name="E" type="XMLElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="add" super="false">
                            <receiver>
                                <variable name="Children"/>
                            </receiver>
                            <argument>
                                <variable name="E"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="addText" native="false">
                <return_type>XMLElement</return_type>
                <argument name="T" type="XMLText"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="add" super="false">
                            <receiver>
                                <variable name="Children"/>
                            </receiver>
                            <argument>
                                <variable name="T"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="getAttribute" native="false">
                <return_type>String</return_type>
                <argument name="N" type="String"/>
                <body_expression>
                    <return>
                        <data_method_call method_name="at" super="false">
                            <receiver>
                                <variable name="Attributes"/>
                            </receiver>
                            <argument>
                                <variable name="N"/>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="getAttributes" native="false">
                <return_type>Map</return_type>
                <body_expression>
                    <return>
                        <variable name="Attributes"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="indentation" native="false">
                <return_type>String</return_type>
                <argument name="Level" type="Integer"/>
                <local_variable name="Result" type="String"/>
                <local_variable name="i" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Result">
                            <constant type="string">""</constant>
                        </assignment>
                        <assignment variable_name="i">
                            <constant type="integer">0</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&lt;">
                                    <left_operand>
                                        <variable name="i"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Level"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <data_method_call method_name="concat" super="false">
                                        <receiver>
                                            <variable name="Result"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"  "</constant>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="i">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="i"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="Result"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="init" native="false">
                <return_type>XMLElement</return_type>
                <argument name="N" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Name">
                            <variable name="N"/>
                        </assignment>
                        <assignment variable_name="Attributes">
                            <new data_class="Map"/>
                        </assignment>
                        <assignment variable_name="Children">
                            <data_method_call method_name="init" super="false">
                                <receiver>
                                    <new data_class="XMLList"/>
                                </receiver>
                                <argument>
                                    <constant type="integer">10</constant>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="xmlString" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <constant type="integer">0</constant>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="xmlString" native="false">
                <return_type>String</return_type>
                <argument name="Level" type="Integer"/>
                <body_expression>
                    <return>
                        <binary_operation operator="+">
                            <left_operand>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <binary_operation operator="+">
                                                                    <left_operand>
                                                                        <binary_operation operator="+">
                                                                            <left_operand>
                                                                                <binary_operation operator="+">
                                                                                    <left_operand>
                                                                                        <binary_operation operator="+">
                                                                                            <left_operand>
                                                                                                <binary_operation operator="+">
                                                                                                    <left_operand>
                                                                                                        <data_method_call method_name="indentation" super="false">
                                                                                                            <receiver>
                                                                                                                <self/>
                                                                                                            </receiver>
                                                                                                            <argument>
                                                                                                                <variable name="Level"/>
                                                                                                            </argument>
                                                                                                        </data_method_call>
                                                                                                    </left_operand>
                                                                                                    <right_operand>
                                                                                                        <constant type="string">"&lt;"</constant>
                                                                                                    </right_operand>
                                                                                                </binary_operation>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <variable name="Name"/>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <constant type="string">" "</constant>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <data_method_call method_name="xmlStringAttributes" super="false">
                                                                                    <receiver>
                                                                                        <self/>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <constant type="string">"&gt;\n"</constant>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="xmlStringChildren" super="false">
                                                                    <receiver>
                                                                        <self/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <binary_operation operator="+">
                                                                            <left_operand>
                                                                                <variable name="Level"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <constant type="integer">1</constant>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </argument>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <data_method_call method_name="indentation" super="false">
                                                            <receiver>
                                                                <self/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="Level"/>
                                                            </argument>
                                                        </data_method_call>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="string">"&lt;/"</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Name"/>
                                    </right_operand>
                                </binary_operation>
                            </left_operand>
                            <right_operand>
                                <constant type="string">"&gt;"</constant>
                            </right_operand>
                        </binary_operation>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="xmlStringAttributes" native="false">
                <return_type>String</return_type>
                <local_variable name="Result" type="String"/>
                <local_variable name="Atts" type="Set"/>
                <local_variable name="Att" type="String"/>
                <local_variable name="i" type="Iterator"/>
                <local_variable name="Count" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Result">
                            <constant type="string">""</constant>
                        </assignment>
                        <assignment variable_name="Atts">
                            <data_method_call method_name="keys" super="false">
                                <receiver>
                                    <variable name="Attributes"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="i">
                            <data_method_call method_name="iterator" super="false">
                                <receiver>
                                    <variable name="Atts"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="Count">
                            <constant type="integer">1</constant>
                        </assignment>
                        <while>
                            <condition>
                                <unary_operation operator="!">
                                    <operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="isDone" super="false">
                                                <receiver>
                                                    <variable name="i"/>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </operand>
                                </unary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="&gt;">
                                                <left_operand>
                                                    <variable name="Count"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="integer">1</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <variable name="Result"/>
                                                </receiver>
                                                <argument>
                                                    <constant type="string">" "</constant>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <assignment variable_name="Att">
                                        <data_method_call method_name="element" super="false">
                                            <receiver>
                                                <variable name="i"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <data_method_call method_name="concat" super="false">
                                        <receiver>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <data_method_call method_name="concat" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="concat" super="false">
                                                                <receiver>
                                                                    <variable name="Result"/>
                                                                </receiver>
                                                                <argument>
                                                                    <variable name="Att"/>
                                                                </argument>
                                                            </data_method_call>
                                                        </receiver>
                                                        <argument>
                                                            <constant type="string">"='"</constant>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="at" super="false">
                                                        <receiver>
                                                            <variable name="Attributes"/>
                                                        </receiver>
                                                        <argument>
                                                            <variable name="Att"/>
                                                        </argument>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"'"</constant>
                                        </argument>
                                    </data_method_call>
                                    <assignment variable_name="Count">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="Count"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <data_method_call method_name="advance" super="false">
                                        <receiver>
                                            <variable name="i"/>
                                        </receiver>
                                    </data_method_call>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="Result"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="xmlStringChildren" native="false">
                <return_type>String</return_type>
                <argument name="Level" type="Integer"/>
                <local_variable name="Result" type="String"/>
                <local_variable name="Child" type="Object"/>
                <local_variable name="i" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Result">
                            <constant type="string">""</constant>
                        </assignment>
                        <assignment variable_name="i">
                            <constant type="integer">1</constant>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="&lt;=">
                                    <left_operand>
                                        <variable name="i"/>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="count" super="false">
                                            <receiver>
                                                <variable name="Children"/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <assignment variable_name="Child">
                                        <data_method_call method_name="at" super="false">
                                            <receiver>
                                                <variable name="Children"/>
                                            </receiver>
                                            <argument>
                                                <variable name="i"/>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                    <data_method_call method_name="cr" super="false">
                                        <receiver>
                                            <data_method_call method_name="concat" super="false">
                                                <receiver>
                                                    <variable name="Result"/>
                                                </receiver>
                                                <argument>
                                                    <data_method_call method_name="xmlString" super="false">
                                                        <receiver>
                                                            <variable name="Child"/>
                                                        </receiver>
                                                        <argument>
                                                            <variable name="Level"/>
                                                        </argument>
                                                    </data_method_call>
                                                </argument>
                                            </data_method_call>
                                        </receiver>
                                    </data_method_call>
                                    <assignment variable_name="i">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="i"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <variable name="Result"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="XMLDocument" native="false">
            <super_class>Object</super_class>
            <instance_variable name="Element" type="XMLElement"/>
            <data_method name="init" native="false">
                <return_type>XMLDocument</return_type>
                <body_expression>
                    <return>
                        <self/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="xmlString" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="setElement" native="false">
                <return_type>XMLDocument</return_type>
                <argument name="E" type="XMLElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Element">
                            <variable name="E"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="xmlString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <data_method_call method_name="concat" super="false">
                            <receiver>
                                <constant type="string">"&lt;?xml version='1.0' encoding='ISO-8859-1'?&gt;\n"</constant>
                            </receiver>
                            <argument>
                                <data_method_call method_name="xmlString" super="false">
                                    <receiver>
                                        <variable name="Element"/>
                                    </receiver>
                                    <argument>
                                        <constant type="integer">0</constant>
                                    </argument>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="MemoryStatus" native="false">
            <super_class>LongRunTimeAverage</super_class>
            <instance_variable name="MaximumOccupation" type="Integer"/>
            <instance_variable name="Occupation" type="Integer"/>
            <data_method name="allocate" native="false">
                <return_type>MemoryStatus</return_type>
                <argument name="NumberOfBytes" type="Integer"/>
                <argument name="CurrentTime" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Occupation">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="Occupation"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="NumberOfBytes"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="Occupation"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="MaximumOccupation"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <assignment variable_name="MaximumOccupation">
                                    <variable name="Occupation"/>
                                </assignment>
                            </then>
                        </if>
                        <data_method_call method_name="rewardBM" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <data_method_call method_name="asReal" super="false">
                                    <receiver>
                                        <variable name="Occupation"/>
                                    </receiver>
                                </data_method_call>
                            </argument>
                            <argument>
                                <variable name="CurrentTime"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="currentOccupation" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <return>
                        <variable name="Occupation"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="free" native="false">
                <return_type>MemoryStatus</return_type>
                <argument name="NumberOfBytes" type="Integer"/>
                <argument name="CurrentTime" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Occupation">
                            <binary_operation operator="-">
                                <left_operand>
                                    <variable name="Occupation"/>
                                </left_operand>
                                <right_operand>
                                    <variable name="NumberOfBytes"/>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <data_method_call method_name="rewardBM" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <data_method_call method_name="asReal" super="false">
                                    <receiver>
                                        <variable name="Occupation"/>
                                    </receiver>
                                </data_method_call>
                            </argument>
                            <argument>
                                <variable name="CurrentTime"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="init" native="false">
                <return_type>MemoryStatus</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Occupation">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="MaximumOccupation">
                            <constant type="integer">0</constant>
                        </assignment>
                        <data_method_call method_name="withParameters" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <constant type="real">0.95</constant>
                            </argument>
                            <argument>
                                <constant type="real">0.95</constant>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="log" native="false">
                <return_type>PerformanceMonitor</return_type>
                <local_variable name="File" type="FileOut"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="File">
                            <data_method_call method_name="open" super="false">
                                <receiver>
                                    <data_method_call method_name="destination" super="false">
                                        <receiver>
                                            <new data_class="FileOut"/>
                                        </receiver>
                                        <argument>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <data_method_call method_name="identity" super="false">
                                                        <receiver>
                                                            <self/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="string">".log"</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                            <argument>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <constant type="string">"Maximum Occupation: "</constant>
                                                    </left_operand>
                                                    <right_operand>
                                                        <data_method_call method_name="cr" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="cr" super="false">
                                                                    <receiver>
                                                                        <data_method_call method_name="printString" super="false">
                                                                            <receiver>
                                                                                <variable name="MaximumOccupation"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="string">"Statistics for Average Occupation:\n"</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="logStatistics" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="close" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <binary_operation operator="+">
                            <left_operand>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"Occupation: "</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="cr" super="false">
                                                                    <receiver>
                                                                        <data_method_call method_name="cr" super="false">
                                                                            <receiver>
                                                                                <data_method_call method_name="printString" super="false">
                                                                                    <receiver>
                                                                                        <variable name="Occupation"/>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">"Maximum Occupation: "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="cr" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="cr" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="MaximumOccupation"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"Statistics for Average Occupation:\n"</constant>
                                    </right_operand>
                                </binary_operation>
                            </left_operand>
                            <right_operand>
                                <data_method_call method_name="printStatistics" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </right_operand>
                        </binary_operation>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="CommunicationStatus" native="false">
            <super_class>LongRunTimeAverage</super_class>
            <instance_variable name="AchievedMaximumNumberOfConcurrentConnections" type="Integer"/>
            <instance_variable name="ActiveConnections" type="Set"/>
            <instance_variable name="NumberOfConcurrentConnections" type="Integer"/>
            <data_method name="activate" native="false">
                <return_type>CommunicationStatus</return_type>
                <argument name="Connection" type="String"/>
                <argument name="CurrentTime" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="add" super="false">
                            <receiver>
                                <variable name="ActiveConnections"/>
                            </receiver>
                            <argument>
                                <variable name="Connection"/>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="NumberOfConcurrentConnections">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="NumberOfConcurrentConnections"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="NumberOfConcurrentConnections"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="AchievedMaximumNumberOfConcurrentConnections"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <assignment variable_name="AchievedMaximumNumberOfConcurrentConnections">
                                    <variable name="NumberOfConcurrentConnections"/>
                                </assignment>
                            </then>
                        </if>
                        <data_method_call method_name="rewardBM" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="NumberOfConcurrentConnections"/>
                            </argument>
                            <argument>
                                <variable name="CurrentTime"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="numberOfConcurrentConnections" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <return>
                        <variable name="NumberOfConcurrentConnections"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="deactivate" native="false">
                <return_type>CommunicationStatus</return_type>
                <argument name="Connection" type="String"/>
                <argument name="CurrentTime" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <data_method_call method_name="remove" super="false">
                            <receiver>
                                <variable name="ActiveConnections"/>
                            </receiver>
                            <argument>
                                <variable name="Connection"/>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="NumberOfConcurrentConnections">
                            <binary_operation operator="-">
                                <left_operand>
                                    <variable name="NumberOfConcurrentConnections"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <data_method_call method_name="rewardBM" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <variable name="NumberOfConcurrentConnections"/>
                            </argument>
                            <argument>
                                <variable name="CurrentTime"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="inactive" native="false">
                <return_type>Boolean</return_type>
                <argument name="Connection" type="String"/>
                <body_expression>
                    <return>
                        <data_method_call method_name="excludes" super="false">
                            <receiver>
                                <variable name="ActiveConnections"/>
                            </receiver>
                            <argument>
                                <variable name="Connection"/>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="init" native="false">
                <return_type>CommunicationStatus</return_type>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="ActiveConnections">
                            <new data_class="Set"/>
                        </assignment>
                        <assignment variable_name="NumberOfConcurrentConnections">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="AchievedMaximumNumberOfConcurrentConnections">
                            <constant type="integer">0</constant>
                        </assignment>
                        <data_method_call method_name="withParameters" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <constant type="real">0.95</constant>
                            </argument>
                            <argument>
                                <constant type="real">0.95</constant>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="log" native="false">
                <return_type>CommunicationStatus</return_type>
                <local_variable name="File" type="FileOut"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="File">
                            <data_method_call method_name="open" super="false">
                                <receiver>
                                    <data_method_call method_name="destination" super="false">
                                        <receiver>
                                            <new data_class="FileOut"/>
                                        </receiver>
                                        <argument>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <data_method_call method_name="identity" super="false">
                                                        <receiver>
                                                            <self/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="string">".log"</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                            <argument>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <constant type="string">"Interconnect Utilisation Results:\n\nAchieved Maximum Number of Concurrent Connections: "</constant>
                                                    </left_operand>
                                                    <right_operand>
                                                        <data_method_call method_name="lf" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="lf" super="false">
                                                                    <receiver>
                                                                        <data_method_call method_name="printString" super="false">
                                                                            <receiver>
                                                                                <variable name="AchievedMaximumNumberOfConcurrentConnections"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="string">"Statistics for Average Number of Concurrent Connections:\n"</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="logStatistics" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="close" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <binary_operation operator="+">
                            <left_operand>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <binary_operation operator="+">
                                                                    <left_operand>
                                                                        <binary_operation operator="+">
                                                                            <left_operand>
                                                                                <constant type="string">"Number of Concurrent Connections: "</constant>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <data_method_call method_name="lf" super="false">
                                                                                    <receiver>
                                                                                        <data_method_call method_name="lf" super="false">
                                                                                            <receiver>
                                                                                                <data_method_call method_name="printString" super="false">
                                                                                                    <receiver>
                                                                                                        <variable name="NumberOfConcurrentConnections"/>
                                                                                                    </receiver>
                                                                                                </data_method_call>
                                                                                            </receiver>
                                                                                        </data_method_call>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <constant type="string">"Active Connections:\n"</constant>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="lf" super="false">
                                                                    <receiver>
                                                                        <data_method_call method_name="lf" super="false">
                                                                            <receiver>
                                                                                <data_method_call method_name="printString" super="false">
                                                                                    <receiver>
                                                                                        <variable name="ActiveConnections"/>
                                                                                    </receiver>
                                                                                </data_method_call>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">"Achieved Maximum Number of Concurrent Connections: "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="lf" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="lf" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="AchievedMaximumNumberOfConcurrentConnections"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"Statistics for Average Number of Concurrent Connections:\n"</constant>
                                    </right_operand>
                                </binary_operation>
                            </left_operand>
                            <right_operand>
                                <data_method_call method_name="printStatistics" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                </data_method_call>
                            </right_operand>
                        </binary_operation>
                    </return>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="SchedulerStatus" native="false">
            <super_class>Object</super_class>
            <instance_variable name="NumberOfTasks" type="Integer"/>
            <instance_variable name="TaskList" type="StructureElement"/>
            <instance_variable name="Policy" type="String"/>
            <data_method name="init" native="false">
                <return_type>SchedulerStatus</return_type>
                <argument name="T" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Policy">
                            <variable name="T"/>
                        </assignment>
                        <assignment variable_name="NumberOfTasks">
                            <constant type="integer">0</constant>
                        </assignment>
                        <assignment variable_name="TaskList">
                            <new data_class="StructureElement"/>
                        </assignment>
                        <data_method_call method_name="setPrevious" super="false">
                            <receiver>
                                <data_method_call method_name="setNext" super="false">
                                    <receiver>
                                        <variable name="TaskList"/>
                                    </receiver>
                                    <argument>
                                        <variable name="TaskList"/>
                                    </argument>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <variable name="TaskList"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="nextTaskToSchedule" native="false">
                <return_type>ScheduledTask</return_type>
                <body_expression>
                    <return>
                        <sequence_of_expressions>
                            <data_method_call method_name="element" super="false">
                                <receiver>
                                    <data_method_call method_name="previous" super="false">
                                        <receiver>
                                            <variable name="TaskList"/>
                                        </receiver>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </sequence_of_expressions>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <local_variable name="PrintOut" type="String"/>
                <local_variable name="E" type="StructureElement"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="PrintOut">
                            <binary_operation operator="+">
                                <left_operand>
                                    <binary_operation operator="+">
                                        <left_operand>
                                            <constant type="string">"Operating System with Policy: "</constant>
                                        </left_operand>
                                        <right_operand>
                                            <data_method_call method_name="cr" super="false">
                                                <receiver>
                                                    <data_method_call method_name="cr" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="printString" super="false">
                                                                <receiver>
                                                                    <variable name="Policy"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </receiver>
                                                    </data_method_call>
                                                </receiver>
                                            </data_method_call>
                                        </right_operand>
                                    </binary_operation>
                                </left_operand>
                                <right_operand>
                                    <data_method_call method_name="lf" super="false">
                                        <receiver>
                                            <constant type="string">"List of Waiting Tasks:"</constant>
                                        </receiver>
                                    </data_method_call>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="PrintOut">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="PrintOut"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="string">"( "</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <assignment variable_name="E">
                            <data_method_call method_name="previous" super="false">
                                <receiver>
                                    <variable name="TaskList"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="E"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="TaskList"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <assignment variable_name="PrintOut">
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="PrintOut"/>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="element" super="false">
                                                            <receiver>
                                                                <variable name="E"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </assignment>
                                    <if>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <data_method_call method_name="previous" super="false">
                                                        <receiver>
                                                            <variable name="E"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="TaskList"/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <assignment variable_name="PrintOut">
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <variable name="PrintOut"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">", "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </assignment>
                                        </then>
                                    </if>
                                    <assignment variable_name="E">
                                        <data_method_call method_name="previous" super="false">
                                            <receiver>
                                                <variable name="E"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <assignment variable_name="PrintOut">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="PrintOut"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="string">" )"</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <return>
                            <variable name="PrintOut"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="registerTask" native="false">
                <return_type>ScheduledTask</return_type>
                <argument name="Task" type="String"/>
                <argument name="Scenario" type="String"/>
                <argument name="Iteration" type="Integer"/>
                <argument name="Priority" type="Integer"/>
                <local_variable name="NewTask" type="ScheduledTask"/>
                <local_variable name="NE" type="StructureElement"/>
                <local_variable name="E" type="StructureElement"/>
                <local_variable name="Found" type="Boolean"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="NewTask">
                            <data_method_call method_name="init" super="false">
                                <receiver>
                                    <new data_class="ScheduledTask"/>
                                </receiver>
                                <argument>
                                    <variable name="Task"/>
                                </argument>
                                <argument>
                                    <variable name="Scenario"/>
                                </argument>
                                <argument>
                                    <variable name="Iteration"/>
                                </argument>
                                <argument>
                                    <variable name="Priority"/>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <assignment variable_name="NE">
                            <data_method_call method_name="setElement" super="false">
                                <receiver>
                                    <new data_class="StructureElement"/>
                                </receiver>
                                <argument>
                                    <variable name="NewTask"/>
                                </argument>
                            </data_method_call>
                        </assignment>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Policy"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"FCFS"</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <assignment variable_name="E">
                                    <variable name="TaskList"/>
                                </assignment>
                            </then>
                            <else>
                                <if>
                                    <condition>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="Policy"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="string">"PB"</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <sequence_of_expressions>
                                            <assignment variable_name="E">
                                                <data_method_call method_name="next" super="false">
                                                    <receiver>
                                                        <variable name="TaskList"/>
                                                    </receiver>
                                                </data_method_call>
                                            </assignment>
                                            <assignment variable_name="Found">
                                                <constant type="boolean">false</constant>
                                            </assignment>
                                            <while>
                                                <condition>
                                                    <binary_operation operator="&amp;">
                                                        <left_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="!=">
                                                                    <left_operand>
                                                                        <variable name="E"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="TaskList"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </left_operand>
                                                        <right_operand>
                                                            <sequence_of_expressions>
                                                                <data_method_call method_name="not" super="false">
                                                                    <receiver>
                                                                        <variable name="Found"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </sequence_of_expressions>
                                                        </right_operand>
                                                    </binary_operation>
                                                </condition>
                                                <body>
                                                    <if>
                                                        <condition>
                                                            <binary_operation operator="&lt;">
                                                                <left_operand>
                                                                    <data_method_call method_name="getPriority" super="false">
                                                                        <receiver>
                                                                            <data_method_call method_name="element" super="false">
                                                                                <receiver>
                                                                                    <variable name="E"/>
                                                                                </receiver>
                                                                            </data_method_call>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <variable name="Priority"/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </condition>
                                                        <then>
                                                            <assignment variable_name="E">
                                                                <data_method_call method_name="next" super="false">
                                                                    <receiver>
                                                                        <variable name="E"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </assignment>
                                                        </then>
                                                        <else>
                                                            <assignment variable_name="Found">
                                                                <constant type="boolean">true</constant>
                                                            </assignment>
                                                        </else>
                                                    </if>
                                                </body>
                                            </while>
                                            <assignment variable_name="E">
                                                <data_method_call method_name="previous" super="false">
                                                    <receiver>
                                                        <variable name="E"/>
                                                    </receiver>
                                                </data_method_call>
                                            </assignment>
                                        </sequence_of_expressions>
                                    </then>
                                    <else>
                                        <data_method_call method_name="error" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                            <argument>
                                                <constant type="string">"Unkown Scheduling Policy"</constant>
                                            </argument>
                                        </data_method_call>
                                    </else>
                                </if>
                            </else>
                        </if>
                        <data_method_call method_name="setPrevious" super="false">
                            <receiver>
                                <data_method_call method_name="setNext" super="false">
                                    <receiver>
                                        <variable name="NE"/>
                                    </receiver>
                                    <argument>
                                        <data_method_call method_name="next" super="false">
                                            <receiver>
                                                <variable name="E"/>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <variable name="E"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="setNext" super="false">
                            <receiver>
                                <variable name="E"/>
                            </receiver>
                            <argument>
                                <variable name="NE"/>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="setPrevious" super="false">
                            <receiver>
                                <data_method_call method_name="next" super="false">
                                    <receiver>
                                        <variable name="NE"/>
                                    </receiver>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <variable name="NE"/>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="NumberOfTasks">
                            <binary_operation operator="+">
                                <left_operand>
                                    <variable name="NumberOfTasks"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <return>
                            <variable name="NewTask"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="removeTask" native="false">
                <return_type>Integer</return_type>
                <argument name="OldTask" type="ScheduledTask"/>
                <local_variable name="E" type="Element"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="E">
                            <data_method_call method_name="previous" super="false">
                                <receiver>
                                    <variable name="TaskList"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <data_method_call method_name="getName" super="false">
                                            <receiver>
                                                <data_method_call method_name="element" super="false">
                                                    <receiver>
                                                        <variable name="E"/>
                                                    </receiver>
                                                </data_method_call>
                                            </receiver>
                                        </data_method_call>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="getName" super="false">
                                            <receiver>
                                                <variable name="OldTask"/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <assignment variable_name="E">
                                    <data_method_call method_name="previous" super="false">
                                        <receiver>
                                            <variable name="E"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                            </body>
                        </while>
                        <data_method_call method_name="setPrevious" super="false">
                            <receiver>
                                <data_method_call method_name="next" super="false">
                                    <receiver>
                                        <variable name="E"/>
                                    </receiver>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <data_method_call method_name="previous" super="false">
                                    <receiver>
                                        <variable name="E"/>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="setNext" super="false">
                            <receiver>
                                <data_method_call method_name="previous" super="false">
                                    <receiver>
                                        <variable name="E"/>
                                    </receiver>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <data_method_call method_name="next" super="false">
                                    <receiver>
                                        <variable name="E"/>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                        <assignment variable_name="NumberOfTasks">
                            <binary_operation operator="-">
                                <left_operand>
                                    <variable name="NumberOfTasks"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="integer">1</constant>
                                </right_operand>
                            </binary_operation>
                        </assignment>
                        <return>
                            <variable name="NumberOfTasks"/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="updateTask" native="false">
                <return_type>SchedulerStatus</return_type>
                <argument name="OldTask" type="ScheduledTask"/>
                <local_variable name="E" type="Element"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="E">
                            <data_method_call method_name="previous" super="false">
                                <receiver>
                                    <variable name="TaskList"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <while>
                            <condition>
                                <binary_operation operator="!=">
                                    <left_operand>
                                        <variable name="E"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="TaskList"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <if>
                                        <condition>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <data_method_call method_name="getName" super="false">
                                                        <receiver>
                                                            <data_method_call method_name="element" super="false">
                                                                <receiver>
                                                                    <variable name="E"/>
                                                                </receiver>
                                                            </data_method_call>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <data_method_call method_name="getName" super="false">
                                                        <receiver>
                                                            <variable name="OldTask"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <data_method_call method_name="setElement" super="false">
                                                <receiver>
                                                    <variable name="E"/>
                                                </receiver>
                                                <argument>
                                                    <variable name="OldTask"/>
                                                </argument>
                                            </data_method_call>
                                        </then>
                                    </if>
                                    <assignment variable_name="E">
                                        <data_method_call method_name="previous" super="false">
                                            <receiver>
                                                <variable name="E"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="ProcessorStatus" native="false">
            <super_class>LongRunTimeAverage</super_class>
            <instance_variable name="ContextSwitchingTime" type="Real"/>
            <instance_variable name="ExecutionTimes" type="Map"/>
            <instance_variable name="Frequency" type="Real"/>
            <instance_variable name="MemoryUsages" type="Map"/>
            <instance_variable name="PowerConsumption" type="Real"/>
            <instance_variable name="Running" type="Boolean"/>
            <instance_variable name="RunningTask" type="String"/>
            <data_method name="getContextSwitchingTime" native="false">
                <return_type>Real</return_type>
                <body_expression>
                    <return>
                        <binary_operation operator="/">
                            <left_operand>
                                <variable name="ContextSwitchingTime"/>
                            </left_operand>
                            <right_operand>
                                <variable name="Frequency"/>
                            </right_operand>
                        </binary_operation>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="getExecutionTime" native="false">
                <return_type>Real</return_type>
                <argument name="Task" type="ScheduledTask"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="=">
                                <left_operand>
                                    <data_method_call method_name="getRemainingExecutionTime" super="false">
                                        <receiver>
                                            <variable name="Task"/>
                                        </receiver>
                                    </data_method_call>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <binary_operation operator="/">
                                    <left_operand>
                                        <data_method_call method_name="at" super="false">
                                            <receiver>
                                                <data_method_call method_name="at" super="false">
                                                    <receiver>
                                                        <variable name="ExecutionTimes"/>
                                                    </receiver>
                                                    <argument>
                                                        <data_method_call method_name="getName" super="false">
                                                            <receiver>
                                                                <variable name="Task"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <data_method_call method_name="getScenario" super="false">
                                                    <receiver>
                                                        <variable name="Task"/>
                                                    </receiver>
                                                </data_method_call>
                                            </argument>
                                        </data_method_call>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Frequency"/>
                                    </right_operand>
                                </binary_operation>
                            </return>
                        </then>
                        <else>
                            <return>
                                <data_method_call method_name="getRemainingExecutionTime" super="false">
                                    <receiver>
                                        <variable name="Task"/>
                                    </receiver>
                                </data_method_call>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="getMemoryUsage" native="false">
                <return_type>Integer</return_type>
                <argument name="Task" type="ScheduledTask"/>
                <body_expression>
                    <return>
                        <data_method_call method_name="at" super="false">
                            <receiver>
                                <data_method_call method_name="at" super="false">
                                    <receiver>
                                        <variable name="MemoryUsages"/>
                                    </receiver>
                                    <argument>
                                        <data_method_call method_name="getName" super="false">
                                            <receiver>
                                                <variable name="Task"/>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                </data_method_call>
                            </receiver>
                            <argument>
                                <data_method_call method_name="getScenario" super="false">
                                    <receiver>
                                        <variable name="Task"/>
                                    </receiver>
                                </data_method_call>
                            </argument>
                        </data_method_call>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="getPowerConsumption" native="false">
                <return_type>Real</return_type>
                <body_expression>
                    <return>
                        <variable name="PowerConsumption"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="idle" native="false">
                <return_type>ProcessorStatus</return_type>
                <argument name="CurrentTime" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Running">
                            <constant type="boolean">false</constant>
                        </assignment>
                        <assignment variable_name="RunningTask">
                            <nil/>
                        </assignment>
                        <data_method_call method_name="rewardBM" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <constant type="real">0.0</constant>
                            </argument>
                            <argument>
                                <variable name="CurrentTime"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="init" native="false">
                <return_type>ProcessorStatus</return_type>
                <argument name="Type" type="String"/>
                <local_variable name="File" type="FileIn"/>
                <local_variable name="Task" type="String"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <binary_operation operator="&amp;">
                                            <left_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="!=">
                                                        <left_operand>
                                                            <variable name="Type"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="string">"MIPS"</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="!=">
                                                        <left_operand>
                                                            <variable name="Type"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="string">"ARM11"</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="Type"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="string">"TriMedia"</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="error" super="false">
                                    <receiver>
                                        <self/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"Unknown Processor Type"</constant>
                                    </argument>
                                </data_method_call>
                            </then>
                        </if>
                        <assignment variable_name="File">
                            <data_method_call method_name="open" super="false">
                                <receiver>
                                    <data_method_call method_name="source" super="false">
                                        <receiver>
                                            <new data_class="FileIn"/>
                                        </receiver>
                                        <argument>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <variable name="Type"/>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="string">".txt"</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="readWord" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <assignment variable_name="Frequency">
                            <data_method_call method_name="asReal" super="false">
                                <receiver>
                                    <data_method_call method_name="toInteger" super="false">
                                        <receiver>
                                            <data_method_call method_name="readWord" super="false">
                                                <receiver>
                                                    <variable name="File"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="readWord" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <data_method_call method_name="readWord" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <assignment variable_name="ContextSwitchingTime">
                            <data_method_call method_name="asReal" super="false">
                                <receiver>
                                    <data_method_call method_name="toInteger" super="false">
                                        <receiver>
                                            <data_method_call method_name="readWord" super="false">
                                                <receiver>
                                                    <variable name="File"/>
                                                </receiver>
                                            </data_method_call>
                                        </receiver>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="readWord" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <data_method_call method_name="readWord" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <assignment variable_name="PowerConsumption">
                            <data_method_call method_name="toReal" super="false">
                                <receiver>
                                    <data_method_call method_name="readWord" super="false">
                                        <receiver>
                                            <variable name="File"/>
                                        </receiver>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="readWord" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <data_method_call method_name="readWord" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <data_method_call method_name="readWord" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <data_method_call method_name="readWord" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <data_method_call method_name="readWord" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <data_method_call method_name="readWord" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <data_method_call method_name="readWord" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <data_method_call method_name="readWord" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <data_method_call method_name="readWord" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <assignment variable_name="ExecutionTimes">
                            <new data_class="Map"/>
                        </assignment>
                        <assignment variable_name="MemoryUsages">
                            <new data_class="Map"/>
                        </assignment>
                        <while>
                            <condition>
                                <unary_operation operator="!">
                                    <operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="atEndOfFile" super="false">
                                                <receiver>
                                                    <variable name="File"/>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </operand>
                                </unary_operation>
                            </condition>
                            <body>
                                <sequence_of_expressions>
                                    <assignment variable_name="Task">
                                        <data_method_call method_name="readWord" super="false">
                                            <receiver>
                                                <variable name="File"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                    <if>
                                        <condition>
                                            <binary_operation operator="!=">
                                                <left_operand>
                                                    <variable name="Task"/>
                                                </left_operand>
                                                <right_operand>
                                                    <nil/>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <sequence_of_expressions>
                                                <data_method_call method_name="putAt" super="false">
                                                    <receiver>
                                                        <variable name="ExecutionTimes"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="Task"/>
                                                    </argument>
                                                    <argument>
                                                        <new data_class="Map"/>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="putAt" super="false">
                                                    <receiver>
                                                        <variable name="MemoryUsages"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="Task"/>
                                                    </argument>
                                                    <argument>
                                                        <new data_class="Map"/>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="putAt" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="at" super="false">
                                                            <receiver>
                                                                <variable name="ExecutionTimes"/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="Task"/>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"S1"</constant>
                                                    </argument>
                                                    <argument>
                                                        <data_method_call method_name="asReal" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="toInteger" super="false">
                                                                    <receiver>
                                                                        <data_method_call method_name="readWord" super="false">
                                                                            <receiver>
                                                                                <variable name="File"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="putAt" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="at" super="false">
                                                            <receiver>
                                                                <variable name="ExecutionTimes"/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="Task"/>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"S2"</constant>
                                                    </argument>
                                                    <argument>
                                                        <data_method_call method_name="asReal" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="toInteger" super="false">
                                                                    <receiver>
                                                                        <data_method_call method_name="readWord" super="false">
                                                                            <receiver>
                                                                                <variable name="File"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="putAt" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="at" super="false">
                                                            <receiver>
                                                                <variable name="MemoryUsages"/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="Task"/>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"S1"</constant>
                                                    </argument>
                                                    <argument>
                                                        <data_method_call method_name="toInteger" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="readWord" super="false">
                                                                    <receiver>
                                                                        <variable name="File"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                                <data_method_call method_name="putAt" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="at" super="false">
                                                            <receiver>
                                                                <variable name="MemoryUsages"/>
                                                            </receiver>
                                                            <argument>
                                                                <variable name="Task"/>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"S2"</constant>
                                                    </argument>
                                                    <argument>
                                                        <data_method_call method_name="toInteger" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="readWord" super="false">
                                                                    <receiver>
                                                                        <variable name="File"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </sequence_of_expressions>
                                        </then>
                                    </if>
                                </sequence_of_expressions>
                            </body>
                        </while>
                        <data_method_call method_name="close" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <assignment variable_name="Running">
                            <constant type="boolean">false</constant>
                        </assignment>
                        <data_method_call method_name="withParameters" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <constant type="real">0.95</constant>
                            </argument>
                            <argument>
                                <constant type="real">0.95</constant>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="log" native="false">
                <return_type>ProcessorStatus</return_type>
                <local_variable name="File" type="FileOut"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="File">
                            <data_method_call method_name="open" super="false">
                                <receiver>
                                    <data_method_call method_name="destination" super="false">
                                        <receiver>
                                            <new data_class="FileOut"/>
                                        </receiver>
                                        <argument>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <data_method_call method_name="identity" super="false">
                                                        <receiver>
                                                            <self/>
                                                        </receiver>
                                                    </data_method_call>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="string">".log"</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                    </data_method_call>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="write" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                            <argument>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <constant type="string">"Processor Utilisation Results:\n\nAverage Utilisation:\n"</constant>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="logStatistics" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                        </data_method_call>
                        <data_method_call method_name="close" super="false">
                            <receiver>
                                <variable name="File"/>
                            </receiver>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="notPreviouslyPreempted" native="false">
                <return_type>Boolean</return_type>
                <argument name="Task" type="ScheduledTask"/>
                <body_expression>
                    <if>
                        <condition>
                            <binary_operation operator="!=">
                                <left_operand>
                                    <data_method_call method_name="getRemainingExecutionTime" super="false">
                                        <receiver>
                                            <variable name="Task"/>
                                        </receiver>
                                    </data_method_call>
                                </left_operand>
                                <right_operand>
                                    <nil/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <return>
                                <constant type="boolean">false</constant>
                            </return>
                        </then>
                        <else>
                            <return>
                                <constant type="boolean">true</constant>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <if>
                        <condition>
                            <variable name="Running"/>
                        </condition>
                        <then>
                            <return>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <constant type="string">"Processor is Executing Task "</constant>
                                                    </left_operand>
                                                    <right_operand>
                                                        <data_method_call method_name="lf" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="lf" super="false">
                                                                    <receiver>
                                                                        <data_method_call method_name="printString" super="false">
                                                                            <receiver>
                                                                                <variable name="RunningTask"/>
                                                                            </receiver>
                                                                        </data_method_call>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="string">"Average Utilisation:\n"</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="printStatistics" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </return>
                        </then>
                        <else>
                            <return>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <data_method_call method_name="lf" super="false">
                                            <receiver>
                                                <constant type="string">"Processor is Idle\n\nAverage Utilisation:"</constant>
                                            </receiver>
                                        </data_method_call>
                                    </left_operand>
                                    <right_operand>
                                        <data_method_call method_name="printStatistics" super="false">
                                            <receiver>
                                                <self/>
                                            </receiver>
                                        </data_method_call>
                                    </right_operand>
                                </binary_operation>
                            </return>
                        </else>
                    </if>
                </body_expression>
            </data_method>
            <data_method name="run" native="false">
                <return_type>ProcessorStatus</return_type>
                <argument name="T" type="ScheduledTask"/>
                <argument name="CurrentTime" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Running">
                            <constant type="boolean">true</constant>
                        </assignment>
                        <assignment variable_name="RunningTask">
                            <data_method_call method_name="getName" super="false">
                                <receiver>
                                    <variable name="T"/>
                                </receiver>
                            </data_method_call>
                        </assignment>
                        <data_method_call method_name="rewardBM" super="false">
                            <receiver>
                                <self/>
                            </receiver>
                            <argument>
                                <constant type="real">1.0</constant>
                            </argument>
                            <argument>
                                <variable name="CurrentTime"/>
                            </argument>
                        </data_method_call>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="update" native="false">
                <return_type>ProcessorStatus</return_type>
                <argument name="Task" type="ScheduledTask"/>
                <argument name="RunTime" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <if>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <data_method_call method_name="getRemainingExecutionTime" super="false">
                                            <receiver>
                                                <variable name="Task"/>
                                            </receiver>
                                        </data_method_call>
                                    </left_operand>
                                    <right_operand>
                                        <nil/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <data_method_call method_name="setRemainingExecutionTime" super="false">
                                    <receiver>
                                        <variable name="Task"/>
                                    </receiver>
                                    <argument>
                                        <binary_operation operator="-">
                                            <left_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="/">
                                                        <left_operand>
                                                            <data_method_call method_name="at" super="false">
                                                                <receiver>
                                                                    <data_method_call method_name="at" super="false">
                                                                        <receiver>
                                                                            <variable name="ExecutionTimes"/>
                                                                        </receiver>
                                                                        <argument>
                                                                            <data_method_call method_name="getName" super="false">
                                                                                <receiver>
                                                                                    <variable name="Task"/>
                                                                                </receiver>
                                                                            </data_method_call>
                                                                        </argument>
                                                                    </data_method_call>
                                                                </receiver>
                                                                <argument>
                                                                    <data_method_call method_name="getScenario" super="false">
                                                                        <receiver>
                                                                            <variable name="Task"/>
                                                                        </receiver>
                                                                    </data_method_call>
                                                                </argument>
                                                            </data_method_call>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="Frequency"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="RunTime"/>
                                            </right_operand>
                                        </binary_operation>
                                    </argument>
                                </data_method_call>
                            </then>
                            <else>
                                <data_method_call method_name="setRemainingExecutionTime" super="false">
                                    <receiver>
                                        <variable name="Task"/>
                                    </receiver>
                                    <argument>
                                        <binary_operation operator="-">
                                            <left_operand>
                                                <data_method_call method_name="getRemainingExecutionTime" super="false">
                                                    <receiver>
                                                        <variable name="Task"/>
                                                    </receiver>
                                                </data_method_call>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="RunTime"/>
                                            </right_operand>
                                        </binary_operation>
                                    </argument>
                                </data_method_call>
                            </else>
                        </if>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
        <data_class name="ScheduledTask" native="false">
            <super_class>Object</super_class>
            <instance_variable name="Iteration" type="Integer"/>
            <instance_variable name="Name" type="String"/>
            <instance_variable name="Priority" type="Integer"/>
            <instance_variable name="RemainingExecutionTime" type="Real"/>
            <instance_variable name="Scenario" type="String"/>
            <data_method name="getIteration" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <return>
                        <variable name="Iteration"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="getName" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <variable name="Name"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="getPriority" native="false">
                <return_type>Integer</return_type>
                <body_expression>
                    <return>
                        <variable name="Priority"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="getRemainingExecutionTime" native="false">
                <return_type>Real</return_type>
                <body_expression>
                    <return>
                        <variable name="RemainingExecutionTime"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="getScenario" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <variable name="Scenario"/>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="init" native="false">
                <return_type>ScheduledTask</return_type>
                <argument name="N" type="String"/>
                <argument name="S" type="String"/>
                <argument name="I" type="Integer"/>
                <argument name="P" type="Integer"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="Name">
                            <variable name="N"/>
                        </assignment>
                        <assignment variable_name="Scenario">
                            <variable name="S"/>
                        </assignment>
                        <assignment variable_name="Iteration">
                            <variable name="I"/>
                        </assignment>
                        <assignment variable_name="Priority">
                            <variable name="P"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
            <data_method name="printString" native="false">
                <return_type>String</return_type>
                <body_expression>
                    <return>
                        <binary_operation operator="+">
                            <left_operand>
                                <binary_operation operator="+">
                                    <left_operand>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"Task "</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <data_method_call method_name="printString" super="false">
                                                                    <receiver>
                                                                        <variable name="Name"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">" in Scenario "</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <variable name="Scenario"/>
                                                    </receiver>
                                                </data_method_call>
                                            </right_operand>
                                        </binary_operation>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">" with Priority "</constant>
                                    </right_operand>
                                </binary_operation>
                            </left_operand>
                            <right_operand>
                                <data_method_call method_name="printString" super="false">
                                    <receiver>
                                        <variable name="Priority"/>
                                    </receiver>
                                </data_method_call>
                            </right_operand>
                        </binary_operation>
                    </return>
                </body_expression>
            </data_method>
            <data_method name="setRemainingExecutionTime" native="false">
                <return_type>ScheduledTask</return_type>
                <argument name="T" type="Real"/>
                <body_expression>
                    <sequence_of_expressions>
                        <assignment variable_name="RemainingExecutionTime">
                            <variable name="T"/>
                        </assignment>
                        <return>
                            <self/>
                        </return>
                    </sequence_of_expressions>
                </body_expression>
            </data_method>
        </data_class>
    </data_classes>
    <process_classes>
        <process_class name="DataBuffer">
            <interface>
                <port name="Communication">
                    <message type="write" name="InitialiseTokens">
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="ReleaseRoom">
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="Transfer">
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="Use">
                        <argument type="String"/>
                    </message>
                    <message type="read" name="TransferCompleted">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="TransferInitiated">
                        <argument type="String"/>
                    </message>
                </port>
                <port name="In">
                    <message type="write" name="ReservationSuccessful"/>
                    <message type="read" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="read" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="WriteTokens"/>
                </port>
                <port name="Out">
                    <message type="write" name="TokensAvailable"/>
                    <message type="read" name="InspectTokenAvailability">
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="read" name="ReleaseRoom"/>
                </port>
            </interface>
            <instantiation_parameter name="Name" type="String"/>
            <instantiation_parameter name="NumberOfInitialTokens" type="Integer"/>
            <instantiation_parameter name="TokenSize" type="Integer"/>
            <instance_variable name="MapTo" type="String"/>
            <instance_variable name="Status" type="DataBufferMonitor"/>
            <instance_variable name="TransferID" type="Integer"/>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="35"/>
            </initial_method_call>
            <process_method name="DetermineMapping">
                <local_variable name="InputTask" type="String"/>
                <local_variable name="OutputTask" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="1">
                        <message_receive message_name="MappedTo" stmt_handle="2">
                            <variable>InputTask</variable>
                            <port>In</port>
                        </message_receive>
                        <message_receive message_name="MappedTo" stmt_handle="3">
                            <variable>OutputTask</variable>
                            <port>Out</port>
                        </message_receive>
                        <if stmt_handle="4">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="InputTask"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="OutputTask"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <expression stmt_handle="5">
                                    <assignment variable_name="MapTo">
                                        <variable name="InputTask"/>
                                    </assignment>
                                </expression>
                            </then>
                            <else>
                                <expression stmt_handle="6">
                                    <assignment variable_name="MapTo">
                                        <constant type="string">"NoC"</constant>
                                    </assignment>
                                </expression>
                            </else>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="HandleInput">
                <local_variable name="NumberOfTokens" type="Integer"/>
                <local_variable name="ID" type="Integer"/>
                <local_variable name="Iteration" type="Integer"/>
                <local_variable name="Connection" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="7">
                        <message_receive message_name="ReserveRoom" stmt_handle="8">
                            <variable>NumberOfTokens</variable>
                            <variable>Iteration</variable>
                            <condition>
                                <data_method_call method_name="room" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                    <argument>
                                        <variable name="NumberOfTokens"/>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <port>In</port>
                        </message_receive>
                        <message_send message_name="ReserveRoom" stmt_handle="9">
                            <argument>
                                <variable name="Name"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <argument>
                                <variable name="NumberOfTokens"/>
                            </argument>
                            <argument>
                                <variable name="TokenSize"/>
                            </argument>
                            <port>Communication</port>
                        </message_send>
                        <message_receive message_name="TransferInitiated" stmt_handle="10">
                            <variable>Connection</variable>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Connection"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Name"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <atomic_expression>
                                <data_method_call method_name="reserve" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                    <argument>
                                        <variable name="NumberOfTokens"/>
                                    </argument>
                                    <argument>
                                        <current_time/>
                                    </argument>
                                </data_method_call>
                            </atomic_expression>
                            <port>Communication</port>
                        </message_receive>
                        <message_send message_name="ReservationSuccessful" stmt_handle="11">
                            <port>In</port>
                        </message_send>
                        <message_receive message_name="WriteTokens" stmt_handle="12">
                            <atomic_expression>
                                <assignment variable_name="TransferID">
                                    <binary_operation operator="+">
                                        <left_operand>
                                            <variable name="TransferID"/>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="integer">1</constant>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                            </atomic_expression>
                            <port>In</port>
                        </message_receive>
                        <parallel_statements stmt_handle="13">
                            <sequence_of_statements stmt_handle="14">
                                <message_send message_name="Transfer" stmt_handle="15">
                                    <argument>
                                        <variable name="Name"/>
                                    </argument>
                                    <argument>
                                        <variable name="Iteration"/>
                                    </argument>
                                    <argument>
                                        <variable name="MapTo"/>
                                    </argument>
                                    <argument>
                                        <variable name="TransferID"/>
                                    </argument>
                                    <port>Communication</port>
                                </message_send>
                                <message_receive message_name="TransferCompleted" stmt_handle="16">
                                    <variable>Connection</variable>
                                    <variable>ID</variable>
                                    <condition>
                                        <binary_operation operator="&amp;">
                                            <left_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="Connection"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="Name"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="ID"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="TransferID"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <atomic_expression>
                                        <data_method_call method_name="write" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                            <argument>
                                                <variable name="NumberOfTokens"/>
                                            </argument>
                                        </data_method_call>
                                    </atomic_expression>
                                    <port>Communication</port>
                                </message_receive>
                            </sequence_of_statements>
                            <process_method_call method_name="HandleInput" stmt_handle="17"/>
                        </parallel_statements>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="HandleOutput">
                <local_variable name="NumberOfTokens" type="Integer"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="18">
                        <message_receive message_name="InspectTokenAvailability" stmt_handle="19">
                            <variable>NumberOfTokens</variable>
                            <condition>
                                <data_method_call method_name="available" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                    <argument>
                                        <variable name="NumberOfTokens"/>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <port>Out</port>
                        </message_receive>
                        <message_send message_name="TokensAvailable" stmt_handle="20">
                            <port>Out</port>
                        </message_send>
                        <message_receive message_name="ReleaseRoom" stmt_handle="21">
                            <port>Out</port>
                        </message_receive>
                        <message_send message_name="ReleaseRoom" stmt_handle="22">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <argument>
                                <variable name="NumberOfTokens"/>
                            </argument>
                            <argument>
                                <variable name="TokenSize"/>
                            </argument>
                            <atomic_expression>
                                <data_method_call method_name="remove" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                    <argument>
                                        <variable name="NumberOfTokens"/>
                                    </argument>
                                    <argument>
                                        <current_time/>
                                    </argument>
                                </data_method_call>
                            </atomic_expression>
                            <port>Communication</port>
                        </message_send>
                        <process_method_call method_name="HandleOutput" stmt_handle="23"/>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="Initialise">
                <body_statement>
                    <sequence_of_statements stmt_handle="24">
                        <expression stmt_handle="25">
                            <assignment variable_name="TransferID">
                                <constant type="integer">0</constant>
                            </assignment>
                        </expression>
                        <expression stmt_handle="26">
                            <assignment variable_name="Status">
                                <data_method_call method_name="init" super="false">
                                    <receiver>
                                        <new data_class="DataBufferMonitor"/>
                                    </receiver>
                                    <argument>
                                        <variable name="Name"/>
                                    </argument>
                                    <argument>
                                        <constant type="integer">-1</constant>
                                    </argument>
                                    <argument>
                                        <variable name="NumberOfInitialTokens"/>
                                    </argument>
                                    <argument>
                                        <variable name="TokenSize"/>
                                    </argument>
                                    <argument>
                                        <constant type="boolean">false</constant>
                                    </argument>
                                    <argument>
                                        <constant type="boolean">false</constant>
                                    </argument>
                                </data_method_call>
                            </assignment>
                        </expression>
                        <process_method_call method_name="DetermineMapping" stmt_handle="27"/>
                        <process_method_call method_name="NotifyPlatformAboutMapping" stmt_handle="28"/>
                        <if stmt_handle="29">
                            <condition>
                                <binary_operation operator="&gt;">
                                    <left_operand>
                                        <variable name="NumberOfInitialTokens"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="integer">0</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <message_send message_name="InitialiseTokens" stmt_handle="30">
                                    <argument>
                                        <variable name="MapTo"/>
                                    </argument>
                                    <argument>
                                        <variable name="NumberOfInitialTokens"/>
                                    </argument>
                                    <argument>
                                        <variable name="TokenSize"/>
                                    </argument>
                                    <port>Communication</port>
                                </message_send>
                            </then>
                        </if>
                        <parallel_statements stmt_handle="31">
                            <process_method_call method_name="HandleInput" stmt_handle="32"/>
                            <process_method_call method_name="HandleOutput" stmt_handle="33"/>
                        </parallel_statements>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="NotifyPlatformAboutMapping">
                <body_statement>
                    <message_send message_name="Use" stmt_handle="34">
                        <argument>
                            <variable name="MapTo"/>
                        </argument>
                        <port>Communication</port>
                    </message_send>
                </body_statement>
            </process_method>
        </process_class>
        <process_class name="ControlBuffer">
            <interface>
                <port name="Communication">
                    <message type="write" name="ReleaseRoom">
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="Transfer">
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="Use">
                        <argument type="String"/>
                    </message>
                    <message type="read" name="TransferCompleted">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="TransferInitiated">
                        <argument type="String"/>
                    </message>
                </port>
                <port name="In">
                    <message type="write" name="ReservationSuccessful"/>
                    <message type="read" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="read" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="WriteTokens">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                </port>
                <port name="Out">
                    <message type="write" name="TokenAvailable">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="InspectTokenAvailability"/>
                    <message type="read" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="read" name="ReleaseRoom"/>
                </port>
            </interface>
            <instantiation_parameter name="Name" type="String"/>
            <instantiation_parameter name="TokenSize" type="Integer"/>
            <instance_variable name="MapTo" type="String"/>
            <instance_variable name="Status" type="ControlBufferMonitor"/>
            <instance_variable name="TransferID" type="Integer"/>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="69"/>
            </initial_method_call>
            <process_method name="DetermineMapping">
                <local_variable name="InputTask" type="String"/>
                <local_variable name="OutputTask" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="36">
                        <message_receive message_name="MappedTo" stmt_handle="37">
                            <variable>InputTask</variable>
                            <port>In</port>
                        </message_receive>
                        <message_receive message_name="MappedTo" stmt_handle="38">
                            <variable>OutputTask</variable>
                            <port>Out</port>
                        </message_receive>
                        <if stmt_handle="39">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="InputTask"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="OutputTask"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <expression stmt_handle="40">
                                    <assignment variable_name="MapTo">
                                        <variable name="InputTask"/>
                                    </assignment>
                                </expression>
                            </then>
                            <else>
                                <expression stmt_handle="41">
                                    <assignment variable_name="MapTo">
                                        <constant type="string">"NoC"</constant>
                                    </assignment>
                                </expression>
                            </else>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="HandleInput">
                <local_variable name="NumberOfTokens" type="Integer"/>
                <local_variable name="ID" type="Integer"/>
                <local_variable name="Iteration" type="Integer"/>
                <local_variable name="Scenario" type="String"/>
                <local_variable name="Connection" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="42">
                        <message_receive message_name="ReserveRoom" stmt_handle="43">
                            <variable>NumberOfTokens</variable>
                            <variable>Iteration</variable>
                            <condition>
                                <data_method_call method_name="room" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                    <argument>
                                        <variable name="NumberOfTokens"/>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <port>In</port>
                        </message_receive>
                        <message_send message_name="ReserveRoom" stmt_handle="44">
                            <argument>
                                <variable name="Name"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <argument>
                                <variable name="NumberOfTokens"/>
                            </argument>
                            <argument>
                                <variable name="TokenSize"/>
                            </argument>
                            <port>Communication</port>
                        </message_send>
                        <message_receive message_name="TransferInitiated" stmt_handle="45">
                            <variable>Connection</variable>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Connection"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Name"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <atomic_expression>
                                <data_method_call method_name="reserve" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                    <argument>
                                        <variable name="NumberOfTokens"/>
                                    </argument>
                                    <argument>
                                        <current_time/>
                                    </argument>
                                </data_method_call>
                            </atomic_expression>
                            <port>Communication</port>
                        </message_receive>
                        <message_send message_name="ReservationSuccessful" stmt_handle="46">
                            <port>In</port>
                        </message_send>
                        <message_receive message_name="WriteTokens" stmt_handle="47">
                            <variable>Scenario</variable>
                            <variable>Iteration</variable>
                            <atomic_expression>
                                <assignment variable_name="TransferID">
                                    <binary_operation operator="+">
                                        <left_operand>
                                            <variable name="TransferID"/>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="integer">1</constant>
                                        </right_operand>
                                    </binary_operation>
                                </assignment>
                            </atomic_expression>
                            <port>In</port>
                        </message_receive>
                        <parallel_statements stmt_handle="48">
                            <sequence_of_statements stmt_handle="49">
                                <message_send message_name="Transfer" stmt_handle="50">
                                    <argument>
                                        <variable name="Name"/>
                                    </argument>
                                    <argument>
                                        <variable name="Iteration"/>
                                    </argument>
                                    <argument>
                                        <variable name="MapTo"/>
                                    </argument>
                                    <argument>
                                        <variable name="TransferID"/>
                                    </argument>
                                    <port>Communication</port>
                                </message_send>
                                <message_receive message_name="TransferCompleted" stmt_handle="51">
                                    <variable>Connection</variable>
                                    <variable>ID</variable>
                                    <condition>
                                        <binary_operation operator="&amp;">
                                            <left_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="Connection"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="Name"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="ID"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="TransferID"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <atomic_expression>
                                        <data_method_call method_name="write" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                            <argument>
                                                <variable name="NumberOfTokens"/>
                                            </argument>
                                            <argument>
                                                <variable name="Scenario"/>
                                            </argument>
                                            <argument>
                                                <variable name="Iteration"/>
                                            </argument>
                                        </data_method_call>
                                    </atomic_expression>
                                    <port>Communication</port>
                                </message_receive>
                            </sequence_of_statements>
                            <process_method_call method_name="HandleInput" stmt_handle="52"/>
                        </parallel_statements>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="HandleOutput">
                <body_statement>
                    <sequence_of_statements stmt_handle="53">
                        <guard stmt_handle="54">
                            <expression>
                                <data_method_call method_name="available" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                </data_method_call>
                            </expression>
                            <statement>
                                <message_receive message_name="InspectTokenAvailability" stmt_handle="55">
                                    <port>Out</port>
                                </message_receive>
                            </statement>
                        </guard>
                        <message_send message_name="TokenAvailable" stmt_handle="56">
                            <argument>
                                <data_method_call method_name="inspectScenario" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                </data_method_call>
                            </argument>
                            <argument>
                                <data_method_call method_name="inspectIteration" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                </data_method_call>
                            </argument>
                            <port>Out</port>
                        </message_send>
                        <message_receive message_name="ReleaseRoom" stmt_handle="57">
                            <port>Out</port>
                        </message_receive>
                        <message_send message_name="ReleaseRoom" stmt_handle="58">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <argument>
                                <constant type="integer">1</constant>
                            </argument>
                            <argument>
                                <constant type="integer">1</constant>
                            </argument>
                            <atomic_expression>
                                <data_method_call method_name="remove" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                    <argument>
                                        <current_time/>
                                    </argument>
                                </data_method_call>
                            </atomic_expression>
                            <port>Communication</port>
                        </message_send>
                        <process_method_call method_name="HandleOutput" stmt_handle="59"/>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="Initialise">
                <body_statement>
                    <sequence_of_statements stmt_handle="60">
                        <expression stmt_handle="61">
                            <assignment variable_name="TransferID">
                                <constant type="integer">0</constant>
                            </assignment>
                        </expression>
                        <expression stmt_handle="62">
                            <assignment variable_name="Status">
                                <data_method_call method_name="init" super="false">
                                    <receiver>
                                        <new data_class="ControlBufferMonitor"/>
                                    </receiver>
                                    <argument>
                                        <variable name="Name"/>
                                    </argument>
                                    <argument>
                                        <constant type="integer">-1</constant>
                                    </argument>
                                    <argument>
                                        <new data_class="Queue"/>
                                    </argument>
                                    <argument>
                                        <new data_class="Queue"/>
                                    </argument>
                                    <argument>
                                        <variable name="TokenSize"/>
                                    </argument>
                                    <argument>
                                        <constant type="boolean">false</constant>
                                    </argument>
                                    <argument>
                                        <constant type="boolean">false</constant>
                                    </argument>
                                </data_method_call>
                            </assignment>
                        </expression>
                        <process_method_call method_name="DetermineMapping" stmt_handle="63"/>
                        <process_method_call method_name="NotifyPlatformAboutMapping" stmt_handle="64"/>
                        <parallel_statements stmt_handle="65">
                            <process_method_call method_name="HandleInput" stmt_handle="66"/>
                            <process_method_call method_name="HandleOutput" stmt_handle="67"/>
                        </parallel_statements>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="NotifyPlatformAboutMapping">
                <body_statement>
                    <message_send message_name="Use" stmt_handle="68">
                        <argument>
                            <variable name="MapTo"/>
                        </argument>
                        <port>Communication</port>
                    </message_send>
                </body_statement>
            </process_method>
        </process_class>
        <process_class name="Task1">
            <interface>
                <port name="C_T2">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="C_T3">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="C_T4">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="C_T5">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="C_T6">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="C_T7">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="C_T8">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="Computation">
                    <message type="write" name="Execute">
                        <argument type="String"/>
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                    </message>
                    <message type="write" name="Use">
                        <argument type="String"/>
                    </message>
                    <message type="read" name="ExecutionCompleted">
                        <argument type="String"/>
                    </message>
                </port>
                <port name="D_T2">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens"/>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="D_T3">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens"/>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="D_T4">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens"/>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="In">
                    <message type="write" name="InspectTokenAvailability">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokensAvailable"/>
                </port>
            </interface>
            <instantiation_parameter name="Iterate" type="Boolean"/>
            <instantiation_parameter name="MapTo" type="String"/>
            <instantiation_parameter name="Name" type="String"/>
            <instantiation_parameter name="Priority" type="Integer"/>
            <instantiation_parameter name="ScenarioPart1" type="String"/>
            <instance_variable name="MarkovChain" type="MarkovChain"/>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="143"/>
            </initial_method_call>
            <process_method name="CheckTokenAvailabilityForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="70">
                        <message_send message_name="InspectTokenAvailability" stmt_handle="71">
                            <argument>
                                <constant type="integer">1</constant>
                            </argument>
                            <port>In</port>
                        </message_send>
                        <message_receive message_name="TokensAvailable" stmt_handle="72">
                            <port>In</port>
                        </message_receive>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="Execute">
                <argument name="Scenario" type="String"/>
                <argument name="Iteration" type="Integer"/>
                <local_variable name="N" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="73">
                        <message_send message_name="Execute" stmt_handle="74">
                            <argument>
                                <variable name="Name"/>
                            </argument>
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <argument>
                                <variable name="Priority"/>
                            </argument>
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Computation</port>
                        </message_send>
                        <message_receive message_name="ExecutionCompleted" stmt_handle="75">
                            <variable>N</variable>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="N"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Name"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <port>Computation</port>
                        </message_receive>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="Fire">
                <argument name="Iteration" type="Integer"/>
                <local_variable name="Scenario" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="76">
                        <if stmt_handle="77">
                            <condition>
                                <variable name="Iterate"/>
                            </condition>
                            <then>
                                <expression stmt_handle="78">
                                    <assignment variable_name="Scenario">
                                        <data_method_call method_name="getNextScenario" super="false">
                                            <receiver>
                                                <variable name="MarkovChain"/>
                                            </receiver>
                                        </data_method_call>
                                    </assignment>
                                </expression>
                            </then>
                            <else>
                                <expression stmt_handle="79">
                                    <assignment variable_name="Scenario">
                                        <variable name="ScenarioPart1"/>
                                    </assignment>
                                </expression>
                            </else>
                        </if>
                        <if stmt_handle="80">
                            <condition>
                                <data_method_call method_name="not" super="false">
                                    <receiver>
                                        <data_method_call method_name="hasState" super="false">
                                            <receiver>
                                                <variable name="MarkovChain"/>
                                            </receiver>
                                            <argument>
                                                <variable name="Scenario"/>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <expression stmt_handle="81">
                                    <assignment variable_name="Scenario">
                                        <data_method_call method_name="error" super="false">
                                            <receiver>
                                                <new data_class="Object"/>
                                            </receiver>
                                            <argument>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"Uknown scenario: "</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Scenario"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">" in Task1 method Fire()()."</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                </expression>
                            </then>
                        </if>
                        <process_method_call method_name="CheckTokenAvailabilityForReads" stmt_handle="82">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                        </process_method_call>
                        <process_method_call method_name="ReserveSpaceForWrites" stmt_handle="83">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                        </process_method_call>
                        <process_method_call method_name="Execute" stmt_handle="84">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                        </process_method_call>
                        <process_method_call method_name="ReleaseSpaceForReads" stmt_handle="85">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                        </process_method_call>
                        <process_method_call method_name="PerformWrites" stmt_handle="86">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                        </process_method_call>
                        <if stmt_handle="87">
                            <condition>
                                <variable name="Iterate"/>
                            </condition>
                            <then>
                                <process_method_call method_name="Fire" stmt_handle="88">
                                    <argument>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <variable name="Iteration"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">1</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </argument>
                                </process_method_call>
                            </then>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="Initialise">
                <body_statement>
                    <sequence_of_statements stmt_handle="89">
                        <process_method_call method_name="NotifyBuffersAboutMapping" stmt_handle="90"/>
                        <process_method_call method_name="NotifyPlatformAboutMapping" stmt_handle="91"/>
                        <expression stmt_handle="92">
                            <sequence_of_expressions>
                                <assignment variable_name="MarkovChain">
                                    <data_method_call method_name="init" super="false">
                                        <receiver>
                                            <new data_class="MarkovChain"/>
                                        </receiver>
                                    </data_method_call>
                                </assignment>
                                <data_method_call method_name="addState" super="false">
                                    <receiver>
                                        <variable name="MarkovChain"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"S1"</constant>
                                    </argument>
                                </data_method_call>
                                <data_method_call method_name="addTransition" super="false">
                                    <receiver>
                                        <variable name="MarkovChain"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"S1"</constant>
                                    </argument>
                                    <argument>
                                        <constant type="string">"S1"</constant>
                                    </argument>
                                    <argument>
                                        <constant type="real">0.0</constant>
                                    </argument>
                                    <argument>
                                        <constant type="real">0.5</constant>
                                    </argument>
                                </data_method_call>
                                <data_method_call method_name="addTransition" super="false">
                                    <receiver>
                                        <variable name="MarkovChain"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"S1"</constant>
                                    </argument>
                                    <argument>
                                        <constant type="string">"S2"</constant>
                                    </argument>
                                    <argument>
                                        <constant type="real">0.5</constant>
                                    </argument>
                                    <argument>
                                        <constant type="real">1.0</constant>
                                    </argument>
                                </data_method_call>
                                <data_method_call method_name="addState" super="false">
                                    <receiver>
                                        <variable name="MarkovChain"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"S2"</constant>
                                    </argument>
                                </data_method_call>
                                <data_method_call method_name="addTransition" super="false">
                                    <receiver>
                                        <variable name="MarkovChain"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"S2"</constant>
                                    </argument>
                                    <argument>
                                        <constant type="string">"S2"</constant>
                                    </argument>
                                    <argument>
                                        <constant type="real">0.0</constant>
                                    </argument>
                                    <argument>
                                        <binary_operation operator="/">
                                            <left_operand>
                                                <constant type="real">2.0</constant>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="real">3.0</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </argument>
                                </data_method_call>
                                <data_method_call method_name="addTransition" super="false">
                                    <receiver>
                                        <variable name="MarkovChain"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"S2"</constant>
                                    </argument>
                                    <argument>
                                        <constant type="string">"S1"</constant>
                                    </argument>
                                    <argument>
                                        <binary_operation operator="/">
                                            <left_operand>
                                                <constant type="real">2.0</constant>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="real">3.0</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </argument>
                                    <argument>
                                        <constant type="real">1.0</constant>
                                    </argument>
                                </data_method_call>
                                <data_method_call method_name="setInitialState" super="false">
                                    <receiver>
                                        <variable name="MarkovChain"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"S1"</constant>
                                    </argument>
                                </data_method_call>
                            </sequence_of_expressions>
                        </expression>
                        <process_method_call method_name="Fire" stmt_handle="93">
                            <argument>
                                <constant type="integer">0</constant>
                            </argument>
                        </process_method_call>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="NotifyBuffersAboutMapping">
                <body_statement>
                    <parallel_statements stmt_handle="94">
                        <message_send message_name="MappedTo" stmt_handle="95">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>In</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="96">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>D_T2</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="97">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>D_T3</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="98">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>D_T4</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="99">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>C_T2</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="100">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>C_T3</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="101">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>C_T4</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="102">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>C_T5</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="103">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>C_T6</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="104">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>C_T7</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="105">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>C_T8</port>
                        </message_send>
                    </parallel_statements>
                </body_statement>
            </process_method>
            <process_method name="NotifyPlatformAboutMapping">
                <body_statement>
                    <message_send message_name="Use" stmt_handle="106">
                        <argument>
                            <variable name="MapTo"/>
                        </argument>
                        <port>Computation</port>
                    </message_send>
                </body_statement>
            </process_method>
            <process_method name="PerformWrites">
                <argument name="Scenario" type="String"/>
                <argument name="Iteration" type="Integer"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="107">
                        <message_send message_name="WriteTokens" stmt_handle="108">
                            <port>D_T2</port>
                        </message_send>
                        <message_send message_name="WriteTokens" stmt_handle="109">
                            <port>D_T3</port>
                        </message_send>
                        <if stmt_handle="110">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Scenario"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"S1"</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <message_send message_name="WriteTokens" stmt_handle="111">
                                    <port>D_T4</port>
                                </message_send>
                            </then>
                        </if>
                        <message_send message_name="WriteTokens" stmt_handle="112">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>C_T2</port>
                        </message_send>
                        <message_send message_name="WriteTokens" stmt_handle="113">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>C_T3</port>
                        </message_send>
                        <message_send message_name="WriteTokens" stmt_handle="114">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>C_T4</port>
                        </message_send>
                        <message_send message_name="WriteTokens" stmt_handle="115">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>C_T5</port>
                        </message_send>
                        <message_send message_name="WriteTokens" stmt_handle="116">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>C_T6</port>
                        </message_send>
                        <message_send message_name="WriteTokens" stmt_handle="117">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>C_T7</port>
                        </message_send>
                        <message_send message_name="WriteTokens" stmt_handle="118">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>C_T8</port>
                        </message_send>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="ReleaseSpaceForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <message_send message_name="ReleaseRoom" stmt_handle="119">
                        <port>In</port>
                    </message_send>
                </body_statement>
            </process_method>
            <process_method name="ReserveSpaceForWrites">
                <argument name="Scenario" type="String"/>
                <argument name="Iteration" type="Integer"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="120">
                        <message_send message_name="ReserveRoom" stmt_handle="121">
                            <argument>
                                <constant type="integer">2048</constant>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>D_T2</port>
                        </message_send>
                        <message_receive message_name="ReservationSuccessful" stmt_handle="122">
                            <port>D_T2</port>
                        </message_receive>
                        <message_send message_name="ReserveRoom" stmt_handle="123">
                            <argument>
                                <constant type="integer">1024</constant>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>D_T3</port>
                        </message_send>
                        <message_receive message_name="ReservationSuccessful" stmt_handle="124">
                            <port>D_T3</port>
                        </message_receive>
                        <if stmt_handle="125">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Scenario"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"S1"</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_statements stmt_handle="126">
                                    <message_send message_name="ReserveRoom" stmt_handle="127">
                                        <argument>
                                            <constant type="integer">2048</constant>
                                        </argument>
                                        <argument>
                                            <variable name="Iteration"/>
                                        </argument>
                                        <port>D_T4</port>
                                    </message_send>
                                    <message_receive message_name="ReservationSuccessful" stmt_handle="128">
                                        <port>D_T4</port>
                                    </message_receive>
                                </sequence_of_statements>
                            </then>
                        </if>
                        <message_send message_name="ReserveRoom" stmt_handle="129">
                            <argument>
                                <constant type="integer">1</constant>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>C_T2</port>
                        </message_send>
                        <message_receive message_name="ReservationSuccessful" stmt_handle="130">
                            <port>C_T2</port>
                        </message_receive>
                        <message_send message_name="ReserveRoom" stmt_handle="131">
                            <argument>
                                <constant type="integer">1</constant>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>C_T3</port>
                        </message_send>
                        <message_receive message_name="ReservationSuccessful" stmt_handle="132">
                            <port>C_T3</port>
                        </message_receive>
                        <message_send message_name="ReserveRoom" stmt_handle="133">
                            <argument>
                                <constant type="integer">1</constant>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>C_T4</port>
                        </message_send>
                        <message_receive message_name="ReservationSuccessful" stmt_handle="134">
                            <port>C_T4</port>
                        </message_receive>
                        <message_send message_name="ReserveRoom" stmt_handle="135">
                            <argument>
                                <constant type="integer">1</constant>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>C_T5</port>
                        </message_send>
                        <message_receive message_name="ReservationSuccessful" stmt_handle="136">
                            <port>C_T5</port>
                        </message_receive>
                        <message_send message_name="ReserveRoom" stmt_handle="137">
                            <argument>
                                <constant type="integer">1</constant>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>C_T6</port>
                        </message_send>
                        <message_receive message_name="ReservationSuccessful" stmt_handle="138">
                            <port>C_T6</port>
                        </message_receive>
                        <message_send message_name="ReserveRoom" stmt_handle="139">
                            <argument>
                                <constant type="integer">1</constant>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>C_T7</port>
                        </message_send>
                        <message_receive message_name="ReservationSuccessful" stmt_handle="140">
                            <port>C_T7</port>
                        </message_receive>
                        <message_send message_name="ReserveRoom" stmt_handle="141">
                            <argument>
                                <constant type="integer">1</constant>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>C_T8</port>
                        </message_send>
                        <message_receive message_name="ReservationSuccessful" stmt_handle="142">
                            <port>C_T8</port>
                        </message_receive>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
        </process_class>
        <process_class name="EnergySource">
            <interface>
                <port name="Power">
                    <message type="read" name="StartConsumption">
                        <argument type="Real"/>
                    </message>
                    <message type="read" name="StopConsumption">
                        <argument type="Real"/>
                    </message>
                </port>
                <port name="Status">
                    <message type="read" name="Finished"/>
                </port>
            </interface>
            <instantiation_parameter name="AccuracyCheckInterval" type="Real"/>
            <instance_variable name="Status" type="BatteryStatus"/>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="346"/>
            </initial_method_call>
            <process_method name="HandleConsumptions">
                <local_variable name="Power" type="Real"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="330">
                        <select_statements stmt_handle="331">
                            <message_receive message_name="StartConsumption" stmt_handle="332">
                                <variable>Power</variable>
                                <atomic_expression>
                                    <data_method_call method_name="startConsumption" super="false">
                                        <receiver>
                                            <variable name="Status"/>
                                        </receiver>
                                        <argument>
                                            <variable name="Power"/>
                                        </argument>
                                        <argument>
                                            <current_time/>
                                        </argument>
                                    </data_method_call>
                                </atomic_expression>
                                <port>Power</port>
                            </message_receive>
                            <message_receive message_name="StopConsumption" stmt_handle="333">
                                <variable>Power</variable>
                                <atomic_expression>
                                    <data_method_call method_name="stopConsumption" super="false">
                                        <receiver>
                                            <variable name="Status"/>
                                        </receiver>
                                        <argument>
                                            <variable name="Power"/>
                                        </argument>
                                        <argument>
                                            <current_time/>
                                        </argument>
                                    </data_method_call>
                                </atomic_expression>
                                <port>Power</port>
                            </message_receive>
                        </select_statements>
                        <process_method_call method_name="HandleConsumptions" stmt_handle="334"/>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="Initialise">
                <body_statement>
                    <sequence_of_statements stmt_handle="335">
                        <expression stmt_handle="336">
                            <assignment variable_name="Status">
                                <data_method_call method_name="init" super="false">
                                    <receiver>
                                        <new data_class="BatteryStatus"/>
                                    </receiver>
                                </data_method_call>
                            </assignment>
                        </expression>
                        <abort stmt_handle="337">
                            <normal_behavior>
                                <parallel_statements stmt_handle="338">
                                    <process_method_call method_name="HandleConsumptions" stmt_handle="339"/>
                                    <process_method_call method_name="checkAccuracyStatus" stmt_handle="340"/>
                                </parallel_statements>
                            </normal_behavior>
                            <aborting_behavior>
                                <message_receive message_name="Finished" stmt_handle="341">
                                    <atomic_expression>
                                        <data_method_call method_name="complete" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                        </data_method_call>
                                    </atomic_expression>
                                    <port>Status</port>
                                </message_receive>
                            </aborting_behavior>
                        </abort>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="checkAccuracyStatus">
                <body_statement>
                    <sequence_of_statements stmt_handle="342">
                        <delay stmt_handle="343">
                            <sequence_of_expressions>
                                <variable name="AccuracyCheckInterval"/>
                            </sequence_of_expressions>
                        </delay>
                        <if stmt_handle="344">
                            <condition>
                                <data_method_call method_name="not" super="false">
                                    <receiver>
                                        <data_method_call method_name="accurate" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <process_method_call method_name="checkAccuracyStatus" stmt_handle="345"/>
                            </then>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
        </process_class>
        <process_class name="Task">
            <interface>
                <port name="Computation">
                    <message type="write" name="Use">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="Execute">
                        <argument type="String"/>
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                    </message>
                    <message type="read" name="ExecutionCompleted">
                        <argument type="String"/>
                    </message>
                </port>
                <port name="Control">
                    <message type="write" name="InspectTokenAvailability"/>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokenAvailable">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                </port>
            </interface>
            <instantiation_parameter name="MapTo" type="String"/>
            <instantiation_parameter name="Name" type="String"/>
            <instantiation_parameter name="Priority" type="Integer"/>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="370"/>
            </initial_method_call>
            <process_method name="Initialise">
                <body_statement>
                    <sequence_of_statements stmt_handle="347">
                        <process_method_call method_name="NotifyBuffersAboutMapping" stmt_handle="348"/>
                        <process_method_call method_name="NotifyPlatformAboutMapping" stmt_handle="349"/>
                        <process_method_call method_name="Fire" stmt_handle="350"/>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="ReleaseSpaceForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <skip stmt_handle="351"/>
                </body_statement>
            </process_method>
            <process_method name="ReserveSpaceForWrites">
                <argument name="Scenario" type="String"/>
                <argument name="Iteration" type="Integer"/>
                <body_statement>
                    <skip stmt_handle="352"/>
                </body_statement>
            </process_method>
            <process_method name="NotifyPlatformAboutMapping">
                <body_statement>
                    <message_send message_name="Use" stmt_handle="353">
                        <argument>
                            <variable name="MapTo"/>
                        </argument>
                        <port>Computation</port>
                    </message_send>
                </body_statement>
            </process_method>
            <process_method name="NotifyBuffersAboutMapping">
                <body_statement>
                    <skip stmt_handle="354"/>
                </body_statement>
            </process_method>
            <process_method name="CheckTokenAvailabilityForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <skip stmt_handle="355"/>
                </body_statement>
            </process_method>
            <process_method name="Fire">
                <local_variable name="Scenario" type="String"/>
                <local_variable name="Iteration" type="Integer"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="356">
                        <message_send message_name="InspectTokenAvailability" stmt_handle="357">
                            <port>Control</port>
                        </message_send>
                        <message_receive message_name="TokenAvailable" stmt_handle="358">
                            <variable>Scenario</variable>
                            <variable>Iteration</variable>
                            <port>Control</port>
                        </message_receive>
                        <process_method_call method_name="CheckTokenAvailabilityForReads" stmt_handle="359">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                        </process_method_call>
                        <process_method_call method_name="ReserveSpaceForWrites" stmt_handle="360">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                        </process_method_call>
                        <process_method_call method_name="Execute" stmt_handle="361">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                        </process_method_call>
                        <process_method_call method_name="ReleaseSpaceForReads" stmt_handle="362">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                        </process_method_call>
                        <process_method_call method_name="PerformWrites" stmt_handle="363">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                        </process_method_call>
                        <message_send message_name="ReleaseRoom" stmt_handle="364">
                            <port>Control</port>
                        </message_send>
                        <process_method_call method_name="Fire" stmt_handle="365"/>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="PerformWrites">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <skip stmt_handle="366"/>
                </body_statement>
            </process_method>
            <process_method name="Execute">
                <argument name="Scenario" type="String"/>
                <argument name="Iteration" type="Integer"/>
                <local_variable name="N" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="367">
                        <message_send message_name="Execute" stmt_handle="368">
                            <argument>
                                <variable name="Name"/>
                            </argument>
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <argument>
                                <variable name="Priority"/>
                            </argument>
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Computation</port>
                        </message_send>
                        <message_receive message_name="ExecutionCompleted" stmt_handle="369">
                            <variable>N</variable>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="N"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="Name"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <port>Computation</port>
                        </message_receive>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
        </process_class>
        <process_class name="StorageUnit">
            <interface>
                <port name="Power">
                    <message type="write" name="StartConsumption">
                        <argument type="Real"/>
                    </message>
                    <message type="write" name="StopConsumption">
                        <argument type="Real"/>
                    </message>
                </port>
                <port name="Access">
                    <message type="read" name="Allocate">
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="Free">
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="Use">
                        <argument type="Boolean"/>
                    </message>
                </port>
                <port name="Status">
                    <message type="read" name="Finished"/>
                </port>
            </interface>
            <instantiation_parameter name="MaxEventTimeToLog" type="Real"/>
            <instantiation_parameter name="Name" type="String"/>
            <instantiation_parameter name="PowerPerByte" type="Real"/>
            <instantiation_parameter name="Type" type="String"/>
            <instantiation_parameter name="AccuracyCheckInterval" type="Real"/>
            <instance_variable name="LogDoc" type="XMLDocument"/>
            <instance_variable name="Logging" type="Boolean"/>
            <instance_variable name="Status" type="MemoryStatus"/>
            <instance_variable name="TraceElement" type="XMLElement"/>
            <instance_variable name="observer" type="Observer"/>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="423"/>
            </initial_method_call>
            <process_method name="CheckContinueLog">
                <body_statement>
                    <if stmt_handle="371">
                        <condition>
                            <binary_operation operator="&gt;">
                                <left_operand>
                                    <current_time/>
                                </left_operand>
                                <right_operand>
                                    <variable name="MaxEventTimeToLog"/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <sequence_of_statements stmt_handle="372">
                                <expression stmt_handle="373">
                                    <assignment variable_name="Logging">
                                        <constant type="boolean">false</constant>
                                    </assignment>
                                </expression>
                                <process_method_call method_name="CloseLog" stmt_handle="374"/>
                            </sequence_of_statements>
                        </then>
                    </if>
                </body_statement>
            </process_method>
            <process_method name="CloseLog">
                <local_variable name="LogFile" type="FileOut"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="375">
                        <expression stmt_handle="376">
                            <assignment variable_name="LogFile">
                                <data_method_call method_name="open" super="false">
                                    <receiver>
                                        <data_method_call method_name="destination" super="false">
                                            <receiver>
                                                <new data_class="FileOut"/>
                                            </receiver>
                                            <argument>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"MemoryTrace"</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="Name"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">".xml"</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </assignment>
                        </expression>
                        <expression stmt_handle="377">
                            <data_method_call method_name="write" super="false">
                                <receiver>
                                    <variable name="LogFile"/>
                                </receiver>
                                <argument>
                                    <data_method_call method_name="xmlString" super="false">
                                        <receiver>
                                            <variable name="LogDoc"/>
                                        </receiver>
                                    </data_method_call>
                                </argument>
                            </data_method_call>
                        </expression>
                        <expression stmt_handle="378">
                            <data_method_call method_name="close" super="false">
                                <receiver>
                                    <variable name="LogFile"/>
                                </receiver>
                            </data_method_call>
                        </expression>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="CreateLog">
                <body_statement>
                    <sequence_of_statements stmt_handle="379">
                        <expression stmt_handle="380">
                            <assignment variable_name="Logging">
                                <constant type="boolean">true</constant>
                            </assignment>
                        </expression>
                        <expression stmt_handle="381">
                            <assignment variable_name="TraceElement">
                                <data_method_call method_name="init" super="false">
                                    <receiver>
                                        <new data_class="XMLElement"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"trace"</constant>
                                    </argument>
                                </data_method_call>
                            </assignment>
                        </expression>
                        <expression stmt_handle="382">
                            <data_method_call method_name="addAttribute" super="false">
                                <receiver>
                                    <variable name="TraceElement"/>
                                </receiver>
                                <argument>
                                    <constant type="string">"name"</constant>
                                </argument>
                                <argument>
                                    <binary_operation operator="+">
                                        <left_operand>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="Name"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="string">" ("</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Type"/>
                                                </right_operand>
                                            </binary_operation>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="string">")"</constant>
                                        </right_operand>
                                    </binary_operation>
                                </argument>
                            </data_method_call>
                        </expression>
                        <expression stmt_handle="383">
                            <assignment variable_name="LogDoc">
                                <data_method_call method_name="setElement" super="false">
                                    <receiver>
                                        <data_method_call method_name="init" super="false">
                                            <receiver>
                                                <new data_class="XMLDocument"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                    <argument>
                                        <variable name="TraceElement"/>
                                    </argument>
                                </data_method_call>
                            </assignment>
                        </expression>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="HandleAccesses">
                <local_variable name="NumberOfBytes" type="Integer"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="384">
                        <select_statements stmt_handle="385">
                            <sequence_of_statements stmt_handle="386">
                                <message_receive message_name="Allocate" stmt_handle="387">
                                    <variable>NumberOfBytes</variable>
                                    <atomic_expression>
                                        <data_method_call method_name="allocate" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                            <argument>
                                                <variable name="NumberOfBytes"/>
                                            </argument>
                                            <argument>
                                                <current_time/>
                                            </argument>
                                        </data_method_call>
                                    </atomic_expression>
                                    <port>Access</port>
                                </message_receive>
                                <message_send message_name="StartConsumption" stmt_handle="388">
                                    <argument>
                                        <binary_operation operator="*">
                                            <left_operand>
                                                <variable name="PowerPerByte"/>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <data_method_call method_name="asReal" super="false">
                                                        <receiver>
                                                            <variable name="NumberOfBytes"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </argument>
                                    <port>Power</port>
                                </message_send>
                                <process_method_call method_name="LogClaim" stmt_handle="389">
                                    <argument>
                                        <variable name="NumberOfBytes"/>
                                    </argument>
                                </process_method_call>
                            </sequence_of_statements>
                            <sequence_of_statements stmt_handle="390">
                                <message_receive message_name="Free" stmt_handle="391">
                                    <variable>NumberOfBytes</variable>
                                    <atomic_expression>
                                        <data_method_call method_name="free" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                            <argument>
                                                <variable name="NumberOfBytes"/>
                                            </argument>
                                            <argument>
                                                <current_time/>
                                            </argument>
                                        </data_method_call>
                                    </atomic_expression>
                                    <port>Access</port>
                                </message_receive>
                                <process_method_call method_name="LogRelease" stmt_handle="392">
                                    <argument>
                                        <variable name="NumberOfBytes"/>
                                    </argument>
                                </process_method_call>
                                <message_send message_name="StopConsumption" stmt_handle="393">
                                    <argument>
                                        <binary_operation operator="*">
                                            <left_operand>
                                                <variable name="PowerPerByte"/>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <data_method_call method_name="asReal" super="false">
                                                        <receiver>
                                                            <variable name="NumberOfBytes"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </argument>
                                    <port>Power</port>
                                </message_send>
                            </sequence_of_statements>
                        </select_statements>
                        <process_method_call method_name="HandleAccesses" stmt_handle="394"/>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="Initialise">
                <local_variable name="InUse" type="Boolean"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="395">
                        <expression stmt_handle="396">
                            <assignment variable_name="observer">
                                <data_method_call method_name="register" super="false">
                                    <receiver>
                                        <data_method_call method_name="identifyWith" super="false">
                                            <receiver>
                                                <new data_class="Observer"/>
                                            </receiver>
                                            <argument>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <constant type="string">"StorageUnit_"</constant>
                                                    </left_operand>
                                                    <right_operand>
                                                        <variable name="Name"/>
                                                    </right_operand>
                                                </binary_operation>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </assignment>
                        </expression>
                        <message_receive message_name="Use" stmt_handle="397">
                            <variable>InUse</variable>
                            <port>Access</port>
                        </message_receive>
                        <process_method_call method_name="CreateLog" stmt_handle="398"/>
                        <if stmt_handle="399">
                            <condition>
                                <variable name="InUse"/>
                            </condition>
                            <then>
                                <sequence_of_statements stmt_handle="400">
                                    <expression stmt_handle="401">
                                        <assignment variable_name="Status">
                                            <data_method_call method_name="logTo" super="false">
                                                <receiver>
                                                    <data_method_call method_name="init" super="false">
                                                        <receiver>
                                                            <new data_class="MemoryStatus"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <constant type="string">"Memory"</constant>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="Name"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </argument>
                                            </data_method_call>
                                        </assignment>
                                    </expression>
                                    <abort stmt_handle="402">
                                        <normal_behavior>
                                            <parallel_statements stmt_handle="403">
                                                <process_method_call method_name="HandleAccesses" stmt_handle="404"/>
                                                <process_method_call method_name="CheckAccuracyStatus" stmt_handle="405"/>
                                            </parallel_statements>
                                        </normal_behavior>
                                        <aborting_behavior>
                                            <message_receive message_name="Finished" stmt_handle="406">
                                                <atomic_expression>
                                                    <data_method_call method_name="complete" super="false">
                                                        <receiver>
                                                            <variable name="Status"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </atomic_expression>
                                                <port>Status</port>
                                            </message_receive>
                                        </aborting_behavior>
                                    </abort>
                                </sequence_of_statements>
                            </then>
                        </if>
                        <process_method_call method_name="CloseLog" stmt_handle="407"/>
                        <expression stmt_handle="408">
                            <data_method_call method_name="complete" super="false">
                                <receiver>
                                    <variable name="observer"/>
                                </receiver>
                            </data_method_call>
                        </expression>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="CheckAccuracyStatus">
                <body_statement>
                    <sequence_of_statements stmt_handle="409">
                        <delay stmt_handle="410">
                            <sequence_of_expressions>
                                <variable name="AccuracyCheckInterval"/>
                            </sequence_of_expressions>
                        </delay>
                        <if stmt_handle="411">
                            <condition>
                                <data_method_call method_name="not" super="false">
                                    <receiver>
                                        <data_method_call method_name="accurate" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <process_method_call method_name="CheckAccuracyStatus" stmt_handle="412"/>
                            </then>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="LogClaim">
                <argument name="Amount" type="Integer"/>
                <local_variable name="claimEl" type="XMLElement"/>
                <body_statement>
                    <if stmt_handle="413">
                        <condition>
                            <variable name="Logging"/>
                        </condition>
                        <then>
                            <sequence_of_statements stmt_handle="414">
                                <expression stmt_handle="415">
                                    <assignment variable_name="claimEl">
                                        <data_method_call method_name="addAttribute" super="false">
                                            <receiver>
                                                <data_method_call method_name="addAttribute" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="init" super="false">
                                                            <receiver>
                                                                <new data_class="XMLElement"/>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">"claim"</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"amount"</constant>
                                                    </argument>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="Amount"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <constant type="string">"time"</constant>
                                            </argument>
                                            <argument>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <current_time/>
                                                    </receiver>
                                                </data_method_call>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                </expression>
                                <expression stmt_handle="416">
                                    <data_method_call method_name="addElement" super="false">
                                        <receiver>
                                            <variable name="TraceElement"/>
                                        </receiver>
                                        <argument>
                                            <variable name="claimEl"/>
                                        </argument>
                                    </data_method_call>
                                </expression>
                                <process_method_call method_name="CheckContinueLog" stmt_handle="417"/>
                            </sequence_of_statements>
                        </then>
                    </if>
                </body_statement>
            </process_method>
            <process_method name="LogRelease">
                <argument name="Amount" type="Integer"/>
                <local_variable name="releaseEl" type="XMLElement"/>
                <body_statement>
                    <if stmt_handle="418">
                        <condition>
                            <variable name="Logging"/>
                        </condition>
                        <then>
                            <sequence_of_statements stmt_handle="419">
                                <expression stmt_handle="420">
                                    <assignment variable_name="releaseEl">
                                        <data_method_call method_name="addAttribute" super="false">
                                            <receiver>
                                                <data_method_call method_name="addAttribute" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="init" super="false">
                                                            <receiver>
                                                                <new data_class="XMLElement"/>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">"release"</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"amount"</constant>
                                                    </argument>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="Amount"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <constant type="string">"time"</constant>
                                            </argument>
                                            <argument>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <current_time/>
                                                    </receiver>
                                                </data_method_call>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                </expression>
                                <expression stmt_handle="421">
                                    <data_method_call method_name="addElement" super="false">
                                        <receiver>
                                            <variable name="TraceElement"/>
                                        </receiver>
                                        <argument>
                                            <variable name="releaseEl"/>
                                        </argument>
                                    </data_method_call>
                                </expression>
                                <process_method_call method_name="CheckContinueLog" stmt_handle="422"/>
                            </sequence_of_statements>
                        </then>
                    </if>
                </body_statement>
            </process_method>
        </process_class>
        <process_class name="CommunicationUnit">
            <interface>
                <port name="Communications">
                    <message type="write" name="TransferCompleted">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="TransferInitiated">
                        <argument type="String"/>
                    </message>
                    <message type="read" name="InitialiseTokens">
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="ReleaseRoom">
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="ReserveRoom">
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="Transfer">
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="read" name="Use">
                        <argument type="String"/>
                    </message>
                </port>
                <port name="Memory">
                    <message type="write" name="Allocate">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="Free">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="Use">
                        <argument type="Boolean"/>
                    </message>
                </port>
                <port name="Power">
                    <message type="write" name="StartConsumption">
                        <argument type="Real"/>
                    </message>
                    <message type="write" name="StopConsumption">
                        <argument type="Real"/>
                    </message>
                </port>
                <port name="Status">
                    <message type="read" name="Finished"/>
                </port>
            </interface>
            <instantiation_parameter name="BandwidthPerConnection" type="Real"/>
            <instantiation_parameter name="ConnectionSetUpLatency" type="Real"/>
            <instantiation_parameter name="MaxEventTimeToLog" type="Real"/>
            <instantiation_parameter name="NodeName" type="String"/>
            <instantiation_parameter name="PowerPerActiveConnection" type="Real"/>
            <instantiation_parameter name="AccuracyCheckInterval" type="Real"/>
            <instance_variable name="LogDoc" type="XMLDocument"/>
            <instance_variable name="Logging" type="Boolean"/>
            <instance_variable name="Status" type="CommunicationStatus"/>
            <instance_variable name="TraceElement" type="XMLElement"/>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="498"/>
            </initial_method_call>
            <process_method name="CheckContinueLog">
                <body_statement>
                    <if stmt_handle="424">
                        <condition>
                            <binary_operation operator="&gt;">
                                <left_operand>
                                    <current_time/>
                                </left_operand>
                                <right_operand>
                                    <variable name="MaxEventTimeToLog"/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <sequence_of_statements stmt_handle="425">
                                <expression stmt_handle="426">
                                    <assignment variable_name="Logging">
                                        <constant type="boolean">false</constant>
                                    </assignment>
                                </expression>
                                <process_method_call method_name="CloseLog" stmt_handle="427"/>
                            </sequence_of_statements>
                        </then>
                    </if>
                </body_statement>
            </process_method>
            <process_method name="CloseLog">
                <local_variable name="LogFile" type="FileOut"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="428">
                        <expression stmt_handle="429">
                            <assignment variable_name="LogFile">
                                <data_method_call method_name="open" super="false">
                                    <receiver>
                                        <data_method_call method_name="destination" super="false">
                                            <receiver>
                                                <new data_class="FileOut"/>
                                            </receiver>
                                            <argument>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"CommunicationTrace"</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="NodeName"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">".xml"</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </assignment>
                        </expression>
                        <expression stmt_handle="430">
                            <data_method_call method_name="write" super="false">
                                <receiver>
                                    <variable name="LogFile"/>
                                </receiver>
                                <argument>
                                    <data_method_call method_name="xmlString" super="false">
                                        <receiver>
                                            <variable name="LogDoc"/>
                                        </receiver>
                                    </data_method_call>
                                </argument>
                            </data_method_call>
                        </expression>
                        <expression stmt_handle="431">
                            <data_method_call method_name="close" super="false">
                                <receiver>
                                    <variable name="LogFile"/>
                                </receiver>
                            </data_method_call>
                        </expression>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="CreateLog">
                <body_statement>
                    <sequence_of_statements stmt_handle="432">
                        <expression stmt_handle="433">
                            <assignment variable_name="Logging">
                                <constant type="boolean">true</constant>
                            </assignment>
                        </expression>
                        <expression stmt_handle="434">
                            <assignment variable_name="TraceElement">
                                <data_method_call method_name="init" super="false">
                                    <receiver>
                                        <new data_class="XMLElement"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"trace"</constant>
                                    </argument>
                                </data_method_call>
                            </assignment>
                        </expression>
                        <expression stmt_handle="435">
                            <data_method_call method_name="addAttribute" super="false">
                                <receiver>
                                    <variable name="TraceElement"/>
                                </receiver>
                                <argument>
                                    <constant type="string">"type"</constant>
                                </argument>
                                <argument>
                                    <constant type="string">"communication"</constant>
                                </argument>
                            </data_method_call>
                        </expression>
                        <expression stmt_handle="436">
                            <data_method_call method_name="addAttribute" super="false">
                                <receiver>
                                    <variable name="TraceElement"/>
                                </receiver>
                                <argument>
                                    <constant type="string">"name"</constant>
                                </argument>
                                <argument>
                                    <variable name="NodeName"/>
                                </argument>
                            </data_method_call>
                        </expression>
                        <expression stmt_handle="437">
                            <assignment variable_name="LogDoc">
                                <data_method_call method_name="setElement" super="false">
                                    <receiver>
                                        <data_method_call method_name="init" super="false">
                                            <receiver>
                                                <new data_class="XMLDocument"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                    <argument>
                                        <variable name="TraceElement"/>
                                    </argument>
                                </data_method_call>
                            </assignment>
                        </expression>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="GetInitialTokens">
                <local_variable name="MapTo" type="String"/>
                <local_variable name="NumberOfTokens" type="Integer"/>
                <local_variable name="TokenSize" type="Integer"/>
                <body_statement>
                    <abort stmt_handle="438">
                        <normal_behavior>
                            <while stmt_handle="439">
                                <condition>
                                    <constant type="boolean">true</constant>
                                </condition>
                                <body>
                                    <sequence_of_statements stmt_handle="440">
                                        <message_receive message_name="InitialiseTokens" stmt_handle="441">
                                            <variable>MapTo</variable>
                                            <variable>NumberOfTokens</variable>
                                            <variable>TokenSize</variable>
                                            <condition>
                                                <binary_operation operator="=">
                                                    <left_operand>
                                                        <variable name="MapTo"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <variable name="NodeName"/>
                                                    </right_operand>
                                                </binary_operation>
                                            </condition>
                                            <port>Communications</port>
                                        </message_receive>
                                        <message_send message_name="Allocate" stmt_handle="442">
                                            <argument>
                                                <binary_operation operator="*">
                                                    <left_operand>
                                                        <variable name="NumberOfTokens"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <variable name="TokenSize"/>
                                                    </right_operand>
                                                </binary_operation>
                                            </argument>
                                            <port>Memory</port>
                                        </message_send>
                                    </sequence_of_statements>
                                </body>
                            </while>
                        </normal_behavior>
                        <aborting_behavior>
                            <delay stmt_handle="443">
                                <sequence_of_expressions>
                                    <constant type="real">1.0e-12</constant>
                                </sequence_of_expressions>
                            </delay>
                        </aborting_behavior>
                    </abort>
                </body_statement>
            </process_method>
            <process_method name="Initialise">
                <local_variable name="MapTo" type="String"/>
                <local_variable name="InUse" type="Boolean"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="444">
                        <expression stmt_handle="445">
                            <assignment variable_name="InUse">
                                <constant type="boolean">false</constant>
                            </assignment>
                        </expression>
                        <abort stmt_handle="446">
                            <normal_behavior>
                                <while stmt_handle="447">
                                    <condition>
                                        <constant type="boolean">true</constant>
                                    </condition>
                                    <body>
                                        <message_receive message_name="Use" stmt_handle="448">
                                            <variable>MapTo</variable>
                                            <condition>
                                                <binary_operation operator="=">
                                                    <left_operand>
                                                        <variable name="MapTo"/>
                                                    </left_operand>
                                                    <right_operand>
                                                        <variable name="NodeName"/>
                                                    </right_operand>
                                                </binary_operation>
                                            </condition>
                                            <atomic_expression>
                                                <assignment variable_name="InUse">
                                                    <constant type="boolean">true</constant>
                                                </assignment>
                                            </atomic_expression>
                                            <port>Communications</port>
                                        </message_receive>
                                    </body>
                                </while>
                            </normal_behavior>
                            <aborting_behavior>
                                <delay stmt_handle="449">
                                    <sequence_of_expressions>
                                        <constant type="real">1.0e-12</constant>
                                    </sequence_of_expressions>
                                </delay>
                            </aborting_behavior>
                        </abort>
                        <process_method_call method_name="CreateLog" stmt_handle="450"/>
                        <message_send message_name="Use" stmt_handle="451">
                            <argument>
                                <variable name="InUse"/>
                            </argument>
                            <port>Memory</port>
                        </message_send>
                        <if stmt_handle="452">
                            <condition>
                                <variable name="InUse"/>
                            </condition>
                            <then>
                                <sequence_of_statements stmt_handle="453">
                                    <expression stmt_handle="454">
                                        <assignment variable_name="Status">
                                            <data_method_call method_name="logTo" super="false">
                                                <receiver>
                                                    <data_method_call method_name="init" super="false">
                                                        <receiver>
                                                            <new data_class="CommunicationStatus"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <constant type="string">"Communication"</constant>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="NodeName"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </argument>
                                            </data_method_call>
                                        </assignment>
                                    </expression>
                                    <process_method_call method_name="GetInitialTokens" stmt_handle="455"/>
                                    <abort stmt_handle="456">
                                        <normal_behavior>
                                            <parallel_statements stmt_handle="457">
                                                <process_method_call method_name="Transfer" stmt_handle="458"/>
                                                <process_method_call method_name="ReleaseBufferSpace" stmt_handle="459"/>
                                                <process_method_call method_name="CheckAccuracyStatus" stmt_handle="460"/>
                                            </parallel_statements>
                                        </normal_behavior>
                                        <aborting_behavior>
                                            <message_receive message_name="Finished" stmt_handle="461">
                                                <port>Status</port>
                                            </message_receive>
                                        </aborting_behavior>
                                    </abort>
                                    <expression stmt_handle="462">
                                        <data_method_call method_name="complete" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                        </data_method_call>
                                    </expression>
                                    <process_method_call method_name="CloseLog" stmt_handle="463"/>
                                </sequence_of_statements>
                            </then>
                            <else>
                                <process_method_call method_name="CloseLog" stmt_handle="464"/>
                            </else>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="LogComplete">
                <argument name="Chan" type="String"/>
                <local_variable name="endEl" type="XMLElement"/>
                <body_statement>
                    <if stmt_handle="465">
                        <condition>
                            <variable name="Logging"/>
                        </condition>
                        <then>
                            <sequence_of_statements stmt_handle="466">
                                <expression stmt_handle="467">
                                    <assignment variable_name="endEl">
                                        <data_method_call method_name="addAttribute" super="false">
                                            <receiver>
                                                <data_method_call method_name="addAttribute" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="init" super="false">
                                                            <receiver>
                                                                <new data_class="XMLElement"/>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">"end"</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"channel"</constant>
                                                    </argument>
                                                    <argument>
                                                        <variable name="Chan"/>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <constant type="string">"time"</constant>
                                            </argument>
                                            <argument>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <current_time/>
                                                    </receiver>
                                                </data_method_call>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                </expression>
                                <expression stmt_handle="468">
                                    <data_method_call method_name="addElement" super="false">
                                        <receiver>
                                            <variable name="TraceElement"/>
                                        </receiver>
                                        <argument>
                                            <variable name="endEl"/>
                                        </argument>
                                    </data_method_call>
                                </expression>
                                <process_method_call method_name="CheckContinueLog" stmt_handle="469"/>
                            </sequence_of_statements>
                        </then>
                    </if>
                </body_statement>
            </process_method>
            <process_method name="LogStart">
                <argument name="Chan" type="String"/>
                <argument name="Iter" type="Integer"/>
                <local_variable name="startEl" type="XMLElement"/>
                <body_statement>
                    <if stmt_handle="470">
                        <condition>
                            <variable name="Logging"/>
                        </condition>
                        <then>
                            <sequence_of_statements stmt_handle="471">
                                <expression stmt_handle="472">
                                    <assignment variable_name="startEl">
                                        <data_method_call method_name="addAttribute" super="false">
                                            <receiver>
                                                <data_method_call method_name="addAttribute" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="addAttribute" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="init" super="false">
                                                                    <receiver>
                                                                        <new data_class="XMLElement"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"start"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">"channel"</constant>
                                                            </argument>
                                                            <argument>
                                                                <variable name="Chan"/>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"iteration"</constant>
                                                    </argument>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <variable name="Iter"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <constant type="string">"time"</constant>
                                            </argument>
                                            <argument>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <current_time/>
                                                    </receiver>
                                                </data_method_call>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                </expression>
                                <expression stmt_handle="473">
                                    <data_method_call method_name="addElement" super="false">
                                        <receiver>
                                            <variable name="TraceElement"/>
                                        </receiver>
                                        <argument>
                                            <variable name="startEl"/>
                                        </argument>
                                    </data_method_call>
                                </expression>
                                <process_method_call method_name="CheckContinueLog" stmt_handle="474"/>
                            </sequence_of_statements>
                        </then>
                    </if>
                </body_statement>
            </process_method>
            <process_method name="ReleaseBufferSpace">
                <local_variable name="MapTo" type="String"/>
                <local_variable name="NumberOfTokens" type="Integer"/>
                <local_variable name="TokenSize" type="Integer"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="475">
                        <message_receive message_name="ReleaseRoom" stmt_handle="476">
                            <variable>MapTo</variable>
                            <variable>NumberOfTokens</variable>
                            <variable>TokenSize</variable>
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="MapTo"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="NodeName"/>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <port>Communications</port>
                        </message_receive>
                        <message_send message_name="Free" stmt_handle="477">
                            <argument>
                                <binary_operation operator="*">
                                    <left_operand>
                                        <variable name="NumberOfTokens"/>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="TokenSize"/>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                            <port>Memory</port>
                        </message_send>
                        <process_method_call method_name="ReleaseBufferSpace" stmt_handle="478"/>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="Transfer">
                <local_variable name="Channel" type="String"/>
                <local_variable name="Connection" type="String"/>
                <local_variable name="MapTo" type="String"/>
                <local_variable name="Iteration" type="Integer"/>
                <local_variable name="NumberOfTokens" type="Integer"/>
                <local_variable name="TokenSize" type="Integer"/>
                <local_variable name="TransferID" type="Integer"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="479">
                        <message_receive message_name="ReserveRoom" stmt_handle="480">
                            <variable>Channel</variable>
                            <variable>Iteration</variable>
                            <variable>MapTo</variable>
                            <variable>NumberOfTokens</variable>
                            <variable>TokenSize</variable>
                            <condition>
                                <binary_operation operator="&amp;">
                                    <left_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="inactive" super="false">
                                                <receiver>
                                                    <variable name="Status"/>
                                                </receiver>
                                                <argument>
                                                    <variable name="Channel"/>
                                                </argument>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <binary_operation operator="=">
                                                <left_operand>
                                                    <variable name="MapTo"/>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="NodeName"/>
                                                </right_operand>
                                            </binary_operation>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <atomic_expression>
                                <data_method_call method_name="activate" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                    <argument>
                                        <variable name="Channel"/>
                                    </argument>
                                    <argument>
                                        <current_time/>
                                    </argument>
                                </data_method_call>
                            </atomic_expression>
                            <port>Communications</port>
                        </message_receive>
                        <parallel_statements stmt_handle="481">
                            <sequence_of_statements stmt_handle="482">
                                <message_send message_name="Allocate" stmt_handle="483">
                                    <argument>
                                        <binary_operation operator="*">
                                            <left_operand>
                                                <variable name="NumberOfTokens"/>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="TokenSize"/>
                                            </right_operand>
                                        </binary_operation>
                                    </argument>
                                    <port>Memory</port>
                                </message_send>
                                <message_send message_name="TransferInitiated" stmt_handle="484">
                                    <argument>
                                        <variable name="Channel"/>
                                    </argument>
                                    <port>Communications</port>
                                </message_send>
                                <delay stmt_handle="485">
                                    <sequence_of_expressions>
                                        <variable name="ConnectionSetUpLatency"/>
                                    </sequence_of_expressions>
                                </delay>
                                <message_receive message_name="Transfer" stmt_handle="486">
                                    <variable>Connection</variable>
                                    <variable>Iteration</variable>
                                    <variable>MapTo</variable>
                                    <variable>TransferID</variable>
                                    <condition>
                                        <binary_operation operator="&amp;">
                                            <left_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="Connection"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="Channel"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </left_operand>
                                            <right_operand>
                                                <sequence_of_expressions>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="MapTo"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="NodeName"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </sequence_of_expressions>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <port>Communications</port>
                                </message_receive>
                                <process_method_call method_name="LogStart" stmt_handle="487">
                                    <argument>
                                        <variable name="Channel"/>
                                    </argument>
                                    <argument>
                                        <variable name="Iteration"/>
                                    </argument>
                                </process_method_call>
                                <message_send message_name="StartConsumption" stmt_handle="488">
                                    <argument>
                                        <variable name="PowerPerActiveConnection"/>
                                    </argument>
                                    <port>Power</port>
                                </message_send>
                                <delay stmt_handle="489">
                                    <sequence_of_expressions>
                                        <binary_operation operator="/">
                                            <left_operand>
                                                <data_method_call method_name="asReal" super="false">
                                                    <receiver>
                                                        <sequence_of_expressions>
                                                            <binary_operation operator="*">
                                                                <left_operand>
                                                                    <variable name="NumberOfTokens"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <variable name="TokenSize"/>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </sequence_of_expressions>
                                                    </receiver>
                                                </data_method_call>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="BandwidthPerConnection"/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </delay>
                                <process_method_call method_name="LogComplete" stmt_handle="490">
                                    <argument>
                                        <variable name="Channel"/>
                                    </argument>
                                </process_method_call>
                                <message_send message_name="TransferCompleted" stmt_handle="491">
                                    <argument>
                                        <variable name="Channel"/>
                                    </argument>
                                    <argument>
                                        <variable name="TransferID"/>
                                    </argument>
                                    <atomic_expression>
                                        <data_method_call method_name="deactivate" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                            <argument>
                                                <variable name="Channel"/>
                                            </argument>
                                            <argument>
                                                <current_time/>
                                            </argument>
                                        </data_method_call>
                                    </atomic_expression>
                                    <port>Communications</port>
                                </message_send>
                                <message_send message_name="StopConsumption" stmt_handle="492">
                                    <argument>
                                        <variable name="PowerPerActiveConnection"/>
                                    </argument>
                                    <port>Power</port>
                                </message_send>
                            </sequence_of_statements>
                            <process_method_call method_name="Transfer" stmt_handle="493"/>
                        </parallel_statements>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="CheckAccuracyStatus">
                <body_statement>
                    <sequence_of_statements stmt_handle="494">
                        <delay stmt_handle="495">
                            <sequence_of_expressions>
                                <variable name="AccuracyCheckInterval"/>
                            </sequence_of_expressions>
                        </delay>
                        <if stmt_handle="496">
                            <condition>
                                <data_method_call method_name="not" super="false">
                                    <receiver>
                                        <data_method_call method_name="accurate" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <process_method_call method_name="CheckAccuracyStatus" stmt_handle="497"/>
                            </then>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
        </process_class>
        <process_class name="OperatingSystem">
            <interface>
                <port name="Processor">
                    <message type="write" name="Execute">
                        <argument type="ScheduledTask"/>
                    </message>
                    <message type="write" name="Preempt"/>
                    <message type="write" name="Use">
                        <argument type="Boolean"/>
                    </message>
                    <message type="read" name="ContextSwitchComplete"/>
                    <message type="read" name="Stopped">
                        <argument type="ScheduledTask"/>
                    </message>
                    <message type="read" name="TypeOfProcessor">
                        <argument type="String"/>
                    </message>
                </port>
                <port name="Task">
                    <message type="write" name="ExecutionCompleted">
                        <argument type="String"/>
                    </message>
                    <message type="read" name="Execute">
                        <argument type="String"/>
                        <argument type="String"/>
                        <argument type="Object"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                    </message>
                    <message type="read" name="Use">
                        <argument type="String"/>
                    </message>
                </port>
                <port name="Status">
                    <message type="read" name="Finished"/>
                </port>
            </interface>
            <instantiation_parameter name="MaxEventTimeToLog" type="Real"/>
            <instantiation_parameter name="NodeName" type="String"/>
            <instantiation_parameter name="Policy" type="String"/>
            <instantiation_parameter name="AccuracyCheckInterval" type="Real"/>
            <instance_variable name="LogDoc" type="XMLDocument"/>
            <instance_variable name="Logging" type="Boolean"/>
            <instance_variable name="Status" type="SchedulerStatus"/>
            <instance_variable name="TraceElement" type="XMLElement"/>
            <instance_variable name="observer" type="Observer"/>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="584"/>
            </initial_method_call>
            <process_method name="CheckContinueLog">
                <body_statement>
                    <if stmt_handle="499">
                        <condition>
                            <binary_operation operator="&gt;">
                                <left_operand>
                                    <current_time/>
                                </left_operand>
                                <right_operand>
                                    <variable name="MaxEventTimeToLog"/>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <sequence_of_statements stmt_handle="500">
                                <expression stmt_handle="501">
                                    <assignment variable_name="Logging">
                                        <constant type="boolean">false</constant>
                                    </assignment>
                                </expression>
                                <process_method_call method_name="CloseLog" stmt_handle="502"/>
                            </sequence_of_statements>
                        </then>
                    </if>
                </body_statement>
            </process_method>
            <process_method name="CloseLog">
                <local_variable name="LogFile" type="FileOut"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="503">
                        <expression stmt_handle="504">
                            <assignment variable_name="LogFile">
                                <data_method_call method_name="open" super="false">
                                    <receiver>
                                        <data_method_call method_name="destination" super="false">
                                            <receiver>
                                                <new data_class="FileOut"/>
                                            </receiver>
                                            <argument>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <binary_operation operator="+">
                                                            <left_operand>
                                                                <constant type="string">"ProcessorTrace"</constant>
                                                            </left_operand>
                                                            <right_operand>
                                                                <variable name="NodeName"/>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </left_operand>
                                                    <right_operand>
                                                        <constant type="string">".xml"</constant>
                                                    </right_operand>
                                                </binary_operation>
                                            </argument>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </assignment>
                        </expression>
                        <expression stmt_handle="505">
                            <data_method_call method_name="write" super="false">
                                <receiver>
                                    <variable name="LogFile"/>
                                </receiver>
                                <argument>
                                    <data_method_call method_name="xmlString" super="false">
                                        <receiver>
                                            <variable name="LogDoc"/>
                                        </receiver>
                                    </data_method_call>
                                </argument>
                            </data_method_call>
                        </expression>
                        <expression stmt_handle="506">
                            <data_method_call method_name="close" super="false">
                                <receiver>
                                    <variable name="LogFile"/>
                                </receiver>
                            </data_method_call>
                        </expression>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="CreateLog">
                <argument name="InUse" type="Boolean"/>
                <local_variable name="Type" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="507">
                        <expression stmt_handle="508">
                            <assignment variable_name="Logging">
                                <constant type="boolean">true</constant>
                            </assignment>
                        </expression>
                        <message_receive message_name="TypeOfProcessor" stmt_handle="509">
                            <variable>Type</variable>
                            <port>Processor</port>
                        </message_receive>
                        <expression stmt_handle="510">
                            <assignment variable_name="TraceElement">
                                <data_method_call method_name="init" super="false">
                                    <receiver>
                                        <new data_class="XMLElement"/>
                                    </receiver>
                                    <argument>
                                        <constant type="string">"trace"</constant>
                                    </argument>
                                </data_method_call>
                            </assignment>
                        </expression>
                        <expression stmt_handle="511">
                            <data_method_call method_name="addAttribute" super="false">
                                <receiver>
                                    <variable name="TraceElement"/>
                                </receiver>
                                <argument>
                                    <constant type="string">"type"</constant>
                                </argument>
                                <argument>
                                    <constant type="string">"processor"</constant>
                                </argument>
                            </data_method_call>
                        </expression>
                        <if stmt_handle="512">
                            <condition>
                                <variable name="InUse"/>
                            </condition>
                            <then>
                                <expression stmt_handle="513">
                                    <data_method_call method_name="addAttribute" super="false">
                                        <receiver>
                                            <variable name="TraceElement"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"name"</constant>
                                        </argument>
                                        <argument>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <binary_operation operator="+">
                                                                <left_operand>
                                                                    <variable name="Type"/>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <constant type="string">" ("</constant>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="Policy"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </left_operand>
                                                <right_operand>
                                                    <constant type="string">")"</constant>
                                                </right_operand>
                                            </binary_operation>
                                        </argument>
                                    </data_method_call>
                                </expression>
                            </then>
                            <else>
                                <expression stmt_handle="514">
                                    <data_method_call method_name="addAttribute" super="false">
                                        <receiver>
                                            <variable name="TraceElement"/>
                                        </receiver>
                                        <argument>
                                            <constant type="string">"name"</constant>
                                        </argument>
                                        <argument>
                                            <constant type="string">"not used"</constant>
                                        </argument>
                                    </data_method_call>
                                </expression>
                            </else>
                        </if>
                        <expression stmt_handle="515">
                            <data_method_call method_name="addAttribute" super="false">
                                <receiver>
                                    <variable name="TraceElement"/>
                                </receiver>
                                <argument>
                                    <constant type="string">"name"</constant>
                                </argument>
                                <argument>
                                    <binary_operation operator="+">
                                        <left_operand>
                                            <binary_operation operator="+">
                                                <left_operand>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <variable name="Type"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <constant type="string">" ("</constant>
                                                        </right_operand>
                                                    </binary_operation>
                                                </left_operand>
                                                <right_operand>
                                                    <variable name="Policy"/>
                                                </right_operand>
                                            </binary_operation>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="string">")"</constant>
                                        </right_operand>
                                    </binary_operation>
                                </argument>
                            </data_method_call>
                        </expression>
                        <expression stmt_handle="516">
                            <assignment variable_name="LogDoc">
                                <data_method_call method_name="setElement" super="false">
                                    <receiver>
                                        <data_method_call method_name="init" super="false">
                                            <receiver>
                                                <new data_class="XMLDocument"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                    <argument>
                                        <variable name="TraceElement"/>
                                    </argument>
                                </data_method_call>
                            </assignment>
                        </expression>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="Execute">
                <argument name="Task" type="ScheduledTask"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="517">
                        <message_send message_name="Execute" stmt_handle="518">
                            <argument>
                                <variable name="Task"/>
                            </argument>
                            <port>Processor</port>
                        </message_send>
                        <process_method_call method_name="LogStart" stmt_handle="519">
                            <argument>
                                <variable name="Task"/>
                            </argument>
                        </process_method_call>
                        <message_receive message_name="ContextSwitchComplete" stmt_handle="520">
                            <port>Processor</port>
                        </message_receive>
                        <process_method_call method_name="LogContextSwitch" stmt_handle="521">
                            <argument>
                                <variable name="Task"/>
                            </argument>
                        </process_method_call>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="GetMapping">
                <output_parameter name="InUse" type="Boolean"/>
                <local_variable name="MapTo" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="522">
                        <expression stmt_handle="523">
                            <assignment variable_name="InUse">
                                <constant type="boolean">false</constant>
                            </assignment>
                        </expression>
                        <abort stmt_handle="524">
                            <normal_behavior>
                                <while stmt_handle="525">
                                    <condition>
                                        <constant type="boolean">true</constant>
                                    </condition>
                                    <body>
                                        <sequence_of_statements stmt_handle="526">
                                            <message_receive message_name="Use" stmt_handle="527">
                                                <variable>MapTo</variable>
                                                <condition>
                                                    <binary_operation operator="=">
                                                        <left_operand>
                                                            <variable name="MapTo"/>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="NodeName"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </condition>
                                                <port>Task</port>
                                            </message_receive>
                                            <expression stmt_handle="528">
                                                <assignment variable_name="InUse">
                                                    <constant type="boolean">true</constant>
                                                </assignment>
                                            </expression>
                                        </sequence_of_statements>
                                    </body>
                                </while>
                            </normal_behavior>
                            <aborting_behavior>
                                <delay stmt_handle="529">
                                    <sequence_of_expressions>
                                        <constant type="real">1.0e-12</constant>
                                    </sequence_of_expressions>
                                </delay>
                            </aborting_behavior>
                        </abort>
                        <message_send message_name="Use" stmt_handle="530">
                            <argument>
                                <variable name="InUse"/>
                            </argument>
                            <port>Processor</port>
                        </message_send>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="Initialise">
                <local_variable name="InUse" type="Boolean"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="531">
                        <expression stmt_handle="532">
                            <assignment variable_name="observer">
                                <data_method_call method_name="identifyWith" super="false">
                                    <receiver>
                                        <data_method_call method_name="register" super="false">
                                            <receiver>
                                                <new data_class="Observer"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                    <argument>
                                        <binary_operation operator="+">
                                            <left_operand>
                                                <binary_operation operator="+">
                                                    <left_operand>
                                                        <constant type="string">""</constant>
                                                    </left_operand>
                                                    <right_operand>
                                                        <variable name="NodeName"/>
                                                    </right_operand>
                                                </binary_operation>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="string">"_OperatingSystem"</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </argument>
                                </data_method_call>
                            </assignment>
                        </expression>
                        <process_method_call method_name="GetMapping" stmt_handle="533">
                            <return_variable>InUse</return_variable>
                        </process_method_call>
                        <process_method_call method_name="CreateLog" stmt_handle="534">
                            <argument>
                                <variable name="InUse"/>
                            </argument>
                        </process_method_call>
                        <if stmt_handle="535">
                            <condition>
                                <variable name="InUse"/>
                            </condition>
                            <then>
                                <sequence_of_statements stmt_handle="536">
                                    <expression stmt_handle="537">
                                        <assignment variable_name="Status">
                                            <data_method_call method_name="init" super="false">
                                                <receiver>
                                                    <new data_class="SchedulerStatus"/>
                                                </receiver>
                                                <argument>
                                                    <variable name="Policy"/>
                                                </argument>
                                            </data_method_call>
                                        </assignment>
                                    </expression>
                                    <abort stmt_handle="538">
                                        <normal_behavior>
                                            <process_method_call method_name="Schedule" stmt_handle="539"/>
                                        </normal_behavior>
                                        <aborting_behavior>
                                            <message_receive message_name="Finished" stmt_handle="540">
                                                <port>Status</port>
                                            </message_receive>
                                        </aborting_behavior>
                                    </abort>
                                </sequence_of_statements>
                            </then>
                        </if>
                        <process_method_call method_name="CloseLog" stmt_handle="541"/>
                        <expression stmt_handle="542">
                            <data_method_call method_name="complete" super="false">
                                <receiver>
                                    <variable name="observer"/>
                                </receiver>
                            </data_method_call>
                        </expression>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="LogContextSwitch">
                <argument name="Task" type="ScheduledTask"/>
                <local_variable name="csEl" type="XMLElement"/>
                <body_statement>
                    <if stmt_handle="543">
                        <condition>
                            <variable name="Logging"/>
                        </condition>
                        <then>
                            <sequence_of_statements stmt_handle="544">
                                <expression stmt_handle="545">
                                    <assignment variable_name="csEl">
                                        <data_method_call method_name="addAttribute" super="false">
                                            <receiver>
                                                <data_method_call method_name="addAttribute" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="init" super="false">
                                                            <receiver>
                                                                <new data_class="XMLElement"/>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">"contextswitch"</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"task"</constant>
                                                    </argument>
                                                    <argument>
                                                        <data_method_call method_name="getName" super="false">
                                                            <receiver>
                                                                <variable name="Task"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <constant type="string">"time"</constant>
                                            </argument>
                                            <argument>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <current_time/>
                                                    </receiver>
                                                </data_method_call>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                </expression>
                                <expression stmt_handle="546">
                                    <data_method_call method_name="addElement" super="false">
                                        <receiver>
                                            <variable name="TraceElement"/>
                                        </receiver>
                                        <argument>
                                            <variable name="csEl"/>
                                        </argument>
                                    </data_method_call>
                                </expression>
                                <process_method_call method_name="CheckContinueLog" stmt_handle="547"/>
                            </sequence_of_statements>
                        </then>
                    </if>
                </body_statement>
            </process_method>
            <process_method name="LogPreempt">
                <argument name="Task" type="ScheduledTask"/>
                <local_variable name="preeEl" type="XMLElement"/>
                <body_statement>
                    <if stmt_handle="548">
                        <condition>
                            <variable name="Logging"/>
                        </condition>
                        <then>
                            <sequence_of_statements stmt_handle="549">
                                <expression stmt_handle="550">
                                    <assignment variable_name="preeEl">
                                        <data_method_call method_name="addAttribute" super="false">
                                            <receiver>
                                                <data_method_call method_name="addAttribute" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="init" super="false">
                                                            <receiver>
                                                                <new data_class="XMLElement"/>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">"preemption"</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"task"</constant>
                                                    </argument>
                                                    <argument>
                                                        <data_method_call method_name="getName" super="false">
                                                            <receiver>
                                                                <variable name="Task"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <constant type="string">"time"</constant>
                                            </argument>
                                            <argument>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <current_time/>
                                                    </receiver>
                                                </data_method_call>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                </expression>
                                <expression stmt_handle="551">
                                    <data_method_call method_name="addElement" super="false">
                                        <receiver>
                                            <variable name="TraceElement"/>
                                        </receiver>
                                        <argument>
                                            <variable name="preeEl"/>
                                        </argument>
                                    </data_method_call>
                                </expression>
                                <process_method_call method_name="CheckContinueLog" stmt_handle="552"/>
                            </sequence_of_statements>
                        </then>
                    </if>
                </body_statement>
            </process_method>
            <process_method name="LogStart">
                <argument name="Task" type="ScheduledTask"/>
                <local_variable name="startEl" type="XMLElement"/>
                <body_statement>
                    <if stmt_handle="553">
                        <condition>
                            <variable name="Logging"/>
                        </condition>
                        <then>
                            <sequence_of_statements stmt_handle="554">
                                <expression stmt_handle="555">
                                    <assignment variable_name="startEl">
                                        <data_method_call method_name="addAttribute" super="false">
                                            <receiver>
                                                <data_method_call method_name="addAttribute" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="addAttribute" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="init" super="false">
                                                                    <receiver>
                                                                        <new data_class="XMLElement"/>
                                                                    </receiver>
                                                                    <argument>
                                                                        <constant type="string">"start"</constant>
                                                                    </argument>
                                                                </data_method_call>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">"task"</constant>
                                                            </argument>
                                                            <argument>
                                                                <data_method_call method_name="getName" super="false">
                                                                    <receiver>
                                                                        <variable name="Task"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"iteration"</constant>
                                                    </argument>
                                                    <argument>
                                                        <data_method_call method_name="printString" super="false">
                                                            <receiver>
                                                                <data_method_call method_name="getIteration" super="false">
                                                                    <receiver>
                                                                        <variable name="Task"/>
                                                                    </receiver>
                                                                </data_method_call>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <constant type="string">"time"</constant>
                                            </argument>
                                            <argument>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <current_time/>
                                                    </receiver>
                                                </data_method_call>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                </expression>
                                <expression stmt_handle="556">
                                    <data_method_call method_name="addElement" super="false">
                                        <receiver>
                                            <variable name="TraceElement"/>
                                        </receiver>
                                        <argument>
                                            <variable name="startEl"/>
                                        </argument>
                                    </data_method_call>
                                </expression>
                                <process_method_call method_name="CheckContinueLog" stmt_handle="557"/>
                            </sequence_of_statements>
                        </then>
                    </if>
                </body_statement>
            </process_method>
            <process_method name="LogStop">
                <argument name="Task" type="ScheduledTask"/>
                <local_variable name="stopEl" type="XMLElement"/>
                <body_statement>
                    <if stmt_handle="558">
                        <condition>
                            <variable name="Logging"/>
                        </condition>
                        <then>
                            <sequence_of_statements stmt_handle="559">
                                <expression stmt_handle="560">
                                    <assignment variable_name="stopEl">
                                        <data_method_call method_name="addAttribute" super="false">
                                            <receiver>
                                                <data_method_call method_name="addAttribute" super="false">
                                                    <receiver>
                                                        <data_method_call method_name="init" super="false">
                                                            <receiver>
                                                                <new data_class="XMLElement"/>
                                                            </receiver>
                                                            <argument>
                                                                <constant type="string">"stop"</constant>
                                                            </argument>
                                                        </data_method_call>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"task"</constant>
                                                    </argument>
                                                    <argument>
                                                        <data_method_call method_name="getName" super="false">
                                                            <receiver>
                                                                <variable name="Task"/>
                                                            </receiver>
                                                        </data_method_call>
                                                    </argument>
                                                </data_method_call>
                                            </receiver>
                                            <argument>
                                                <constant type="string">"time"</constant>
                                            </argument>
                                            <argument>
                                                <data_method_call method_name="printString" super="false">
                                                    <receiver>
                                                        <current_time/>
                                                    </receiver>
                                                </data_method_call>
                                            </argument>
                                        </data_method_call>
                                    </assignment>
                                </expression>
                                <expression stmt_handle="561">
                                    <data_method_call method_name="addElement" super="false">
                                        <receiver>
                                            <variable name="TraceElement"/>
                                        </receiver>
                                        <argument>
                                            <variable name="stopEl"/>
                                        </argument>
                                    </data_method_call>
                                </expression>
                                <process_method_call method_name="CheckContinueLog" stmt_handle="562"/>
                            </sequence_of_statements>
                        </then>
                    </if>
                </body_statement>
            </process_method>
            <process_method name="Preempt">
                <local_variable name="OldTask" type="ScheduledTask"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="563">
                        <message_send message_name="Preempt" stmt_handle="564">
                            <port>Processor</port>
                        </message_send>
                        <message_receive message_name="Stopped" stmt_handle="565">
                            <variable>OldTask</variable>
                            <atomic_expression>
                                <data_method_call method_name="updateTask" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                    <argument>
                                        <variable name="OldTask"/>
                                    </argument>
                                </data_method_call>
                            </atomic_expression>
                            <port>Processor</port>
                        </message_receive>
                        <process_method_call method_name="LogPreempt" stmt_handle="566">
                            <argument>
                                <variable name="OldTask"/>
                            </argument>
                        </process_method_call>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="Schedule">
                <local_variable name="Task" type="String"/>
                <local_variable name="Scenario" type="String"/>
                <local_variable name="MapToNode" type="String"/>
                <local_variable name="Iteration" type="Integer"/>
                <local_variable name="Priority" type="Integer"/>
                <local_variable name="NumberOfWaitingTasks" type="Integer"/>
                <local_variable name="NewTask" type="ScheduledTask"/>
                <local_variable name="OldTask" type="ScheduledTask"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="567">
                        <select_statements stmt_handle="568">
                            <sequence_of_statements stmt_handle="569">
                                <message_receive message_name="Execute" stmt_handle="570">
                                    <variable>Task</variable>
                                    <variable>Scenario</variable>
                                    <variable>Iteration</variable>
                                    <variable>Priority</variable>
                                    <variable>MapToNode</variable>
                                    <condition>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="MapToNode"/>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="NodeName"/>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <atomic_expression>
                                        <assignment variable_name="NewTask">
                                            <data_method_call method_name="registerTask" super="false">
                                                <receiver>
                                                    <variable name="Status"/>
                                                </receiver>
                                                <argument>
                                                    <variable name="Task"/>
                                                </argument>
                                                <argument>
                                                    <variable name="Scenario"/>
                                                </argument>
                                                <argument>
                                                    <variable name="Iteration"/>
                                                </argument>
                                                <argument>
                                                    <variable name="Priority"/>
                                                </argument>
                                            </data_method_call>
                                        </assignment>
                                    </atomic_expression>
                                    <port>Task</port>
                                </message_receive>
                                <if stmt_handle="571">
                                    <condition>
                                        <binary_operation operator="==">
                                            <left_operand>
                                                <data_method_call method_name="nextTaskToSchedule" super="false">
                                                    <receiver>
                                                        <variable name="Status"/>
                                                    </receiver>
                                                </data_method_call>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="NewTask"/>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <select_statements stmt_handle="572">
                                            <process_method_call method_name="Execute" stmt_handle="573">
                                                <argument>
                                                    <variable name="NewTask"/>
                                                </argument>
                                            </process_method_call>
                                            <sequence_of_statements stmt_handle="574">
                                                <process_method_call method_name="Preempt" stmt_handle="575"/>
                                                <process_method_call method_name="Execute" stmt_handle="576">
                                                    <argument>
                                                        <variable name="NewTask"/>
                                                    </argument>
                                                </process_method_call>
                                            </sequence_of_statements>
                                        </select_statements>
                                    </then>
                                </if>
                            </sequence_of_statements>
                            <sequence_of_statements stmt_handle="577">
                                <message_receive message_name="Stopped" stmt_handle="578">
                                    <variable>OldTask</variable>
                                    <atomic_expression>
                                        <assignment variable_name="NumberOfWaitingTasks">
                                            <data_method_call method_name="removeTask" super="false">
                                                <receiver>
                                                    <variable name="Status"/>
                                                </receiver>
                                                <argument>
                                                    <variable name="OldTask"/>
                                                </argument>
                                            </data_method_call>
                                        </assignment>
                                    </atomic_expression>
                                    <port>Processor</port>
                                </message_receive>
                                <process_method_call method_name="LogStop" stmt_handle="579">
                                    <argument>
                                        <variable name="OldTask"/>
                                    </argument>
                                </process_method_call>
                                <message_send message_name="ExecutionCompleted" stmt_handle="580">
                                    <argument>
                                        <data_method_call method_name="getName" super="false">
                                            <receiver>
                                                <variable name="OldTask"/>
                                            </receiver>
                                        </data_method_call>
                                    </argument>
                                    <port>Task</port>
                                </message_send>
                                <if stmt_handle="581">
                                    <condition>
                                        <binary_operation operator="&gt;">
                                            <left_operand>
                                                <variable name="NumberOfWaitingTasks"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="integer">0</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <then>
                                        <process_method_call method_name="Execute" stmt_handle="582">
                                            <argument>
                                                <data_method_call method_name="nextTaskToSchedule" super="false">
                                                    <receiver>
                                                        <variable name="Status"/>
                                                    </receiver>
                                                </data_method_call>
                                            </argument>
                                        </process_method_call>
                                    </then>
                                </if>
                            </sequence_of_statements>
                        </select_statements>
                        <process_method_call method_name="Schedule" stmt_handle="583"/>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
        </process_class>
        <process_class name="ProcessingUnit">
            <interface>
                <port name="Memory">
                    <message type="write" name="Allocate">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="Free">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="Use">
                        <argument type="Boolean"/>
                    </message>
                </port>
                <port name="OS">
                    <message type="write" name="ContextSwitchComplete"/>
                    <message type="write" name="Stopped">
                        <argument type="ScheduledTask"/>
                    </message>
                    <message type="write" name="TypeOfProcessor">
                        <argument type="String"/>
                    </message>
                    <message type="read" name="Execute">
                        <argument type="ScheduledTask"/>
                    </message>
                    <message type="read" name="Preempt"/>
                    <message type="read" name="Use">
                        <argument type="Boolean"/>
                    </message>
                </port>
                <port name="Power">
                    <message type="write" name="StartConsumption">
                        <argument type="Real"/>
                    </message>
                    <message type="write" name="StopConsumption">
                        <argument type="Real"/>
                    </message>
                </port>
                <port name="Status">
                    <message type="read" name="Finished"/>
                </port>
            </interface>
            <instantiation_parameter name="NodeName" type="String"/>
            <instantiation_parameter name="Type" type="String"/>
            <instantiation_parameter name="VoltageScaleFactor" type="Real"/>
            <instantiation_parameter name="AccuracyCheckInterval" type="Real"/>
            <instance_variable name="Status" type="ProcessorStatus"/>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="621"/>
            </initial_method_call>
            <process_method name="checkAccuracyStatus">
                <body_statement>
                    <sequence_of_statements stmt_handle="585">
                        <delay stmt_handle="586">
                            <sequence_of_expressions>
                                <variable name="AccuracyCheckInterval"/>
                            </sequence_of_expressions>
                        </delay>
                        <if stmt_handle="587">
                            <condition>
                                <data_method_call method_name="not" super="false">
                                    <receiver>
                                        <data_method_call method_name="accurate" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                        </data_method_call>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <process_method_call method_name="checkAccuracyStatus" stmt_handle="588"/>
                            </then>
                            <else>
                                <expression stmt_handle="589">
                                    <data_method_call method_name="log" super="false">
                                        <receiver>
                                            <variable name="Status"/>
                                        </receiver>
                                    </data_method_call>
                                </expression>
                            </else>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="ExecuteTask">
                <local_variable name="Task" type="ScheduledTask"/>
                <local_variable name="StartTime" type="Real"/>
                <local_variable name="Preempt" type="Boolean"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="590">
                        <message_receive message_name="Execute" stmt_handle="591">
                            <variable>Task</variable>
                            <atomic_expression>
                                <data_method_call method_name="run" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                    <argument>
                                        <variable name="Task"/>
                                    </argument>
                                    <argument>
                                        <current_time/>
                                    </argument>
                                </data_method_call>
                            </atomic_expression>
                            <port>OS</port>
                        </message_receive>
                        <message_send message_name="StartConsumption" stmt_handle="592">
                            <argument>
                                <binary_operation operator="*">
                                    <left_operand>
                                        <data_method_call method_name="getPowerConsumption" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                        </data_method_call>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="sqr" super="false">
                                                <receiver>
                                                    <variable name="VoltageScaleFactor"/>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                            <port>Power</port>
                        </message_send>
                        <delay stmt_handle="593">
                            <sequence_of_expressions>
                                <binary_operation operator="/">
                                    <left_operand>
                                        <data_method_call method_name="getContextSwitchingTime" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                        </data_method_call>
                                    </left_operand>
                                    <right_operand>
                                        <variable name="VoltageScaleFactor"/>
                                    </right_operand>
                                </binary_operation>
                            </sequence_of_expressions>
                        </delay>
                        <message_send message_name="ContextSwitchComplete" stmt_handle="594">
                            <port>OS</port>
                        </message_send>
                        <if stmt_handle="595">
                            <condition>
                                <data_method_call method_name="notPreviouslyPreempted" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                    <argument>
                                        <variable name="Task"/>
                                    </argument>
                                </data_method_call>
                            </condition>
                            <then>
                                <message_send message_name="Allocate" stmt_handle="596">
                                    <argument>
                                        <data_method_call method_name="getMemoryUsage" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                            <argument>
                                                <variable name="Task"/>
                                            </argument>
                                        </data_method_call>
                                    </argument>
                                    <port>Memory</port>
                                </message_send>
                            </then>
                        </if>
                        <expression stmt_handle="597">
                            <assignment variable_name="StartTime">
                                <current_time/>
                            </assignment>
                        </expression>
                        <expression stmt_handle="598">
                            <assignment variable_name="Preempt">
                                <constant type="boolean">false</constant>
                            </assignment>
                        </expression>
                        <abort stmt_handle="599">
                            <normal_behavior>
                                <delay stmt_handle="600">
                                    <sequence_of_expressions>
                                        <binary_operation operator="/">
                                            <left_operand>
                                                <data_method_call method_name="getExecutionTime" super="false">
                                                    <receiver>
                                                        <variable name="Status"/>
                                                    </receiver>
                                                    <argument>
                                                        <variable name="Task"/>
                                                    </argument>
                                                </data_method_call>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="VoltageScaleFactor"/>
                                            </right_operand>
                                        </binary_operation>
                                    </sequence_of_expressions>
                                </delay>
                            </normal_behavior>
                            <aborting_behavior>
                                <message_receive message_name="Preempt" stmt_handle="601">
                                    <atomic_expression>
                                        <sequence_of_expressions>
                                            <assignment variable_name="Preempt">
                                                <constant type="boolean">true</constant>
                                            </assignment>
                                            <data_method_call method_name="update" super="false">
                                                <receiver>
                                                    <variable name="Status"/>
                                                </receiver>
                                                <argument>
                                                    <variable name="Task"/>
                                                </argument>
                                                <argument>
                                                    <binary_operation operator="*">
                                                        <left_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="-">
                                                                    <left_operand>
                                                                        <current_time/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <variable name="StartTime"/>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="VoltageScaleFactor"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </argument>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </atomic_expression>
                                    <port>OS</port>
                                </message_receive>
                            </aborting_behavior>
                        </abort>
                        <message_send message_name="Stopped" stmt_handle="602">
                            <argument>
                                <variable name="Task"/>
                            </argument>
                            <atomic_expression>
                                <data_method_call method_name="idle" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                    <argument>
                                        <current_time/>
                                    </argument>
                                </data_method_call>
                            </atomic_expression>
                            <port>OS</port>
                        </message_send>
                        <message_send message_name="StopConsumption" stmt_handle="603">
                            <argument>
                                <binary_operation operator="*">
                                    <left_operand>
                                        <data_method_call method_name="getPowerConsumption" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                        </data_method_call>
                                    </left_operand>
                                    <right_operand>
                                        <sequence_of_expressions>
                                            <data_method_call method_name="sqr" super="false">
                                                <receiver>
                                                    <variable name="VoltageScaleFactor"/>
                                                </receiver>
                                            </data_method_call>
                                        </sequence_of_expressions>
                                    </right_operand>
                                </binary_operation>
                            </argument>
                            <port>Power</port>
                        </message_send>
                        <if stmt_handle="604">
                            <condition>
                                <data_method_call method_name="not" super="false">
                                    <receiver>
                                        <variable name="Preempt"/>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <message_send message_name="Free" stmt_handle="605">
                                    <argument>
                                        <data_method_call method_name="getMemoryUsage" super="false">
                                            <receiver>
                                                <variable name="Status"/>
                                            </receiver>
                                            <argument>
                                                <variable name="Task"/>
                                            </argument>
                                        </data_method_call>
                                    </argument>
                                    <port>Memory</port>
                                </message_send>
                            </then>
                        </if>
                        <process_method_call method_name="ExecuteTask" stmt_handle="606"/>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="Initialise">
                <local_variable name="InUse" type="Boolean"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="607">
                        <message_receive message_name="Use" stmt_handle="608">
                            <variable>InUse</variable>
                            <port>OS</port>
                        </message_receive>
                        <message_send message_name="TypeOfProcessor" stmt_handle="609">
                            <argument>
                                <variable name="Type"/>
                            </argument>
                            <port>OS</port>
                        </message_send>
                        <message_send message_name="Use" stmt_handle="610">
                            <argument>
                                <variable name="InUse"/>
                            </argument>
                            <port>Memory</port>
                        </message_send>
                        <if stmt_handle="611">
                            <condition>
                                <variable name="InUse"/>
                            </condition>
                            <then>
                                <sequence_of_statements stmt_handle="612">
                                    <expression stmt_handle="613">
                                        <assignment variable_name="Status">
                                            <data_method_call method_name="logTo" super="false">
                                                <receiver>
                                                    <data_method_call method_name="init" super="false">
                                                        <receiver>
                                                            <new data_class="ProcessorStatus"/>
                                                        </receiver>
                                                        <argument>
                                                            <variable name="Type"/>
                                                        </argument>
                                                    </data_method_call>
                                                </receiver>
                                                <argument>
                                                    <binary_operation operator="+">
                                                        <left_operand>
                                                            <constant type="string">"Processor"</constant>
                                                        </left_operand>
                                                        <right_operand>
                                                            <variable name="NodeName"/>
                                                        </right_operand>
                                                    </binary_operation>
                                                </argument>
                                            </data_method_call>
                                        </assignment>
                                    </expression>
                                    <if stmt_handle="614">
                                        <condition>
                                            <binary_operation operator="&amp;">
                                                <left_operand>
                                                    <binary_operation operator="&amp;">
                                                        <left_operand>
                                                            <binary_operation operator="&amp;">
                                                                <left_operand>
                                                                    <binary_operation operator="&amp;">
                                                                        <left_operand>
                                                                            <binary_operation operator="&amp;">
                                                                                <left_operand>
                                                                                    <sequence_of_expressions>
                                                                                        <binary_operation operator="!=">
                                                                                            <left_operand>
                                                                                                <variable name="VoltageScaleFactor"/>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <binary_operation operator="/">
                                                                                                    <left_operand>
                                                                                                        <constant type="real">1.0</constant>
                                                                                                    </left_operand>
                                                                                                    <right_operand>
                                                                                                        <constant type="real">4.0</constant>
                                                                                                    </right_operand>
                                                                                                </binary_operation>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </sequence_of_expressions>
                                                                                </left_operand>
                                                                                <right_operand>
                                                                                    <sequence_of_expressions>
                                                                                        <binary_operation operator="!=">
                                                                                            <left_operand>
                                                                                                <variable name="VoltageScaleFactor"/>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <binary_operation operator="/">
                                                                                                    <left_operand>
                                                                                                        <constant type="real">1.0</constant>
                                                                                                    </left_operand>
                                                                                                    <right_operand>
                                                                                                        <constant type="real">2.0</constant>
                                                                                                    </right_operand>
                                                                                                </binary_operation>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </sequence_of_expressions>
                                                                                </right_operand>
                                                                            </binary_operation>
                                                                        </left_operand>
                                                                        <right_operand>
                                                                            <sequence_of_expressions>
                                                                                <binary_operation operator="!=">
                                                                                    <left_operand>
                                                                                        <variable name="VoltageScaleFactor"/>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <binary_operation operator="/">
                                                                                            <left_operand>
                                                                                                <constant type="real">1.0</constant>
                                                                                            </left_operand>
                                                                                            <right_operand>
                                                                                                <constant type="real">3.0</constant>
                                                                                            </right_operand>
                                                                                        </binary_operation>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </sequence_of_expressions>
                                                                        </right_operand>
                                                                    </binary_operation>
                                                                </left_operand>
                                                                <right_operand>
                                                                    <sequence_of_expressions>
                                                                        <binary_operation operator="!=">
                                                                            <left_operand>
                                                                                <variable name="VoltageScaleFactor"/>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <binary_operation operator="/">
                                                                                    <left_operand>
                                                                                        <constant type="real">2.0</constant>
                                                                                    </left_operand>
                                                                                    <right_operand>
                                                                                        <constant type="real">3.0</constant>
                                                                                    </right_operand>
                                                                                </binary_operation>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </sequence_of_expressions>
                                                                </right_operand>
                                                            </binary_operation>
                                                        </left_operand>
                                                        <right_operand>
                                                            <sequence_of_expressions>
                                                                <binary_operation operator="!=">
                                                                    <left_operand>
                                                                        <variable name="VoltageScaleFactor"/>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <binary_operation operator="/">
                                                                            <left_operand>
                                                                                <constant type="real">3.0</constant>
                                                                            </left_operand>
                                                                            <right_operand>
                                                                                <constant type="real">4.0</constant>
                                                                            </right_operand>
                                                                        </binary_operation>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </sequence_of_expressions>
                                                        </right_operand>
                                                    </binary_operation>
                                                </left_operand>
                                                <right_operand>
                                                    <sequence_of_expressions>
                                                        <binary_operation operator="!=">
                                                            <left_operand>
                                                                <variable name="VoltageScaleFactor"/>
                                                            </left_operand>
                                                            <right_operand>
                                                                <binary_operation operator="/">
                                                                    <left_operand>
                                                                        <constant type="real">1.0</constant>
                                                                    </left_operand>
                                                                    <right_operand>
                                                                        <constant type="real">1.0</constant>
                                                                    </right_operand>
                                                                </binary_operation>
                                                            </right_operand>
                                                        </binary_operation>
                                                    </sequence_of_expressions>
                                                </right_operand>
                                            </binary_operation>
                                        </condition>
                                        <then>
                                            <expression stmt_handle="615">
                                                <data_method_call method_name="error" super="false">
                                                    <receiver>
                                                        <variable name="Status"/>
                                                    </receiver>
                                                    <argument>
                                                        <constant type="string">"Invalid voltage scale factor"</constant>
                                                    </argument>
                                                </data_method_call>
                                            </expression>
                                        </then>
                                    </if>
                                    <abort stmt_handle="616">
                                        <normal_behavior>
                                            <parallel_statements stmt_handle="617">
                                                <process_method_call method_name="ExecuteTask" stmt_handle="618"/>
                                                <process_method_call method_name="checkAccuracyStatus" stmt_handle="619"/>
                                            </parallel_statements>
                                        </normal_behavior>
                                        <aborting_behavior>
                                            <message_receive message_name="Finished" stmt_handle="620">
                                                <atomic_expression>
                                                    <data_method_call method_name="complete" super="false">
                                                        <receiver>
                                                            <variable name="Status"/>
                                                        </receiver>
                                                    </data_method_call>
                                                </atomic_expression>
                                                <port>Status</port>
                                            </message_receive>
                                        </aborting_behavior>
                                    </abort>
                                </sequence_of_statements>
                            </then>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
        </process_class>
        <process_class name="Task2">
            <interface>
                <port name="Control">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="InspectTokenAvailability"/>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokenAvailable">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                </port>
                <port name="In">
                    <message type="write" name="InspectTokenAvailability">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokensAvailable"/>
                </port>
                <port name="Out1">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens"/>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="Out2">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens"/>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="Computation">
                    <message type="write" name="Use">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="Execute">
                        <argument type="String"/>
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                    </message>
                    <message type="read" name="ExecutionCompleted">
                        <argument type="String"/>
                    </message>
                </port>
            </interface>
            <super_class>Task</super_class>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="168"/>
            </initial_method_call>
            <process_method name="CheckTokenAvailabilityForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="144">
                        <message_send message_name="InspectTokenAvailability" stmt_handle="145">
                            <argument>
                                <constant type="integer">2048</constant>
                            </argument>
                            <port>In</port>
                        </message_send>
                        <message_receive message_name="TokensAvailable" stmt_handle="146">
                            <port>In</port>
                        </message_receive>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="NotifyBuffersAboutMapping">
                <body_statement>
                    <parallel_statements stmt_handle="147">
                        <message_send message_name="MappedTo" stmt_handle="148">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>In</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="149">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Out1</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="150">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Out2</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="151">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Control</port>
                        </message_send>
                    </parallel_statements>
                </body_statement>
            </process_method>
            <process_method name="PerformWrites">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="152">
                        <message_send message_name="WriteTokens" stmt_handle="153">
                            <port>Out1</port>
                        </message_send>
                        <if stmt_handle="154">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Scenario"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"S1"</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <message_send message_name="WriteTokens" stmt_handle="155">
                                    <port>Out2</port>
                                </message_send>
                            </then>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="ReleaseSpaceForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <message_send message_name="ReleaseRoom" stmt_handle="156">
                        <port>In</port>
                    </message_send>
                </body_statement>
            </process_method>
            <process_method name="ReserveSpaceForWrites">
                <argument name="Scenario" type="String"/>
                <argument name="Iteration" type="Integer"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="157">
                        <if stmt_handle="158">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Scenario"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"S1"</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_statements stmt_handle="159">
                                    <message_send message_name="ReserveRoom" stmt_handle="160">
                                        <argument>
                                            <constant type="integer">1024</constant>
                                        </argument>
                                        <argument>
                                            <variable name="Iteration"/>
                                        </argument>
                                        <port>Out1</port>
                                    </message_send>
                                    <message_receive message_name="ReservationSuccessful" stmt_handle="161">
                                        <port>Out1</port>
                                    </message_receive>
                                    <message_send message_name="ReserveRoom" stmt_handle="162">
                                        <argument>
                                            <constant type="integer">1024</constant>
                                        </argument>
                                        <argument>
                                            <variable name="Iteration"/>
                                        </argument>
                                        <port>Out2</port>
                                    </message_send>
                                    <message_receive message_name="ReservationSuccessful" stmt_handle="163">
                                        <port>Out2</port>
                                    </message_receive>
                                </sequence_of_statements>
                            </then>
                        </if>
                        <if stmt_handle="164">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Scenario"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"S2"</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_statements stmt_handle="165">
                                    <message_send message_name="ReserveRoom" stmt_handle="166">
                                        <argument>
                                            <constant type="integer">2048</constant>
                                        </argument>
                                        <argument>
                                            <variable name="Iteration"/>
                                        </argument>
                                        <port>Out1</port>
                                    </message_send>
                                    <message_receive message_name="ReservationSuccessful" stmt_handle="167">
                                        <port>Out1</port>
                                    </message_receive>
                                </sequence_of_statements>
                            </then>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
        </process_class>
        <process_class name="Task3">
            <interface>
                <port name="Control">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="InspectTokenAvailability"/>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokenAvailable">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                </port>
                <port name="In">
                    <message type="write" name="InspectTokenAvailability">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokensAvailable"/>
                </port>
                <port name="Out1">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens"/>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="Out2">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens"/>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="Computation">
                    <message type="write" name="Use">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="Execute">
                        <argument type="String"/>
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                    </message>
                    <message type="read" name="ExecutionCompleted">
                        <argument type="String"/>
                    </message>
                </port>
            </interface>
            <super_class>Task</super_class>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="189"/>
            </initial_method_call>
            <process_method name="CheckTokenAvailabilityForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="169">
                        <message_send message_name="InspectTokenAvailability" stmt_handle="170">
                            <argument>
                                <constant type="integer">1024</constant>
                            </argument>
                            <port>In</port>
                        </message_send>
                        <message_receive message_name="TokensAvailable" stmt_handle="171">
                            <port>In</port>
                        </message_receive>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="NotifyBuffersAboutMapping">
                <body_statement>
                    <parallel_statements stmt_handle="172">
                        <message_send message_name="MappedTo" stmt_handle="173">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>In</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="174">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Out1</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="175">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Out2</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="176">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Control</port>
                        </message_send>
                    </parallel_statements>
                </body_statement>
            </process_method>
            <process_method name="PerformWrites">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="177">
                        <message_send message_name="WriteTokens" stmt_handle="178">
                            <port>Out1</port>
                        </message_send>
                        <if stmt_handle="179">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Scenario"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"S2"</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <message_send message_name="WriteTokens" stmt_handle="180">
                                    <port>Out2</port>
                                </message_send>
                            </then>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="ReleaseSpaceForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <message_send message_name="ReleaseRoom" stmt_handle="181">
                        <port>In</port>
                    </message_send>
                </body_statement>
            </process_method>
            <process_method name="ReserveSpaceForWrites">
                <argument name="Scenario" type="String"/>
                <argument name="Iteration" type="Integer"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="182">
                        <message_send message_name="ReserveRoom" stmt_handle="183">
                            <argument>
                                <constant type="integer">4096</constant>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>Out1</port>
                        </message_send>
                        <message_receive message_name="ReservationSuccessful" stmt_handle="184">
                            <port>Out1</port>
                        </message_receive>
                        <if stmt_handle="185">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Scenario"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"S2"</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_statements stmt_handle="186">
                                    <message_send message_name="ReserveRoom" stmt_handle="187">
                                        <argument>
                                            <constant type="integer">4096</constant>
                                        </argument>
                                        <argument>
                                            <variable name="Iteration"/>
                                        </argument>
                                        <port>Out2</port>
                                    </message_send>
                                    <message_receive message_name="ReservationSuccessful" stmt_handle="188">
                                        <port>Out2</port>
                                    </message_receive>
                                </sequence_of_statements>
                            </then>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
        </process_class>
        <process_class name="Task4">
            <interface>
                <port name="Control">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="InspectTokenAvailability"/>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokenAvailable">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                </port>
                <port name="In">
                    <message type="write" name="InspectTokenAvailability">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokensAvailable"/>
                </port>
                <port name="Out">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens"/>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="Computation">
                    <message type="write" name="Use">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="Execute">
                        <argument type="String"/>
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                    </message>
                    <message type="read" name="ExecutionCompleted">
                        <argument type="String"/>
                    </message>
                </port>
            </interface>
            <super_class>Task</super_class>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="210"/>
            </initial_method_call>
            <process_method name="CheckTokenAvailabilityForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <if stmt_handle="190">
                        <condition>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="Scenario"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="string">"S1"</constant>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <sequence_of_statements stmt_handle="191">
                                <message_send message_name="InspectTokenAvailability" stmt_handle="192">
                                    <argument>
                                        <constant type="integer">2048</constant>
                                    </argument>
                                    <port>In</port>
                                </message_send>
                                <message_receive message_name="TokensAvailable" stmt_handle="193">
                                    <port>In</port>
                                </message_receive>
                            </sequence_of_statements>
                        </then>
                    </if>
                </body_statement>
            </process_method>
            <process_method name="Execute">
                <argument name="Scenario" type="String"/>
                <argument name="Iteration" type="Integer"/>
                <local_variable name="N" type="String"/>
                <body_statement>
                    <if stmt_handle="194">
                        <condition>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="Scenario"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="string">"S1"</constant>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <sequence_of_statements stmt_handle="195">
                                <message_send message_name="Execute" stmt_handle="196">
                                    <argument>
                                        <variable name="Name"/>
                                    </argument>
                                    <argument>
                                        <variable name="Scenario"/>
                                    </argument>
                                    <argument>
                                        <variable name="Iteration"/>
                                    </argument>
                                    <argument>
                                        <variable name="Priority"/>
                                    </argument>
                                    <argument>
                                        <variable name="MapTo"/>
                                    </argument>
                                    <port>Computation</port>
                                </message_send>
                                <message_receive message_name="ExecutionCompleted" stmt_handle="197">
                                    <variable>N</variable>
                                    <condition>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="N"/>
                                            </left_operand>
                                            <right_operand>
                                                <variable name="Name"/>
                                            </right_operand>
                                        </binary_operation>
                                    </condition>
                                    <port>Computation</port>
                                </message_receive>
                            </sequence_of_statements>
                        </then>
                    </if>
                </body_statement>
            </process_method>
            <process_method name="NotifyBuffersAboutMapping">
                <body_statement>
                    <parallel_statements stmt_handle="198">
                        <message_send message_name="MappedTo" stmt_handle="199">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>In</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="200">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Out</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="201">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Control</port>
                        </message_send>
                    </parallel_statements>
                </body_statement>
            </process_method>
            <process_method name="PerformWrites">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <if stmt_handle="202">
                        <condition>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="Scenario"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="string">"S1"</constant>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <message_send message_name="WriteTokens" stmt_handle="203">
                                <port>Out</port>
                            </message_send>
                        </then>
                    </if>
                </body_statement>
            </process_method>
            <process_method name="ReleaseSpaceForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <if stmt_handle="204">
                        <condition>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="Scenario"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="string">"S1"</constant>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <message_send message_name="ReleaseRoom" stmt_handle="205">
                                <port>In</port>
                            </message_send>
                        </then>
                    </if>
                </body_statement>
            </process_method>
            <process_method name="ReserveSpaceForWrites">
                <argument name="Scenario" type="String"/>
                <argument name="Iteration" type="Integer"/>
                <body_statement>
                    <if stmt_handle="206">
                        <condition>
                            <binary_operation operator="=">
                                <left_operand>
                                    <variable name="Scenario"/>
                                </left_operand>
                                <right_operand>
                                    <constant type="string">"S1"</constant>
                                </right_operand>
                            </binary_operation>
                        </condition>
                        <then>
                            <sequence_of_statements stmt_handle="207">
                                <message_send message_name="ReserveRoom" stmt_handle="208">
                                    <argument>
                                        <constant type="integer">4096</constant>
                                    </argument>
                                    <argument>
                                        <variable name="Iteration"/>
                                    </argument>
                                    <port>Out</port>
                                </message_send>
                                <message_receive message_name="ReservationSuccessful" stmt_handle="209">
                                    <port>Out</port>
                                </message_receive>
                            </sequence_of_statements>
                        </then>
                    </if>
                </body_statement>
            </process_method>
        </process_class>
        <process_class name="Task5">
            <interface>
                <port name="Control">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="InspectTokenAvailability"/>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokenAvailable">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                </port>
                <port name="In">
                    <message type="write" name="InspectTokenAvailability">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokensAvailable"/>
                </port>
                <port name="Out">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens"/>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="Computation">
                    <message type="write" name="Use">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="Execute">
                        <argument type="String"/>
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                    </message>
                    <message type="read" name="ExecutionCompleted">
                        <argument type="String"/>
                    </message>
                </port>
            </interface>
            <super_class>Task</super_class>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="223"/>
            </initial_method_call>
            <process_method name="CheckTokenAvailabilityForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="211">
                        <message_send message_name="InspectTokenAvailability" stmt_handle="212">
                            <argument>
                                <constant type="integer">4096</constant>
                            </argument>
                            <port>In</port>
                        </message_send>
                        <message_receive message_name="TokensAvailable" stmt_handle="213">
                            <port>In</port>
                        </message_receive>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="NotifyBuffersAboutMapping">
                <body_statement>
                    <parallel_statements stmt_handle="214">
                        <message_send message_name="MappedTo" stmt_handle="215">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>In</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="216">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Out</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="217">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Control</port>
                        </message_send>
                    </parallel_statements>
                </body_statement>
            </process_method>
            <process_method name="PerformWrites">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <message_send message_name="WriteTokens" stmt_handle="218">
                        <port>Out</port>
                    </message_send>
                </body_statement>
            </process_method>
            <process_method name="ReleaseSpaceForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <message_send message_name="ReleaseRoom" stmt_handle="219">
                        <port>In</port>
                    </message_send>
                </body_statement>
            </process_method>
            <process_method name="ReserveSpaceForWrites">
                <argument name="Scenario" type="String"/>
                <argument name="Iteration" type="Integer"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="220">
                        <message_send message_name="ReserveRoom" stmt_handle="221">
                            <argument>
                                <constant type="integer">4096</constant>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>Out</port>
                        </message_send>
                        <message_receive message_name="ReservationSuccessful" stmt_handle="222">
                            <port>Out</port>
                        </message_receive>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
        </process_class>
        <process_class name="Task6">
            <interface>
                <port name="Control">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="InspectTokenAvailability"/>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokenAvailable">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                </port>
                <port name="In1">
                    <message type="write" name="InspectTokenAvailability">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokensAvailable"/>
                </port>
                <port name="In2">
                    <message type="write" name="InspectTokenAvailability">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokensAvailable"/>
                </port>
                <port name="Out">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens"/>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="Computation">
                    <message type="write" name="Use">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="Execute">
                        <argument type="String"/>
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                    </message>
                    <message type="read" name="ExecutionCompleted">
                        <argument type="String"/>
                    </message>
                </port>
            </interface>
            <super_class>Task</super_class>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="247"/>
            </initial_method_call>
            <process_method name="CheckTokenAvailabilityForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="224">
                        <if stmt_handle="225">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Scenario"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"S2"</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_statements stmt_handle="226">
                                    <message_send message_name="InspectTokenAvailability" stmt_handle="227">
                                        <argument>
                                            <constant type="integer">4096</constant>
                                        </argument>
                                        <port>In1</port>
                                    </message_send>
                                    <message_receive message_name="TokensAvailable" stmt_handle="228">
                                        <port>In1</port>
                                    </message_receive>
                                </sequence_of_statements>
                            </then>
                        </if>
                        <if stmt_handle="229">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Scenario"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"S1"</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_statements stmt_handle="230">
                                    <message_send message_name="InspectTokenAvailability" stmt_handle="231">
                                        <argument>
                                            <constant type="integer">4096</constant>
                                        </argument>
                                        <port>In2</port>
                                    </message_send>
                                    <message_receive message_name="TokensAvailable" stmt_handle="232">
                                        <port>In2</port>
                                    </message_receive>
                                </sequence_of_statements>
                            </then>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="NotifyBuffersAboutMapping">
                <body_statement>
                    <parallel_statements stmt_handle="233">
                        <message_send message_name="MappedTo" stmt_handle="234">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>In1</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="235">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>In2</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="236">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Out</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="237">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Control</port>
                        </message_send>
                    </parallel_statements>
                </body_statement>
            </process_method>
            <process_method name="PerformWrites">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <message_send message_name="WriteTokens" stmt_handle="238">
                        <port>Out</port>
                    </message_send>
                </body_statement>
            </process_method>
            <process_method name="ReleaseSpaceForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="239">
                        <if stmt_handle="240">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Scenario"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"S2"</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <message_send message_name="ReleaseRoom" stmt_handle="241">
                                    <port>In1</port>
                                </message_send>
                            </then>
                        </if>
                        <if stmt_handle="242">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Scenario"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"S1"</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <message_send message_name="ReleaseRoom" stmt_handle="243">
                                    <port>In2</port>
                                </message_send>
                            </then>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="ReserveSpaceForWrites">
                <argument name="Scenario" type="String"/>
                <argument name="Iteration" type="Integer"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="244">
                        <message_send message_name="ReserveRoom" stmt_handle="245">
                            <argument>
                                <constant type="integer">1024</constant>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>Out</port>
                        </message_send>
                        <message_receive message_name="ReservationSuccessful" stmt_handle="246">
                            <port>Out</port>
                        </message_receive>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
        </process_class>
        <process_class name="Task7">
            <interface>
                <port name="Control">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="InspectTokenAvailability"/>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokenAvailable">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                </port>
                <port name="In1">
                    <message type="write" name="InspectTokenAvailability">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokensAvailable"/>
                </port>
                <port name="In2">
                    <message type="write" name="InspectTokenAvailability">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokensAvailable"/>
                </port>
                <port name="In3">
                    <message type="write" name="InspectTokenAvailability">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokensAvailable"/>
                </port>
                <port name="Out">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens"/>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="Computation">
                    <message type="write" name="Use">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="Execute">
                        <argument type="String"/>
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                    </message>
                    <message type="read" name="ExecutionCompleted">
                        <argument type="String"/>
                    </message>
                </port>
            </interface>
            <super_class>Task</super_class>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="274"/>
            </initial_method_call>
            <process_method name="CheckTokenAvailabilityForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="248">
                        <if stmt_handle="249">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Scenario"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"S1"</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_statements stmt_handle="250">
                                    <message_send message_name="InspectTokenAvailability" stmt_handle="251">
                                        <argument>
                                            <constant type="integer">1024</constant>
                                        </argument>
                                        <port>In1</port>
                                    </message_send>
                                    <message_receive message_name="TokensAvailable" stmt_handle="252">
                                        <port>In1</port>
                                    </message_receive>
                                </sequence_of_statements>
                            </then>
                            <else>
                                <sequence_of_statements stmt_handle="253">
                                    <message_send message_name="InspectTokenAvailability" stmt_handle="254">
                                        <argument>
                                            <constant type="integer">2048</constant>
                                        </argument>
                                        <port>In1</port>
                                    </message_send>
                                    <message_receive message_name="TokensAvailable" stmt_handle="255">
                                        <port>In1</port>
                                    </message_receive>
                                </sequence_of_statements>
                            </else>
                        </if>
                        <message_send message_name="InspectTokenAvailability" stmt_handle="256">
                            <argument>
                                <constant type="integer">4096</constant>
                            </argument>
                            <port>In2</port>
                        </message_send>
                        <message_receive message_name="TokensAvailable" stmt_handle="257">
                            <port>In2</port>
                        </message_receive>
                        <message_send message_name="InspectTokenAvailability" stmt_handle="258">
                            <argument>
                                <constant type="integer">1024</constant>
                            </argument>
                            <port>In3</port>
                        </message_send>
                        <message_receive message_name="TokensAvailable" stmt_handle="259">
                            <port>In3</port>
                        </message_receive>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="NotifyBuffersAboutMapping">
                <body_statement>
                    <parallel_statements stmt_handle="260">
                        <message_send message_name="MappedTo" stmt_handle="261">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>In1</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="262">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>In2</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="263">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>In3</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="264">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Out</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="265">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Control</port>
                        </message_send>
                    </parallel_statements>
                </body_statement>
            </process_method>
            <process_method name="PerformWrites">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <message_send message_name="WriteTokens" stmt_handle="266">
                        <port>Out</port>
                    </message_send>
                </body_statement>
            </process_method>
            <process_method name="ReleaseSpaceForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="267">
                        <message_send message_name="ReleaseRoom" stmt_handle="268">
                            <port>In1</port>
                        </message_send>
                        <message_send message_name="ReleaseRoom" stmt_handle="269">
                            <port>In2</port>
                        </message_send>
                        <message_send message_name="ReleaseRoom" stmt_handle="270">
                            <port>In3</port>
                        </message_send>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="ReserveSpaceForWrites">
                <argument name="Scenario" type="String"/>
                <argument name="Iteration" type="Integer"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="271">
                        <message_send message_name="ReserveRoom" stmt_handle="272">
                            <argument>
                                <constant type="integer">2048</constant>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>Out</port>
                        </message_send>
                        <message_receive message_name="ReservationSuccessful" stmt_handle="273">
                            <port>Out</port>
                        </message_receive>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
        </process_class>
        <process_class name="Task8">
            <interface>
                <port name="Control">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="InspectTokenAvailability"/>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokenAvailable">
                        <argument type="String"/>
                        <argument type="Integer"/>
                    </message>
                </port>
                <port name="In1">
                    <message type="write" name="InspectTokenAvailability">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokensAvailable"/>
                </port>
                <port name="In2">
                    <message type="write" name="InspectTokenAvailability">
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReleaseRoom"/>
                    <message type="read" name="TokensAvailable"/>
                </port>
                <port name="Out">
                    <message type="write" name="MappedTo">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="ReserveRoom">
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                    </message>
                    <message type="write" name="WriteTokens"/>
                    <message type="read" name="ReservationSuccessful"/>
                </port>
                <port name="Status">
                    <message type="write" name="Finished"/>
                </port>
                <port name="Computation">
                    <message type="write" name="Use">
                        <argument type="String"/>
                    </message>
                    <message type="write" name="Execute">
                        <argument type="String"/>
                        <argument type="String"/>
                        <argument type="Integer"/>
                        <argument type="Integer"/>
                        <argument type="String"/>
                    </message>
                    <message type="read" name="ExecutionCompleted">
                        <argument type="String"/>
                    </message>
                </port>
            </interface>
            <super_class>Task</super_class>
            <instantiation_parameter name="DesiredLatency" type="Real"/>
            <instantiation_parameter name="DesiredThroughput" type="Real"/>
            <instantiation_parameter name="Iterate" type="Boolean"/>
            <instantiation_parameter name="AccuracyCheckInterval" type="Real"/>
            <instance_variable name="Status" type="ApplicationStatus"/>
            <instance_variable name="Complete" type="Boolean"/>
            <instance_variable name="fired" type="Boolean"/>
            <initial_method_call>
                <process_method_call method_name="Initialise" stmt_handle="329"/>
            </initial_method_call>
            <process_method name="CheckAccuracyStatus">
                <body_statement>
                    <sequence_of_statements stmt_handle="275">
                        <if stmt_handle="276">
                            <condition>
                                <sequence_of_expressions>
                                    <binary_operation operator="&gt;">
                                        <left_operand>
                                            <current_time/>
                                        </left_operand>
                                        <right_operand>
                                            <constant type="real">50.0</constant>
                                        </right_operand>
                                    </binary_operation>
                                </sequence_of_expressions>
                            </condition>
                            <then>
                                <expression stmt_handle="277">
                                    <data_method_call method_name="halt" super="false">
                                        <receiver>
                                            <variable name="Status"/>
                                        </receiver>
                                    </data_method_call>
                                </expression>
                            </then>
                        </if>
                        <delay stmt_handle="278">
                            <sequence_of_expressions>
                                <variable name="AccuracyCheckInterval"/>
                            </sequence_of_expressions>
                        </delay>
                        <if stmt_handle="279">
                            <condition>
                                <data_method_call method_name="accurate" super="false">
                                    <receiver>
                                        <variable name="Status"/>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <expression stmt_handle="280">
                                    <assignment variable_name="Complete">
                                        <constant type="boolean">true</constant>
                                    </assignment>
                                </expression>
                            </then>
                        </if>
                        <process_method_call method_name="CheckAccuracyStatus" stmt_handle="281"/>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="CheckTokenAvailabilityForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="282">
                        <if stmt_handle="283">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Scenario"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"S1"</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <sequence_of_statements stmt_handle="284">
                                    <message_send message_name="InspectTokenAvailability" stmt_handle="285">
                                        <argument>
                                            <constant type="integer">1024</constant>
                                        </argument>
                                        <port>In1</port>
                                    </message_send>
                                    <message_receive message_name="TokensAvailable" stmt_handle="286">
                                        <port>In1</port>
                                    </message_receive>
                                </sequence_of_statements>
                            </then>
                        </if>
                        <message_send message_name="InspectTokenAvailability" stmt_handle="287">
                            <argument>
                                <constant type="integer">2048</constant>
                            </argument>
                            <port>In2</port>
                        </message_send>
                        <message_receive message_name="TokensAvailable" stmt_handle="288">
                            <port>In2</port>
                        </message_receive>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="Fire">
                <local_variable name="Scenario" type="String"/>
                <local_variable name="Iteration" type="Integer"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="289">
                        <message_send message_name="InspectTokenAvailability" stmt_handle="290">
                            <port>Control</port>
                        </message_send>
                        <message_receive message_name="TokenAvailable" stmt_handle="291">
                            <variable>Scenario</variable>
                            <variable>Iteration</variable>
                            <port>Control</port>
                        </message_receive>
                        <process_method_call method_name="CheckTokenAvailabilityForReads" stmt_handle="292">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                        </process_method_call>
                        <process_method_call method_name="ReserveSpaceForWrites" stmt_handle="293">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                        </process_method_call>
                        <process_method_call method_name="Execute" stmt_handle="294">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                        </process_method_call>
                        <process_method_call method_name="ReleaseSpaceForReads" stmt_handle="295">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                        </process_method_call>
                        <process_method_call method_name="PerformWrites" stmt_handle="296">
                            <argument>
                                <variable name="Scenario"/>
                            </argument>
                        </process_method_call>
                        <message_send message_name="ReleaseRoom" stmt_handle="297">
                            <port>Control</port>
                        </message_send>
                        <expression stmt_handle="298">
                            <data_method_call method_name="fired" super="false">
                                <receiver>
                                    <variable name="Status"/>
                                </receiver>
                                <argument>
                                    <current_time/>
                                </argument>
                            </data_method_call>
                        </expression>
                        <if stmt_handle="299">
                            <condition>
                                <data_method_call method_name="not" super="false">
                                    <receiver>
                                        <variable name="Iterate"/>
                                    </receiver>
                                </data_method_call>
                            </condition>
                            <then>
                                <expression stmt_handle="300">
                                    <assignment variable_name="Complete">
                                        <constant type="boolean">true</constant>
                                    </assignment>
                                </expression>
                            </then>
                            <else>
                                <process_method_call method_name="Fire" stmt_handle="301"/>
                            </else>
                        </if>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="Initialise">
                <body_statement>
                    <sequence_of_statements stmt_handle="302">
                        <process_method_call method_name="NotifyBuffersAboutMapping" stmt_handle="303"/>
                        <process_method_call method_name="NotifyPlatformAboutMapping" stmt_handle="304"/>
                        <expression stmt_handle="305">
                            <assignment variable_name="Status">
                                <data_method_call method_name="init" super="false">
                                    <receiver>
                                        <new data_class="ApplicationStatus"/>
                                    </receiver>
                                    <argument>
                                        <variable name="DesiredLatency"/>
                                    </argument>
                                    <argument>
                                        <variable name="DesiredThroughput"/>
                                    </argument>
                                </data_method_call>
                            </assignment>
                        </expression>
                        <expression stmt_handle="306">
                            <assignment variable_name="fired">
                                <constant type="boolean">false</constant>
                            </assignment>
                        </expression>
                        <expression stmt_handle="307">
                            <assignment variable_name="Complete">
                                <constant type="boolean">false</constant>
                            </assignment>
                        </expression>
                        <abort stmt_handle="308">
                            <normal_behavior>
                                <parallel_statements stmt_handle="309">
                                    <process_method_call method_name="Fire" stmt_handle="310"/>
                                    <process_method_call method_name="CheckAccuracyStatus" stmt_handle="311"/>
                                </parallel_statements>
                            </normal_behavior>
                            <aborting_behavior>
                                <guard stmt_handle="312">
                                    <expression>
                                        <binary_operation operator="=">
                                            <left_operand>
                                                <variable name="Complete"/>
                                            </left_operand>
                                            <right_operand>
                                                <constant type="boolean">true</constant>
                                            </right_operand>
                                        </binary_operation>
                                    </expression>
                                    <statement>
                                        <expression stmt_handle="313">
                                            <data_method_call method_name="complete" super="false">
                                                <receiver>
                                                    <variable name="Status"/>
                                                </receiver>
                                            </data_method_call>
                                        </expression>
                                    </statement>
                                </guard>
                            </aborting_behavior>
                        </abort>
                        <while stmt_handle="314">
                            <condition>
                                <constant type="boolean">true</constant>
                            </condition>
                            <body>
                                <message_send message_name="Finished" stmt_handle="315">
                                    <port>Status</port>
                                </message_send>
                            </body>
                        </while>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="NotifyBuffersAboutMapping">
                <body_statement>
                    <parallel_statements stmt_handle="316">
                        <message_send message_name="MappedTo" stmt_handle="317">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>In1</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="318">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>In2</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="319">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Out</port>
                        </message_send>
                        <message_send message_name="MappedTo" stmt_handle="320">
                            <argument>
                                <variable name="MapTo"/>
                            </argument>
                            <port>Control</port>
                        </message_send>
                    </parallel_statements>
                </body_statement>
            </process_method>
            <process_method name="PerformWrites">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <message_send message_name="WriteTokens" stmt_handle="321">
                        <port>Out</port>
                    </message_send>
                </body_statement>
            </process_method>
            <process_method name="ReleaseSpaceForReads">
                <argument name="Scenario" type="String"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="322">
                        <if stmt_handle="323">
                            <condition>
                                <binary_operation operator="=">
                                    <left_operand>
                                        <variable name="Scenario"/>
                                    </left_operand>
                                    <right_operand>
                                        <constant type="string">"S1"</constant>
                                    </right_operand>
                                </binary_operation>
                            </condition>
                            <then>
                                <message_send message_name="ReleaseRoom" stmt_handle="324">
                                    <port>In1</port>
                                </message_send>
                            </then>
                        </if>
                        <message_send message_name="ReleaseRoom" stmt_handle="325">
                            <port>In2</port>
                        </message_send>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
            <process_method name="ReserveSpaceForWrites">
                <argument name="Scenario" type="String"/>
                <argument name="Iteration" type="Integer"/>
                <body_statement>
                    <sequence_of_statements stmt_handle="326">
                        <message_send message_name="ReserveRoom" stmt_handle="327">
                            <argument>
                                <constant type="integer">1</constant>
                            </argument>
                            <argument>
                                <variable name="Iteration"/>
                            </argument>
                            <port>Out</port>
                        </message_send>
                        <message_receive message_name="ReservationSuccessful" stmt_handle="328">
                            <port>Out</port>
                        </message_receive>
                    </sequence_of_statements>
                </body_statement>
            </process_method>
        </process_class>
    </process_classes>
    <cluster_classes>
        <cluster_class name="Application">
            <interface>
                <port name="Buffers"/>
                <port name="Tasks"/>
                <port name="Status"/>
            </interface>
            <instantiation_parameter name="DesiredLatency" type="Real"/>
            <instantiation_parameter name="DesiredThroughput" type="Real"/>
            <instantiation_parameter name="Iterate" type="Boolean"/>
            <instantiation_parameter name="MapTask1To" type="String"/>
            <instantiation_parameter name="MapTask2To" type="String"/>
            <instantiation_parameter name="MapTask3To" type="String"/>
            <instantiation_parameter name="MapTask4To" type="String"/>
            <instantiation_parameter name="MapTask5To" type="String"/>
            <instantiation_parameter name="MapTask6To" type="String"/>
            <instantiation_parameter name="MapTask7To" type="String"/>
            <instantiation_parameter name="MapTask8To" type="String"/>
            <instantiation_parameter name="PriorityTask1" type="Integer"/>
            <instantiation_parameter name="PriorityTask2" type="Integer"/>
            <instantiation_parameter name="PriorityTask3" type="Integer"/>
            <instantiation_parameter name="PriorityTask4" type="Integer"/>
            <instantiation_parameter name="PriorityTask5" type="Integer"/>
            <instantiation_parameter name="PriorityTask6" type="Integer"/>
            <instantiation_parameter name="PriorityTask7" type="Integer"/>
            <instantiation_parameter name="PriorityTask8" type="Integer"/>
            <instantiation_parameter name="ScenarioPart1" type="String"/>
            <instantiation_parameter name="AccuracyCheckInterval" type="Real"/>
            <channel output_port="Buffers" name="0"/>
            <channel name="1"/>
            <channel name="2"/>
            <channel name="3"/>
            <channel name="4"/>
            <channel name="5"/>
            <channel name="6"/>
            <channel name="7"/>
            <channel name="8"/>
            <channel name="9"/>
            <channel name="10"/>
            <channel name="11"/>
            <channel name="12"/>
            <channel name="13"/>
            <channel name="14"/>
            <channel name="15"/>
            <channel name="16"/>
            <channel name="17"/>
            <channel name="18"/>
            <channel name="19"/>
            <channel name="20"/>
            <channel name="21"/>
            <channel name="22"/>
            <channel name="23"/>
            <channel name="24"/>
            <channel name="25"/>
            <channel name="26"/>
            <channel name="27"/>
            <channel name="28"/>
            <channel name="29"/>
            <channel name="30"/>
            <channel name="31"/>
            <channel name="32"/>
            <channel name="33"/>
            <channel name="34"/>
            <channel name="35"/>
            <channel name="36"/>
            <channel name="37"/>
            <channel name="38"/>
            <channel output_port="Status" name="39"/>
            <channel output_port="Tasks" name="40"/>
            <instance type="process" class="DataBuffer" name="F1">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"F1"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NumberOfInitialTokens">
                    <body_expression>
                        <constant type="integer">0</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="7"/>
                <connection port="In" channel="20"/>
            </instance>
            <instance type="process" class="DataBuffer" name="F10">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"F10"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NumberOfInitialTokens">
                    <body_expression>
                        <constant type="integer">0</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="1"/>
                <connection port="In" channel="30"/>
            </instance>
            <instance type="process" class="DataBuffer" name="F11">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"F11"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NumberOfInitialTokens">
                    <body_expression>
                        <constant type="integer">0</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="3"/>
                <connection port="In" channel="37"/>
            </instance>
            <instance type="process" class="DataBuffer" name="F12">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"F12"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NumberOfInitialTokens">
                    <body_expression>
                        <constant type="integer">4</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="4"/>
                <connection port="In" channel="38"/>
            </instance>
            <instance type="process" class="DataBuffer" name="F2">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"F2"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NumberOfInitialTokens">
                    <body_expression>
                        <constant type="integer">0</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="8"/>
                <connection port="In" channel="21"/>
            </instance>
            <instance type="process" class="DataBuffer" name="F3">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"F3"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NumberOfInitialTokens">
                    <body_expression>
                        <constant type="integer">0</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="9"/>
                <connection port="In" channel="22"/>
            </instance>
            <instance type="process" class="DataBuffer" name="F4">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"F4"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NumberOfInitialTokens">
                    <body_expression>
                        <constant type="integer">0</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="10"/>
                <connection port="In" channel="32"/>
            </instance>
            <instance type="process" class="DataBuffer" name="F5">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"F5"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NumberOfInitialTokens">
                    <body_expression>
                        <constant type="integer">0</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="2"/>
                <connection port="In" channel="33"/>
            </instance>
            <instance type="process" class="DataBuffer" name="F6">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"F6"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NumberOfInitialTokens">
                    <body_expression>
                        <constant type="integer">0</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="5"/>
                <connection port="In" channel="34"/>
            </instance>
            <instance type="process" class="DataBuffer" name="F7">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"F7"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NumberOfInitialTokens">
                    <body_expression>
                        <constant type="integer">0</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="12"/>
                <connection port="In" channel="31"/>
            </instance>
            <instance type="process" class="DataBuffer" name="F8">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"F8"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NumberOfInitialTokens">
                    <body_expression>
                        <constant type="integer">0</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="13"/>
                <connection port="In" channel="35"/>
            </instance>
            <instance type="process" class="DataBuffer" name="F9">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"F9"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NumberOfInitialTokens">
                    <body_expression>
                        <constant type="integer">0</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="14"/>
                <connection port="In" channel="36"/>
            </instance>
            <instance type="process" class="ControlBuffer" name="G1">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"G1"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="15"/>
                <connection port="In" channel="24"/>
            </instance>
            <instance type="process" class="ControlBuffer" name="G2">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"G2"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="16"/>
                <connection port="In" channel="25"/>
            </instance>
            <instance type="process" class="ControlBuffer" name="G3">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"G3"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="17"/>
                <connection port="In" channel="26"/>
            </instance>
            <instance type="process" class="ControlBuffer" name="G4">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"G4"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="11"/>
                <connection port="In" channel="27"/>
            </instance>
            <instance type="process" class="ControlBuffer" name="G5">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"G5"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="6"/>
                <connection port="In" channel="23"/>
            </instance>
            <instance type="process" class="ControlBuffer" name="G6">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"G6"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="18"/>
                <connection port="In" channel="28"/>
            </instance>
            <instance type="process" class="ControlBuffer" name="G7">
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"G7"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="TokenSize">
                    <body_expression>
                        <constant type="integer">1</constant>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communication" channel="0"/>
                <connection port="Out" channel="19"/>
                <connection port="In" channel="29"/>
            </instance>
            <instance type="process" class="Task1" name="Task1">
                <instantiation_expression parameter_name="Iterate">
                    <body_expression>
                        <variable name="Iterate"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="MapTo">
                    <body_expression>
                        <variable name="MapTask1To"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"Task1"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Priority">
                    <body_expression>
                        <variable name="PriorityTask1"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ScenarioPart1">
                    <body_expression>
                        <variable name="ScenarioPart1"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="In" channel="4"/>
                <connection port="D_T2" channel="20"/>
                <connection port="D_T3" channel="21"/>
                <connection port="D_T4" channel="22"/>
                <connection port="C_T6" channel="23"/>
                <connection port="C_T2" channel="24"/>
                <connection port="C_T3" channel="25"/>
                <connection port="C_T4" channel="26"/>
                <connection port="C_T5" channel="27"/>
                <connection port="C_T7" channel="28"/>
                <connection port="C_T8" channel="29"/>
                <connection port="Computation" channel="40"/>
            </instance>
            <instance type="process" class="Task2" name="Task2">
                <instantiation_expression parameter_name="MapTo">
                    <body_expression>
                        <variable name="MapTask2To"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"Task2"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Priority">
                    <body_expression>
                        <variable name="PriorityTask2"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="In" channel="7"/>
                <connection port="Control" channel="15"/>
                <connection port="Out2" channel="30"/>
                <connection port="Out1" channel="31"/>
                <connection port="Computation" channel="40"/>
            </instance>
            <instance type="process" class="Task3" name="Task3">
                <instantiation_expression parameter_name="MapTo">
                    <body_expression>
                        <variable name="MapTask3To"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"Task3"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Priority">
                    <body_expression>
                        <variable name="PriorityTask3"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="In" channel="8"/>
                <connection port="Control" channel="16"/>
                <connection port="Out1" channel="32"/>
                <connection port="Out2" channel="33"/>
                <connection port="Computation" channel="40"/>
            </instance>
            <instance type="process" class="Task4" name="Task4">
                <instantiation_expression parameter_name="MapTo">
                    <body_expression>
                        <variable name="MapTask4To"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"Task4"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Priority">
                    <body_expression>
                        <variable name="PriorityTask4"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="In" channel="9"/>
                <connection port="Control" channel="17"/>
                <connection port="Out" channel="34"/>
                <connection port="Computation" channel="40"/>
            </instance>
            <instance type="process" class="Task5" name="Task5">
                <instantiation_expression parameter_name="MapTo">
                    <body_expression>
                        <variable name="MapTask5To"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"Task5"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Priority">
                    <body_expression>
                        <variable name="PriorityTask5"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="In" channel="10"/>
                <connection port="Control" channel="11"/>
                <connection port="Out" channel="35"/>
                <connection port="Computation" channel="40"/>
            </instance>
            <instance type="process" class="Task6" name="Task6">
                <instantiation_expression parameter_name="MapTo">
                    <body_expression>
                        <variable name="MapTask6To"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"Task6"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Priority">
                    <body_expression>
                        <variable name="PriorityTask6"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="In1" channel="2"/>
                <connection port="In2" channel="5"/>
                <connection port="Control" channel="6"/>
                <connection port="Out" channel="36"/>
                <connection port="Computation" channel="40"/>
            </instance>
            <instance type="process" class="Task7" name="Task7">
                <instantiation_expression parameter_name="MapTo">
                    <body_expression>
                        <variable name="MapTask7To"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"Task7"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Priority">
                    <body_expression>
                        <variable name="PriorityTask7"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="In1" channel="12"/>
                <connection port="In2" channel="13"/>
                <connection port="In3" channel="14"/>
                <connection port="Control" channel="18"/>
                <connection port="Out" channel="37"/>
                <connection port="Computation" channel="40"/>
            </instance>
            <instance type="process" class="Task8" name="Task8">
                <instantiation_expression parameter_name="DesiredLatency">
                    <body_expression>
                        <variable name="DesiredLatency"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="DesiredThroughput">
                    <body_expression>
                        <variable name="DesiredThroughput"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Iterate">
                    <body_expression>
                        <variable name="Iterate"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="MapTo">
                    <body_expression>
                        <variable name="MapTask8To"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"Task8"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Priority">
                    <body_expression>
                        <variable name="PriorityTask8"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="In1" channel="1"/>
                <connection port="In2" channel="3"/>
                <connection port="Control" channel="19"/>
                <connection port="Out" channel="38"/>
                <connection port="Status" channel="39"/>
                <connection port="Computation" channel="40"/>
            </instance>
        </cluster_class>
        <cluster_class name="ProcessorNode">
            <interface>
                <port name="Communications"/>
                <port name="Computations"/>
                <port name="Power"/>
                <port name="Status"/>
            </interface>
            <instantiation_parameter name="CommunicationBandwidth" type="Real"/>
            <instantiation_parameter name="ConnectionSetUpLatency" type="Real"/>
            <instantiation_parameter name="MaxEventTimeToLog" type="Real"/>
            <instantiation_parameter name="NodeName" type="String"/>
            <instantiation_parameter name="OSPolicy" type="String"/>
            <instantiation_parameter name="PowerPerActiveConnection" type="Real"/>
            <instantiation_parameter name="PowerPerStoredByte" type="Real"/>
            <instantiation_parameter name="ProcessorType" type="String"/>
            <instantiation_parameter name="VoltageScaleFactor" type="Real"/>
            <instantiation_parameter name="AccuracyCheckInterval" type="Real"/>
            <channel name="0"/>
            <channel output_port="Communications" name="1"/>
            <channel output_port="Computations" name="2"/>
            <channel name="3"/>
            <channel output_port="Power" name="4"/>
            <channel name="5"/>
            <channel output_port="Status" name="6"/>
            <instance type="process" class="StorageUnit" name="BufferMemory">
                <instantiation_expression parameter_name="MaxEventTimeToLog">
                    <body_expression>
                        <variable name="MaxEventTimeToLog"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <binary_operation operator="+">
                            <left_operand>
                                <constant type="string">"Buffer"</constant>
                            </left_operand>
                            <right_operand>
                                <variable name="NodeName"/>
                            </right_operand>
                        </binary_operation>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerByte">
                    <body_expression>
                        <variable name="PowerPerStoredByte"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Type">
                    <body_expression>
                        <constant type="string">"Buffer"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Access" channel="0"/>
                <connection port="Power" channel="4"/>
                <connection port="Status" channel="6"/>
            </instance>
            <instance type="process" class="StorageUnit" name="DataMemory">
                <instantiation_expression parameter_name="MaxEventTimeToLog">
                    <body_expression>
                        <variable name="MaxEventTimeToLog"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <binary_operation operator="+">
                            <left_operand>
                                <constant type="string">"Data"</constant>
                            </left_operand>
                            <right_operand>
                                <variable name="NodeName"/>
                            </right_operand>
                        </binary_operation>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerByte">
                    <body_expression>
                        <variable name="PowerPerStoredByte"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Type">
                    <body_expression>
                        <constant type="string">"Data"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Access" channel="3"/>
                <connection port="Power" channel="4"/>
                <connection port="Status" channel="6"/>
            </instance>
            <instance type="process" class="CommunicationUnit" name="InterConnect">
                <instantiation_expression parameter_name="BandwidthPerConnection">
                    <body_expression>
                        <variable name="CommunicationBandwidth"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ConnectionSetUpLatency">
                    <body_expression>
                        <variable name="ConnectionSetUpLatency"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="MaxEventTimeToLog">
                    <body_expression>
                        <variable name="MaxEventTimeToLog"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NodeName">
                    <body_expression>
                        <variable name="NodeName"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerActiveConnection">
                    <body_expression>
                        <variable name="PowerPerActiveConnection"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Memory" channel="0"/>
                <connection port="Communications" channel="1"/>
                <connection port="Power" channel="4"/>
                <connection port="Status" channel="6"/>
            </instance>
            <instance type="process" class="OperatingSystem" name="OperatingSystem">
                <instantiation_expression parameter_name="MaxEventTimeToLog">
                    <body_expression>
                        <variable name="MaxEventTimeToLog"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NodeName">
                    <body_expression>
                        <variable name="NodeName"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Policy">
                    <body_expression>
                        <variable name="OSPolicy"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Task" channel="2"/>
                <connection port="Processor" channel="5"/>
                <connection port="Status" channel="6"/>
            </instance>
            <instance type="process" class="ProcessingUnit" name="Processor">
                <instantiation_expression parameter_name="NodeName">
                    <body_expression>
                        <variable name="NodeName"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Type">
                    <body_expression>
                        <variable name="ProcessorType"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="VoltageScaleFactor">
                    <body_expression>
                        <variable name="VoltageScaleFactor"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Memory" channel="3"/>
                <connection port="Power" channel="4"/>
                <connection port="OS" channel="5"/>
                <connection port="Status" channel="6"/>
            </instance>
        </cluster_class>
        <cluster_class name="NetworkOnChip">
            <interface>
                <port name="Communications"/>
                <port name="Power"/>
                <port name="Status"/>
            </interface>
            <instantiation_parameter name="BandwidthPerConnection" type="Real"/>
            <instantiation_parameter name="ConnectionSetUpLatency" type="Real"/>
            <instantiation_parameter name="MaxEventTimeToLog" type="Real"/>
            <instantiation_parameter name="NetworkName" type="String"/>
            <instantiation_parameter name="PowerPerActiveConnection" type="Real"/>
            <instantiation_parameter name="PowerPerStoredByte" type="Real"/>
            <instantiation_parameter name="AccuracyCheckInterval" type="Real"/>
            <channel name="0"/>
            <channel output_port="Communications" name="1"/>
            <channel output_port="Power" name="2"/>
            <channel output_port="Status" name="3"/>
            <instance type="process" class="StorageUnit" name="BufferMemory">
                <instantiation_expression parameter_name="MaxEventTimeToLog">
                    <body_expression>
                        <variable name="MaxEventTimeToLog"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Name">
                    <body_expression>
                        <constant type="string">"NoC"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerByte">
                    <body_expression>
                        <variable name="PowerPerStoredByte"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="Type">
                    <body_expression>
                        <constant type="string">"Buffer"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Access" channel="0"/>
                <connection port="Power" channel="2"/>
                <connection port="Status" channel="3"/>
            </instance>
            <instance type="process" class="CommunicationUnit" name="RouterNetwork">
                <instantiation_expression parameter_name="BandwidthPerConnection">
                    <body_expression>
                        <variable name="BandwidthPerConnection"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ConnectionSetUpLatency">
                    <body_expression>
                        <variable name="ConnectionSetUpLatency"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="MaxEventTimeToLog">
                    <body_expression>
                        <variable name="MaxEventTimeToLog"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NodeName">
                    <body_expression>
                        <variable name="NetworkName"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerActiveConnection">
                    <body_expression>
                        <variable name="PowerPerActiveConnection"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Memory" channel="0"/>
                <connection port="Communications" channel="1"/>
                <connection port="Power" channel="2"/>
                <connection port="Status" channel="3"/>
            </instance>
        </cluster_class>
        <cluster_class name="Platform">
            <interface>
                <port name="CommunicationResources"/>
                <port name="ComputationResources"/>
                <port name="Status"/>
            </interface>
            <instantiation_parameter name="MaxEventTimeToLog" type="Real"/>
            <instantiation_parameter name="NoC_BandwidthPerConnection" type="Real"/>
            <instantiation_parameter name="NoC_ConnectionSetUpLatency" type="Real"/>
            <instantiation_parameter name="Node_InternalBandwidth" type="Real"/>
            <instantiation_parameter name="Node_InternalConnectionSetUpLatency" type="Real"/>
            <instantiation_parameter name="PowerPerActiveConnection" type="Real"/>
            <instantiation_parameter name="PowerPerStoredByte" type="Real"/>
            <instantiation_parameter name="AccuracyCheckInterval" type="Real"/>
            <instantiation_parameter name="Node1ProcessorType" type="String"/>
            <instantiation_parameter name="Node2ProcessorType" type="String"/>
            <instantiation_parameter name="Node3ProcessorType" type="String"/>
            <instantiation_parameter name="Node4ProcessorType" type="String"/>
            <instantiation_parameter name="Node5ProcessorType" type="String"/>
            <instantiation_parameter name="Node6ProcessorType" type="String"/>
            <instantiation_parameter name="Node7ProcessorType" type="String"/>
            <instantiation_parameter name="Node8ProcessorType" type="String"/>
            <instantiation_parameter name="OSPolicy1" type="String"/>
            <instantiation_parameter name="OSPolicy2" type="String"/>
            <instantiation_parameter name="OSPolicy3" type="String"/>
            <instantiation_parameter name="OSPolicy4" type="String"/>
            <instantiation_parameter name="OSPolicy5" type="String"/>
            <instantiation_parameter name="OSPolicy6" type="String"/>
            <instantiation_parameter name="OSPolicy7" type="String"/>
            <instantiation_parameter name="OSPolicy8" type="String"/>
            <instantiation_parameter name="VSF1" type="Real"/>
            <instantiation_parameter name="VSF2" type="Real"/>
            <instantiation_parameter name="VSF3" type="Real"/>
            <instantiation_parameter name="VSF4" type="Real"/>
            <instantiation_parameter name="VSF5" type="Real"/>
            <instantiation_parameter name="VSF6" type="Real"/>
            <instantiation_parameter name="VSF7" type="Real"/>
            <instantiation_parameter name="VSF8" type="Real"/>
            <channel output_port="CommunicationResources" name="0"/>
            <channel output_port="ComputationResources" name="1"/>
            <channel name="2"/>
            <channel output_port="Status" name="3"/>
            <instance type="process" class="EnergySource" name="Battery">
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Power" channel="2"/>
                <connection port="Status" channel="3"/>
            </instance>
            <instance type="cluster" class="NetworkOnChip" name="NoC">
                <instantiation_expression parameter_name="BandwidthPerConnection">
                    <body_expression>
                        <variable name="NoC_BandwidthPerConnection"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ConnectionSetUpLatency">
                    <body_expression>
                        <variable name="NoC_ConnectionSetUpLatency"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="MaxEventTimeToLog">
                    <body_expression>
                        <variable name="MaxEventTimeToLog"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NetworkName">
                    <body_expression>
                        <constant type="string">"NoC"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerActiveConnection">
                    <body_expression>
                        <variable name="PowerPerActiveConnection"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerStoredByte">
                    <body_expression>
                        <variable name="PowerPerStoredByte"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communications" channel="0"/>
                <connection port="Power" channel="2"/>
                <connection port="Status" channel="3"/>
            </instance>
            <instance type="cluster" class="ProcessorNode" name="Node1">
                <instantiation_expression parameter_name="CommunicationBandwidth">
                    <body_expression>
                        <variable name="Node_InternalBandwidth"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ConnectionSetUpLatency">
                    <body_expression>
                        <variable name="Node_InternalConnectionSetUpLatency"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="MaxEventTimeToLog">
                    <body_expression>
                        <variable name="MaxEventTimeToLog"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NodeName">
                    <body_expression>
                        <constant type="string">"Node1"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="OSPolicy">
                    <body_expression>
                        <variable name="OSPolicy1"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerActiveConnection">
                    <body_expression>
                        <variable name="PowerPerActiveConnection"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerStoredByte">
                    <body_expression>
                        <variable name="PowerPerStoredByte"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ProcessorType">
                    <body_expression>
                        <variable name="Node1ProcessorType"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="VoltageScaleFactor">
                    <body_expression>
                        <variable name="VSF1"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communications" channel="0"/>
                <connection port="Computations" channel="1"/>
                <connection port="Power" channel="2"/>
                <connection port="Status" channel="3"/>
            </instance>
            <instance type="cluster" class="ProcessorNode" name="Node2">
                <instantiation_expression parameter_name="CommunicationBandwidth">
                    <body_expression>
                        <variable name="Node_InternalBandwidth"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ConnectionSetUpLatency">
                    <body_expression>
                        <variable name="Node_InternalConnectionSetUpLatency"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="MaxEventTimeToLog">
                    <body_expression>
                        <variable name="MaxEventTimeToLog"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NodeName">
                    <body_expression>
                        <constant type="string">"Node2"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="OSPolicy">
                    <body_expression>
                        <variable name="OSPolicy2"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerActiveConnection">
                    <body_expression>
                        <variable name="PowerPerActiveConnection"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerStoredByte">
                    <body_expression>
                        <variable name="PowerPerStoredByte"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ProcessorType">
                    <body_expression>
                        <variable name="Node2ProcessorType"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="VoltageScaleFactor">
                    <body_expression>
                        <variable name="VSF2"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communications" channel="0"/>
                <connection port="Computations" channel="1"/>
                <connection port="Power" channel="2"/>
                <connection port="Status" channel="3"/>
            </instance>
            <instance type="cluster" class="ProcessorNode" name="Node3">
                <instantiation_expression parameter_name="CommunicationBandwidth">
                    <body_expression>
                        <variable name="Node_InternalBandwidth"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ConnectionSetUpLatency">
                    <body_expression>
                        <variable name="Node_InternalConnectionSetUpLatency"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="MaxEventTimeToLog">
                    <body_expression>
                        <variable name="MaxEventTimeToLog"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NodeName">
                    <body_expression>
                        <constant type="string">"Node3"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="OSPolicy">
                    <body_expression>
                        <variable name="OSPolicy3"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerActiveConnection">
                    <body_expression>
                        <variable name="PowerPerActiveConnection"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerStoredByte">
                    <body_expression>
                        <variable name="PowerPerStoredByte"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ProcessorType">
                    <body_expression>
                        <variable name="Node3ProcessorType"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="VoltageScaleFactor">
                    <body_expression>
                        <variable name="VSF3"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communications" channel="0"/>
                <connection port="Computations" channel="1"/>
                <connection port="Power" channel="2"/>
                <connection port="Status" channel="3"/>
            </instance>
            <instance type="cluster" class="ProcessorNode" name="Node4">
                <instantiation_expression parameter_name="CommunicationBandwidth">
                    <body_expression>
                        <variable name="Node_InternalBandwidth"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ConnectionSetUpLatency">
                    <body_expression>
                        <variable name="Node_InternalConnectionSetUpLatency"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="MaxEventTimeToLog">
                    <body_expression>
                        <variable name="MaxEventTimeToLog"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NodeName">
                    <body_expression>
                        <constant type="string">"Node4"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="OSPolicy">
                    <body_expression>
                        <variable name="OSPolicy4"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerActiveConnection">
                    <body_expression>
                        <variable name="PowerPerActiveConnection"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerStoredByte">
                    <body_expression>
                        <variable name="PowerPerStoredByte"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ProcessorType">
                    <body_expression>
                        <variable name="Node4ProcessorType"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="VoltageScaleFactor">
                    <body_expression>
                        <variable name="VSF4"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communications" channel="0"/>
                <connection port="Computations" channel="1"/>
                <connection port="Power" channel="2"/>
                <connection port="Status" channel="3"/>
            </instance>
            <instance type="cluster" class="ProcessorNode" name="Node5">
                <instantiation_expression parameter_name="CommunicationBandwidth">
                    <body_expression>
                        <variable name="Node_InternalBandwidth"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ConnectionSetUpLatency">
                    <body_expression>
                        <variable name="Node_InternalConnectionSetUpLatency"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="MaxEventTimeToLog">
                    <body_expression>
                        <variable name="MaxEventTimeToLog"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NodeName">
                    <body_expression>
                        <constant type="string">"Node5"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="OSPolicy">
                    <body_expression>
                        <variable name="OSPolicy5"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerActiveConnection">
                    <body_expression>
                        <variable name="PowerPerActiveConnection"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerStoredByte">
                    <body_expression>
                        <variable name="PowerPerStoredByte"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ProcessorType">
                    <body_expression>
                        <variable name="Node5ProcessorType"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="VoltageScaleFactor">
                    <body_expression>
                        <variable name="VSF5"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communications" channel="0"/>
                <connection port="Computations" channel="1"/>
                <connection port="Power" channel="2"/>
                <connection port="Status" channel="3"/>
            </instance>
            <instance type="cluster" class="ProcessorNode" name="Node6">
                <instantiation_expression parameter_name="CommunicationBandwidth">
                    <body_expression>
                        <variable name="Node_InternalBandwidth"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ConnectionSetUpLatency">
                    <body_expression>
                        <variable name="Node_InternalConnectionSetUpLatency"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="MaxEventTimeToLog">
                    <body_expression>
                        <variable name="MaxEventTimeToLog"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NodeName">
                    <body_expression>
                        <constant type="string">"Node6"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="OSPolicy">
                    <body_expression>
                        <variable name="OSPolicy6"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerActiveConnection">
                    <body_expression>
                        <variable name="PowerPerActiveConnection"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerStoredByte">
                    <body_expression>
                        <variable name="PowerPerStoredByte"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ProcessorType">
                    <body_expression>
                        <variable name="Node6ProcessorType"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="VoltageScaleFactor">
                    <body_expression>
                        <variable name="VSF6"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communications" channel="0"/>
                <connection port="Computations" channel="1"/>
                <connection port="Power" channel="2"/>
                <connection port="Status" channel="3"/>
            </instance>
            <instance type="cluster" class="ProcessorNode" name="Node7">
                <instantiation_expression parameter_name="CommunicationBandwidth">
                    <body_expression>
                        <variable name="Node_InternalBandwidth"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ConnectionSetUpLatency">
                    <body_expression>
                        <variable name="Node_InternalConnectionSetUpLatency"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="MaxEventTimeToLog">
                    <body_expression>
                        <variable name="MaxEventTimeToLog"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NodeName">
                    <body_expression>
                        <constant type="string">"Node7"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="OSPolicy">
                    <body_expression>
                        <variable name="OSPolicy7"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerActiveConnection">
                    <body_expression>
                        <variable name="PowerPerActiveConnection"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerStoredByte">
                    <body_expression>
                        <variable name="PowerPerStoredByte"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ProcessorType">
                    <body_expression>
                        <variable name="Node7ProcessorType"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="VoltageScaleFactor">
                    <body_expression>
                        <variable name="VSF7"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communications" channel="0"/>
                <connection port="Computations" channel="1"/>
                <connection port="Power" channel="2"/>
                <connection port="Status" channel="3"/>
            </instance>
            <instance type="cluster" class="ProcessorNode" name="Node8">
                <instantiation_expression parameter_name="CommunicationBandwidth">
                    <body_expression>
                        <variable name="Node_InternalBandwidth"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ConnectionSetUpLatency">
                    <body_expression>
                        <variable name="Node_InternalConnectionSetUpLatency"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="MaxEventTimeToLog">
                    <body_expression>
                        <variable name="MaxEventTimeToLog"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="NodeName">
                    <body_expression>
                        <constant type="string">"Node8"</constant>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="OSPolicy">
                    <body_expression>
                        <variable name="OSPolicy8"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerActiveConnection">
                    <body_expression>
                        <variable name="PowerPerActiveConnection"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="PowerPerStoredByte">
                    <body_expression>
                        <variable name="PowerPerStoredByte"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="ProcessorType">
                    <body_expression>
                        <variable name="Node8ProcessorType"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="VoltageScaleFactor">
                    <body_expression>
                        <variable name="VSF8"/>
                    </body_expression>
                </instantiation_expression>
                <instantiation_expression parameter_name="AccuracyCheckInterval">
                    <body_expression>
                        <variable name="AccuracyCheckInterval"/>
                    </body_expression>
                </instantiation_expression>
                <connection port="Communications" channel="0"/>
                <connection port="Computations" channel="1"/>
                <connection port="Power" channel="2"/>
                <connection port="Status" channel="3"/>
            </instance>
        </cluster_class>
    </cluster_classes>
    <top_level_specification>
        <instance type="cluster" class="Application" name="Application">
            <instantiation_expression parameter_name="Iterate">
                <body_expression>
                    <constant type="boolean"><ITERATESTRING></constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="MapTask1To">
                <body_expression>
                    <constant type="string">"<TMAP1>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="MapTask2To">
                <body_expression>
                    <constant type="string">"<TMAP2>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="MapTask3To">
                <body_expression>
                    <constant type="string">"<TMAP3>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="MapTask4To">
                <body_expression>
                    <constant type="string">"<TMAP4>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="MapTask5To">
                <body_expression>
                    <constant type="string">"<TMAP5>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="MapTask6To">
                <body_expression>
                    <constant type="string">"<TMAP6>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="MapTask7To">
                <body_expression>
                    <constant type="string">"<TMAP7>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="MapTask8To">
                <body_expression>
                    <constant type="string">"<TMAP8>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="PriorityTask1">
                <body_expression>
                    <constant type="integer"><PRIORITY1></constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="PriorityTask2">
                <body_expression>
                    <constant type="integer"><PRIORITY2></constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="PriorityTask3">
                <body_expression>
                    <constant type="integer"><PRIORITY3></constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="PriorityTask4">
                <body_expression>
                    <constant type="integer"><PRIORITY4></constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="PriorityTask5">
                <body_expression>
                    <constant type="integer"><PRIORITY5></constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="PriorityTask6">
                <body_expression>
                    <constant type="integer"><PRIORITY6></constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="PriorityTask7">
                <body_expression>
                    <constant type="integer"><PRIORITY7></constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="PriorityTask8">
                <body_expression>
                    <constant type="integer"><PRIORITY8></constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="ScenarioPart1">
                <body_expression>
                    <constant type="string">"<SCENARIONAME>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="AccuracyCheckInterval">
                <body_expression>
                    <constant type="real">0.03</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="DesiredLatency">
                <body_expression>
                    <binary_operation operator="/">
                        <left_operand>
                            <constant type="real">1.0</constant>
                        </left_operand>
                        <right_operand>
                            <constant type="real">300.0</constant>
                        </right_operand>
                    </binary_operation>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="DesiredThroughput">
                <body_expression>
                    <constant type="real">500.0</constant>
                </body_expression>
            </instantiation_expression>
            <connection port="Buffers" channel="0"/>
            <connection port="Tasks" channel="1"/>
            <connection port="Status" channel="2"/>
        </instance>
        <instance type="cluster" class="Platform" name="MPSoC">
            <instantiation_expression parameter_name="Node1ProcessorType">
                <body_expression>
                    <constant type="string">"<PROCESSOR1>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="Node2ProcessorType">
                <body_expression>
                    <constant type="string">"<PROCESSOR2>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="Node3ProcessorType">
                <body_expression>
                    <constant type="string">"<PROCESSOR3>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="Node4ProcessorType">
                <body_expression>
                    <constant type="string">"<PROCESSOR4>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="Node5ProcessorType">
                <body_expression>
                    <constant type="string">"<PROCESSOR5>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="Node6ProcessorType">
                <body_expression>
                    <constant type="string">"<PROCESSOR6>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="Node7ProcessorType">
                <body_expression>
                    <constant type="string">"<PROCESSOR7>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="Node8ProcessorType">
                <body_expression>
                    <constant type="string">"<PROCESSOR8>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="VSF1">
                <body_expression>
                    <binary_operation operator="/">
                        <left_operand>
                            <constant type="real"><VSF1L></constant>
                        </left_operand>
                        <right_operand>
                            <constant type="real"><VSF1R></constant>
                        </right_operand>
                    </binary_operation>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="VSF2">
                <body_expression>
                    <binary_operation operator="/">
                        <left_operand>
                            <constant type="real"><VSF2L></constant>
                        </left_operand>
                        <right_operand>
                            <constant type="real"><VSF2R></constant>
                        </right_operand>
                    </binary_operation>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="VSF3">
                <body_expression>
                    <binary_operation operator="/">
                        <left_operand>
                            <constant type="real"><VSF3L></constant>
                        </left_operand>
                        <right_operand>
                            <constant type="real"><VSF3R></constant>
                        </right_operand>
                    </binary_operation>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="VSF4">
                <body_expression>
                    <binary_operation operator="/">
                        <left_operand>
                            <constant type="real"><VSF4L></constant>
                        </left_operand>
                        <right_operand>
                            <constant type="real"><VSF4R></constant>
                        </right_operand>
                    </binary_operation>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="VSF5">
                <body_expression>
                    <binary_operation operator="/">
                        <left_operand>
                            <constant type="real"><VSF5L></constant>
                        </left_operand>
                        <right_operand>
                            <constant type="real"><VSF5R></constant>
                        </right_operand>
                    </binary_operation>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="VSF6">
                <body_expression>
                    <binary_operation operator="/">
                        <left_operand>
                            <constant type="real"><VSF6L></constant>
                        </left_operand>
                        <right_operand>
                            <constant type="real"><VSF6R></constant>
                        </right_operand>
                    </binary_operation>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="VSF7">
                <body_expression>
                    <binary_operation operator="/">
                        <left_operand>
                            <constant type="real"><VSF7L></constant>
                        </left_operand>
                        <right_operand>
                            <constant type="real"><VSF7R></constant>
                        </right_operand>
                    </binary_operation>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="VSF8">
                <body_expression>
                    <binary_operation operator="/">
                        <left_operand>
                            <constant type="real"><VSF8L></constant>
                        </left_operand>
                        <right_operand>
                            <constant type="real"><VSF8R></constant>
                        </right_operand>
                    </binary_operation>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="OSPolicy1">
                <body_expression>
                    <constant type="string">"<OSPOLICY1>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="OSPolicy2">
                <body_expression>
                    <constant type="string">"<OSPOLICY2>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="OSPolicy3">
                <body_expression>
                    <constant type="string">"<OSPOLICY3>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="OSPolicy4">
                <body_expression>
                    <constant type="string">"<OSPOLICY4>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="OSPolicy5">
                <body_expression>
                    <constant type="string">"<OSPOLICY5>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="OSPolicy6">
                <body_expression>
                    <constant type="string">"<OSPOLICY6>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="OSPolicy7">
                <body_expression>
                    <constant type="string">"<OSPOLICY7>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="OSPolicy8">
                <body_expression>
                    <constant type="string">"<OSPOLICY8>"</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="NoC_BandwidthPerConnection">
                <body_expression>
                    <constant type="real">10000000.0</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="NoC_ConnectionSetUpLatency">
                <body_expression>
                    <constant type="real">0.00002</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="Node_InternalBandwidth">
                <body_expression>
                    <constant type="real">200000000.0</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="Node_InternalConnectionSetUpLatency">
                <body_expression>
                    <constant type="real">0.00001</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="PowerPerActiveConnection">
                <body_expression>
                    <constant type="real">0.01</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="PowerPerStoredByte">
                <body_expression>
                    <constant type="real">0.000001</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="AccuracyCheckInterval">
                <body_expression>
                    <constant type="real">0.03</constant>
                </body_expression>
            </instantiation_expression>
            <instantiation_expression parameter_name="MaxEventTimeToLog">
                <body_expression>
                    <constant type="real">0.1</constant>
                </body_expression>
            </instantiation_expression>
            <connection port="CommunicationResources" channel="0"/>
            <connection port="ComputationResources" channel="1"/>
            <connection port="Status" channel="2"/>
        </instance>
        <channel name="0"/>
        <channel name="1"/>
        <channel name="2"/>
    </top_level_specification>
</poosl_specification>
